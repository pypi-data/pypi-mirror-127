# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# General unit configuration for a kinematics object
class UnitCfgKin(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUnitCfgKin(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitCfgKin()
        x.Init(buf, n + offset)
        return x

    # UnitCfgKin
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # default units
    # UnitCfgKin
    def Default(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.UnitCfgObjSingle import UnitCfgObjSingle
            obj = UnitCfgObjSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnitCfgKin
    def DefaultLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnitCfgKin
    def DefaultIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # position unit abbreviations (must be 16 entries)
    # UnitCfgKin
    def Position(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UnitCfgKin
    def PositionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnitCfgKin
    def PositionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def UnitCfgKinStart(builder): builder.StartObject(2)
def UnitCfgKinAddDefault(builder, default): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(default), 0)
def UnitCfgKinStartDefaultVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def UnitCfgKinAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def UnitCfgKinStartPositionVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def UnitCfgKinEnd(builder): return builder.EndObject()
