# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# dummy flatbuffer for tests
class dummyFbs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsdummyFbs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dummyFbs()
        x.Init(buf, n + offset)
        return x

    # dummyFbs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dummyFbs
    def DummyByte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dummyFbs
    def DummyInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyDouble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dummyFbs
    def DummyDoublePtr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # dummyFbs
    def DummyDoublePtrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # dummyFbs
    def DummyDoublePtrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dummyFbs
    def DummyDoublePtrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def dummyFbsStart(builder): builder.StartObject(5)
def dummyFbsAddDummyByte(builder, dummyByte): builder.PrependInt8Slot(0, dummyByte, 0)
def dummyFbsAddDummyStr(builder, dummyStr): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dummyStr), 0)
def dummyFbsAddDummyInt(builder, dummyInt): builder.PrependInt32Slot(2, dummyInt, 0)
def dummyFbsAddDummyDouble(builder, dummyDouble): builder.PrependFloat64Slot(3, dummyDouble, 0.0)
def dummyFbsAddDummyDoublePtr(builder, dummyDoublePtr): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dummyDoublePtr), 0)
def dummyFbsStartDummyDoublePtrVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def dummyFbsEnd(builder): return builder.EndObject()
