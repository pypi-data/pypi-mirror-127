# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single configuration parameter of an axis transformation
class KinCfgAxsTrafoAllParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoAllParam(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoAllParam()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoAllParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Names of all axes, that are required for this axis transformation and that require an axis assignment
    # KinCfgAxsTrafoAllParam
    def AxsAssignment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinCfgAxsTrafoAllParam
    def AxsAssignmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoAllParam
    def AxsAssignmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Vector of all configuration parameters of the axis transformation
    # KinCfgAxsTrafoAllParam
    def Parameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoParam import KinCfgAxsTrafoParam
            obj = KinCfgAxsTrafoParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoAllParam
    def ParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoAllParam
    def ParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinCfgAxsTrafoAllParamStart(builder): builder.StartObject(2)
def KinCfgAxsTrafoAllParamAddAxsAssignment(builder, axsAssignment): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsAssignment), 0)
def KinCfgAxsTrafoAllParamStartAxsAssignmentVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoAllParamAddParameter(builder, parameter): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameter), 0)
def KinCfgAxsTrafoAllParamStartParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoAllParamEnd(builder): return builder.EndObject()
