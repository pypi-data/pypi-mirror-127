# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters and data of the active command
class AxsCmdValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdValues()
        x.Init(buf, n + offset)
        return x

    # AxsCmdValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position
    # AxsCmdValues
    def TargetPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # commanded target velocity (currently not supported)
    # AxsCmdValues
    def TargetVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # commanded target torque (currently not supported)
    # AxsCmdValues
    def TargetTrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dynamic limits for the motion of this command
    # AxsCmdValues
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimitsState import DynamicLimitsState
            obj = DynamicLimitsState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # command ID of the active command
    # AxsCmdValues
    def CmdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # command source (by which interface was this command inserted into the system (e.g. "PLC"))
    # AxsCmdValues
    def Src(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.CmdSource import CmdSource
            obj = CmdSource()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # unit of the commanded target position
    # AxsCmdValues
    def TargetPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the commanded target velocity (currently not supported)
    # AxsCmdValues
    def TargetVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the commanded target torque (currently not supported)
    # AxsCmdValues
    def TargetTrqUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCmdValuesStart(builder): builder.StartObject(9)
def AxsCmdValuesAddTargetPos(builder, targetPos): builder.PrependFloat64Slot(0, targetPos, 0.0)
def AxsCmdValuesAddTargetVel(builder, targetVel): builder.PrependFloat64Slot(1, targetVel, 0.0)
def AxsCmdValuesAddTargetTrq(builder, targetTrq): builder.PrependFloat64Slot(2, targetTrq, 0.0)
def AxsCmdValuesAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AxsCmdValuesAddCmdId(builder, cmdId): builder.PrependUint64Slot(4, cmdId, 0)
def AxsCmdValuesAddSrc(builder, src): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(src), 0)
def AxsCmdValuesAddTargetPosUnit(builder, targetPosUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(targetPosUnit), 0)
def AxsCmdValuesAddTargetVelUnit(builder, targetVelUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(targetVelUnit), 0)
def AxsCmdValuesAddTargetTrqUnit(builder, targetTrqUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(targetTrqUnit), 0)
def AxsCmdValuesEnd(builder): return builder.EndObject()
