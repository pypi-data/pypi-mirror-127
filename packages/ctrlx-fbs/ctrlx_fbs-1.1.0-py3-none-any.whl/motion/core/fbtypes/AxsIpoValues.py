# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently interpolated values
class AxsIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsIpoValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsIpoValues()
        x.Init(buf, n + offset)
        return x

    # AxsIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently interpolated position
    # AxsIpoValues
    def IpoPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated velocity
    # AxsIpoValues
    def IpoVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated acceleration
    # AxsIpoValues
    def IpoAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated jerk
    # AxsIpoValues
    def IpoJrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of currently interpolated position
    # AxsIpoValues
    def IpoPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of currently interpolated velocity
    # AxsIpoValues
    def IpoVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of currently interpolated acceleration
    # AxsIpoValues
    def IpoAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of currently interpolated jerk
    # AxsIpoValues
    def IpoJrkUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsIpoValuesStart(builder): builder.StartObject(8)
def AxsIpoValuesAddIpoPos(builder, ipoPos): builder.PrependFloat64Slot(0, ipoPos, 0.0)
def AxsIpoValuesAddIpoVel(builder, ipoVel): builder.PrependFloat64Slot(1, ipoVel, 0.0)
def AxsIpoValuesAddIpoAcc(builder, ipoAcc): builder.PrependFloat64Slot(2, ipoAcc, 0.0)
def AxsIpoValuesAddIpoJrk(builder, ipoJrk): builder.PrependFloat64Slot(3, ipoJrk, 0.0)
def AxsIpoValuesAddIpoPosUnit(builder, ipoPosUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ipoPosUnit), 0)
def AxsIpoValuesAddIpoVelUnit(builder, ipoVelUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ipoVelUnit), 0)
def AxsIpoValuesAddIpoAccUnit(builder, ipoAccUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ipoAccUnit), 0)
def AxsIpoValuesAddIpoJrkUnit(builder, ipoJrkUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ipoJrkUnit), 0)
def AxsIpoValuesEnd(builder): return builder.EndObject()
