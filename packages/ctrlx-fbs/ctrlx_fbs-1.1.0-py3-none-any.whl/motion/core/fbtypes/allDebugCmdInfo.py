# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# get informations of all active commands and commands that were recently executed of a single motion object
class allDebugCmdInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsallDebugCmdInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = allDebugCmdInfo()
        x.Init(buf, n + offset)
        return x

    # allDebugCmdInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all main motion commands (starting with the most recent active command)
    # allDebugCmdInfo
    def MainCmds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.debugCmdInfo import debugCmdInfo
            obj = debugCmdInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # allDebugCmdInfo
    def MainCmdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # allDebugCmdInfo
    def MainCmdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # vector of all additional active motion commands
    # allDebugCmdInfo
    def AddCmds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.debugCmdInfo import debugCmdInfo
            obj = debugCmdInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # allDebugCmdInfo
    def AddCmdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # allDebugCmdInfo
    def AddCmdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def allDebugCmdInfoStart(builder): builder.StartObject(2)
def allDebugCmdInfoAddMainCmds(builder, mainCmds): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainCmds), 0)
def allDebugCmdInfoStartMainCmdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def allDebugCmdInfoAddAddCmds(builder, addCmds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(addCmds), 0)
def allDebugCmdInfoStartAddCmdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def allDebugCmdInfoEnd(builder): return builder.EndObject()
