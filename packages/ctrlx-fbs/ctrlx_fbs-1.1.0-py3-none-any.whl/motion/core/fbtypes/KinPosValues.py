# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# position of a kinematics
class KinPosValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinPosValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinPosValues()
        x.Init(buf, n + offset)
        return x

    # KinPosValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # array of 16 positions
    # KinPosValues
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinPosValues
    def PosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinPosValues
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinPosValues
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # units of the 16 positions
    # KinPosValues
    def Units(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinPosValues
    def UnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinPosValues
    def UnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinPosValuesStart(builder): builder.StartObject(2)
def KinPosValuesAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def KinPosValuesStartPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinPosValuesAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def KinPosValuesStartUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinPosValuesEnd(builder): return builder.EndObject()
