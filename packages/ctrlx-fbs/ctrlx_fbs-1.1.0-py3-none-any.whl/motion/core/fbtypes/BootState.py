# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# return type of requests of the current boot state
class BootState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBootState(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BootState()
        x.Init(buf, n + offset)
        return x

    # BootState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # text of the boot step (can be shown in an HMI)
    # BootState
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # current boot step (starts with 0, ends with maxSteps)
    # BootState
    def ActStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # number of boot steps (when actStep == maxSteps then the booting is finished)
    # BootState
    def MaxSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def BootStateStart(builder): builder.StartObject(3)
def BootStateAddText(builder, text): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def BootStateAddActStep(builder, actStep): builder.PrependUint32Slot(1, actStep, 0)
def BootStateAddMaxSteps(builder, maxSteps): builder.PrependUint32Slot(2, maxSteps, 0)
def BootStateEnd(builder): return builder.EndObject()
