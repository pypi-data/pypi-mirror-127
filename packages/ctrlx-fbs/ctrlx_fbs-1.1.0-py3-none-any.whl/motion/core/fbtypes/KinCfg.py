# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# complete configuration of a single kinematics
class KinCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfg(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfg()
        x.Init(buf, n + offset)
        return x

    # KinCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # object type (must be "Kinematics"), required for save/load
    # KinCfg
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # all configured limits of this kinematics
    # KinCfg
    def Limits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgLimits import KinCfgLimits
            obj = KinCfgLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # data of all axes, that can be added to this kinematics
    # KinCfg
    def AxsCfg(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxs import KinCfgAxs
            obj = KinCfgAxs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfg
    def AxsCfgLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfg
    def AxsCfgIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # configuration of all axis transformations (ACS <--> MCS)
    # KinCfg
    def Mcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgAxsTrafoAllSets import KinCfgAxsTrafoAllSets
            obj = KinCfgAxsTrafoAllSets()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # general unit configuration of this kinematics
    # KinCfg
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.UnitCfgKin import UnitCfgKin
            obj = UnitCfgKin()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # preparation limits of a kinematics
    # KinCfg
    def PrepLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgPrepLimits import KinCfgPrepLimits
            obj = KinCfgPrepLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgStart(builder): builder.StartObject(6)
def KinCfgAddObjectType(builder, objectType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectType), 0)
def KinCfgAddLimits(builder, limits): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limits), 0)
def KinCfgAddAxsCfg(builder, axsCfg): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(axsCfg), 0)
def KinCfgStartAxsCfgVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAddMcs(builder, mcs): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mcs), 0)
def KinCfgAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def KinCfgAddPrepLimits(builder, prepLimits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(prepLimits), 0)
def KinCfgEnd(builder): return builder.EndObject()
