# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently interpolated values
class KinIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinIpoValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinIpoValues()
        x.Init(buf, n + offset)
        return x

    # KinIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently interpolated position
    # KinIpoValues
    def IpoPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinIpoValues
    def IpoPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinIpoValues
    def IpoPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinIpoValues
    def IpoPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # currently interpolated velocity
    # KinIpoValues
    def IpoVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated acceleration
    # KinIpoValues
    def IpoAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated jerk
    # KinIpoValues
    def IpoJrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # units of the currently interpolated position
    # KinIpoValues
    def IpoPosUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinIpoValues
    def IpoPosUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinIpoValues
    def IpoPosUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # unit of the currently interpolated velocity
    # KinIpoValues
    def IpoVelUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the currently interpolated acceleration
    # KinIpoValues
    def IpoAccUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the currently interpolated jerk
    # KinIpoValues
    def IpoJrkUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinIpoValuesStart(builder): builder.StartObject(8)
def KinIpoValuesAddIpoPos(builder, ipoPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ipoPos), 0)
def KinIpoValuesStartIpoPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinIpoValuesAddIpoVel(builder, ipoVel): builder.PrependFloat64Slot(1, ipoVel, 0.0)
def KinIpoValuesAddIpoAcc(builder, ipoAcc): builder.PrependFloat64Slot(2, ipoAcc, 0.0)
def KinIpoValuesAddIpoJrk(builder, ipoJrk): builder.PrependFloat64Slot(3, ipoJrk, 0.0)
def KinIpoValuesAddIpoPosUnits(builder, ipoPosUnits): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ipoPosUnits), 0)
def KinIpoValuesStartIpoPosUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinIpoValuesAddIpoVelUnits(builder, ipoVelUnits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ipoVelUnits), 0)
def KinIpoValuesAddIpoAccUnits(builder, ipoAccUnits): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ipoAccUnits), 0)
def KinIpoValuesAddIpoJrkUnits(builder, ipoJrkUnits): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ipoJrkUnits), 0)
def KinIpoValuesEnd(builder): return builder.EndObject()
