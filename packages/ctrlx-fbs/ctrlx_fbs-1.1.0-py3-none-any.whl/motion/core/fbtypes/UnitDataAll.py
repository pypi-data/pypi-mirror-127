# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Data of all supported units
class UnitDataAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUnitDataAll(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitDataAll()
        x.Init(buf, n + offset)
        return x

    # UnitDataAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all supported units
    # UnitDataAll
    def Supported(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.UnitDataSingle import UnitDataSingle
            obj = UnitDataSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnitDataAll
    def SupportedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnitDataAll
    def SupportedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def UnitDataAllStart(builder): builder.StartObject(1)
def UnitDataAllAddSupported(builder, supported): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(supported), 0)
def UnitDataAllStartSupportedVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def UnitDataAllEnd(builder): return builder.EndObject()
