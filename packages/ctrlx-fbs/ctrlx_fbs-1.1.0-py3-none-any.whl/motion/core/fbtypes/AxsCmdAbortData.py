# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis abort command
class AxsCmdAbortData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdAbortData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdAbortData()
        x.Init(buf, n + offset)
        return x

    # AxsCmdAbortData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded deceleration limit (must be a positive value)
    # AxsCmdAbortData
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # commanded deceleration jerk limit (must be a positive value OR zero), zero means "not jerk limited"
    # AxsCmdAbortData
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCmdAbortDataStart(builder): builder.StartObject(2)
def AxsCmdAbortDataAddDec(builder, dec): builder.PrependFloat64Slot(0, dec, 0.0)
def AxsCmdAbortDataAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(1, jrkDec, 0.0)
def AxsCmdAbortDataEnd(builder): return builder.EndObject()
