# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# set of dynamic limits (for reading them in states)
class DynamicLimitsState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDynamicLimitsState(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicLimitsState()
        x.Init(buf, n + offset)
        return x

    # DynamicLimitsState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # velocity limit (must be greater than zero)
    # DynamicLimitsState
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # acceleration limit (must be greater than zero)
    # DynamicLimitsState
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # deceleration limit (must be greater than zero)
    # DynamicLimitsState
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # acceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimitsState
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimitsState
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the velocity limit
    # DynamicLimitsState
    def VelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the acceleration limit
    # DynamicLimitsState
    def AccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the deceleration limit
    # DynamicLimitsState
    def DecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the acceleration jerk limit
    # DynamicLimitsState
    def JrkAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the deceleration jerk limit
    # DynamicLimitsState
    def JrkDecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DynamicLimitsStateStart(builder): builder.StartObject(10)
def DynamicLimitsStateAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def DynamicLimitsStateAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 0.0)
def DynamicLimitsStateAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def DynamicLimitsStateAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def DynamicLimitsStateAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def DynamicLimitsStateAddVelUnit(builder, velUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(velUnit), 0)
def DynamicLimitsStateAddAccUnit(builder, accUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(accUnit), 0)
def DynamicLimitsStateAddDecUnit(builder, decUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decUnit), 0)
def DynamicLimitsStateAddJrkAccUnit(builder, jrkAccUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(jrkAccUnit), 0)
def DynamicLimitsStateAddJrkDecUnit(builder, jrkDecUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(jrkDecUnit), 0)
def DynamicLimitsStateEnd(builder): return builder.EndObject()
