# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the product coordinate system of this kinematics
class SysCfgPcsAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCfgPcsAll(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgPcsAll()
        x.Init(buf, n + offset)
        return x

    # SysCfgPcsAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured PCS sets
    # SysCfgPcsAll
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgPcsSet import SysCfgPcsSet
            obj = SysCfgPcsSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgPcsAll
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsAll
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # vector of all configured PCS groups
    # SysCfgPcsAll
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgPcsGroup import SysCfgPcsGroup
            obj = SysCfgPcsGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgPcsAll
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsAll
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SysCfgPcsAllStart(builder): builder.StartObject(2)
def SysCfgPcsAllAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def SysCfgPcsAllStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgPcsAllAddGroups(builder, groups): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)
def SysCfgPcsAllStartGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgPcsAllEnd(builder): return builder.EndObject()
