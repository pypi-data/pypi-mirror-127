# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# internal system configuration items
class SysCfgInternal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCfgInternal(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgInternal()
        x.Init(buf, n + offset)
        return x

    # SysCfgInternal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # save the internal system configuration items also, when saving the system config to file?
    # SysCfgInternal
    def Save(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # use the new ipo IVAJ?
    # SysCfgInternal
    def UseIpoIVAJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # enable time measurement?
    # SysCfgInternal
    def TimeMeasurement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SysCfgInternalStart(builder): builder.StartObject(3)
def SysCfgInternalAddSave(builder, save): builder.PrependBoolSlot(0, save, 0)
def SysCfgInternalAddUseIpoIVAJ(builder, useIpoIVAJ): builder.PrependBoolSlot(1, useIpoIVAJ, 0)
def SysCfgInternalAddTimeMeasurement(builder, timeMeasurement): builder.PrependBoolSlot(2, timeMeasurement, 0)
def SysCfgInternalEnd(builder): return builder.EndObject()
