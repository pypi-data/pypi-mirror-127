# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis command add-to-gantry
class AxsCmdAddToGantryData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdAddToGantryData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdAddToGantryData()
        x.Init(buf, n + offset)
        return x

    # AxsCmdAddToGantryData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the gantry master axis
    # AxsCmdAddToGantryData
    def MasterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # should this be a buffered command?
    # AxsCmdAddToGantryData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCmdAddToGantryDataStart(builder): builder.StartObject(2)
def AxsCmdAddToGantryDataAddMasterName(builder, masterName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(masterName), 0)
def AxsCmdAddToGantryDataAddBuffered(builder, buffered): builder.PrependBoolSlot(1, buffered, 0)
def AxsCmdAddToGantryDataEnd(builder): return builder.EndObject()
