# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis position commands
class AxsCmdPosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdPosData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdPosData()
        x.Init(buf, n + offset)
        return x

    # AxsCmdPosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position (or increment for relative position command)
    # AxsCmdPosData
    def AxsPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # should this be a buffered command?
    # AxsCmdPosData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # dynamic limits for the motion of this command
    # AxsCmdPosData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdPosDataStart(builder): builder.StartObject(3)
def AxsCmdPosDataAddAxsPos(builder, axsPos): builder.PrependFloat64Slot(0, axsPos, 0.0)
def AxsCmdPosDataAddBuffered(builder, buffered): builder.PrependBoolSlot(1, buffered, 0)
def AxsCmdPosDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AxsCmdPosDataEnd(builder): return builder.EndObject()
