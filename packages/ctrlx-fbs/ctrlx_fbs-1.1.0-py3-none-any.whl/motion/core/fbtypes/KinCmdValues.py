# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters and data of the active command
class KinCmdValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdValues()
        x.Init(buf, n + offset)
        return x

    # KinCmdValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position as vector
    # KinCmdValues
    def TargetPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdValues
    def TargetPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdValues
    def TargetPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdValues
    def TargetPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # dynamic limits for the motion of this command
    # KinCmdValues
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimitsState import DynamicLimitsState
            obj = DynamicLimitsState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # coordinate system of the target position
    # KinCmdValues
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # command ID of the active command
    # KinCmdValues
    def CmdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # command source (by which interface was this command inserted into the system (e.g. "PLC"))
    # KinCmdValues
    def Src(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.CmdSource import CmdSource
            obj = CmdSource()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdValuesStart(builder): builder.StartObject(5)
def KinCmdValuesAddTargetPos(builder, targetPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(targetPos), 0)
def KinCmdValuesStartTargetPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinCmdValuesAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def KinCmdValuesAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def KinCmdValuesAddCmdId(builder, cmdId): builder.PrependUint64Slot(3, cmdId, 0)
def KinCmdValuesAddSrc(builder, src): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(src), 0)
def KinCmdValuesEnd(builder): return builder.EndObject()
