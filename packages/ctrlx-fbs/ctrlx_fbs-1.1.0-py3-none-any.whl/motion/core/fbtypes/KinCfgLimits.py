# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# all configured limits of this kinematics
class KinCfgLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgLimits(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgLimits()
        x.Init(buf, n + offset)
        return x

    # KinCfgLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # path velocity limit (should be greater than zero)
    # KinCfgLimits
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # path acceleration limit (should be greater than zero)
    # KinCfgLimits
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # path deceleration limit (should be greater than zero)
    # KinCfgLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # path acceleration jerk limit (should be greater than zero OR zero for not jerk limited motion)
    # KinCfgLimits
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # path deceleration jerk limit (should be greater than zero OR zero for not jerk limited motion)
    # KinCfgLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of vel
    # KinCfgLimits
    def VelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of acc
    # KinCfgLimits
    def AccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of dec
    # KinCfgLimits
    def DecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkAcc
    # KinCfgLimits
    def JrkAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkDec
    # KinCfgLimits
    def JrkDecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCfgLimitsStart(builder): builder.StartObject(10)
def KinCfgLimitsAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def KinCfgLimitsAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 0.0)
def KinCfgLimitsAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def KinCfgLimitsAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def KinCfgLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def KinCfgLimitsAddVelUnit(builder, velUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(velUnit), 0)
def KinCfgLimitsAddAccUnit(builder, accUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(accUnit), 0)
def KinCfgLimitsAddDecUnit(builder, decUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decUnit), 0)
def KinCfgLimitsAddJrkAccUnit(builder, jrkAccUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(jrkAccUnit), 0)
def KinCfgLimitsAddJrkDecUnit(builder, jrkDecUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(jrkDecUnit), 0)
def KinCfgLimitsEnd(builder): return builder.EndObject()
