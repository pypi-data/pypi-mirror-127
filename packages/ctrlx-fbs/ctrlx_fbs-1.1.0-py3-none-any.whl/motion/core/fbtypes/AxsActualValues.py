# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# actual values from the drives
class AxsActualValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsActualValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsActualValues()
        x.Init(buf, n + offset)
        return x

    # AxsActualValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # actual drive position
    # AxsActualValues
    def ActualPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual drive velocity (currently not supported for real drives)
    # AxsActualValues
    def ActualVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual drive acceleration (currently not supported for real drives)
    # AxsActualValues
    def ActualAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual drive torque (currently not supported for real drives)
    # AxsActualValues
    def ActualTorque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual distance left to the commanded target (currently not supported for real drives)
    # AxsActualValues
    def DistLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the actual drive position
    # AxsActualValues
    def ActualPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual drive velocity (currently not supported for real drives)
    # AxsActualValues
    def ActualVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual drive acceleration (currently not supported for real drives)
    # AxsActualValues
    def ActualAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual drive torque (currently not supported for real drives)
    # AxsActualValues
    def ActualTorqueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual distance left to the commanded target (currently not supported for real drives)
    # AxsActualValues
    def DistLeftUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsActualValuesStart(builder): builder.StartObject(10)
def AxsActualValuesAddActualPos(builder, actualPos): builder.PrependFloat64Slot(0, actualPos, 0.0)
def AxsActualValuesAddActualVel(builder, actualVel): builder.PrependFloat64Slot(1, actualVel, 0.0)
def AxsActualValuesAddActualAcc(builder, actualAcc): builder.PrependFloat64Slot(2, actualAcc, 0.0)
def AxsActualValuesAddActualTorque(builder, actualTorque): builder.PrependFloat64Slot(3, actualTorque, 0.0)
def AxsActualValuesAddDistLeft(builder, distLeft): builder.PrependFloat64Slot(4, distLeft, 0.0)
def AxsActualValuesAddActualPosUnit(builder, actualPosUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actualPosUnit), 0)
def AxsActualValuesAddActualVelUnit(builder, actualVelUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actualVelUnit), 0)
def AxsActualValuesAddActualAccUnit(builder, actualAccUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actualAccUnit), 0)
def AxsActualValuesAddActualTorqueUnit(builder, actualTorqueUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(actualTorqueUnit), 0)
def AxsActualValuesAddDistLeftUnit(builder, distLeftUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(distLeftUnit), 0)
def AxsActualValuesEnd(builder): return builder.EndObject()
