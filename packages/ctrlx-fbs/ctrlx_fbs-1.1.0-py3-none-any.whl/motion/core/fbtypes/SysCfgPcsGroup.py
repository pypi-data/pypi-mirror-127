# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single group of sets for a product coordinate system
class SysCfgPcsGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCfgPcsGroup(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgPcsGroup()
        x.Init(buf, n + offset)
        return x

    # SysCfgPcsGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the group (required for load/save)
    # SysCfgPcsGroup
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # vector of PCS sets in this group (sequence matters!)
    # SysCfgPcsGroup
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsGroup
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsGroup
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SysCfgPcsGroupStart(builder): builder.StartObject(2)
def SysCfgPcsGroupAddGroupName(builder, groupName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)
def SysCfgPcsGroupAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def SysCfgPcsGroupStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgPcsGroupEnd(builder): return builder.EndObject()
