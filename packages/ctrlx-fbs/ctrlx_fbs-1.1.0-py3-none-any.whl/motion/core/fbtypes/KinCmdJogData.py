# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the jog commands for a kinematics
class KinCmdJogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdJogData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdJogData()
        x.Init(buf, n + offset)
        return x

    # KinCmdJogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # jog direction as a vector
    # KinCmdJogData
    def JogDir(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdJogData
    def JogDirAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdJogData
    def JogDirLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdJogData
    def JogDirIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordSys for jog direction vector
    # KinCmdJogData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # jog increment (must be zero for continuous jogging, must be a positive value for incremantal jogging)
    # KinCmdJogData
    def JogIncrement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dynamic limits for the motion of this command
    # KinCmdJogData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdJogDataStart(builder): builder.StartObject(4)
def KinCmdJogDataAddJogDir(builder, jogDir): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jogDir), 0)
def KinCmdJogDataStartJogDirVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinCmdJogDataAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def KinCmdJogDataAddJogIncrement(builder, jogIncrement): builder.PrependFloat64Slot(2, jogIncrement, 0.0)
def KinCmdJogDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def KinCmdJogDataEnd(builder): return builder.EndObject()
