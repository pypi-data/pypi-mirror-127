# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently interpolated values
class IpoAddData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIpoAddData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IpoAddData()
        x.Init(buf, n + offset)
        return x

    # IpoAddData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # distance from start position
    # IpoAddData
    def DistFromStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # distance to target position
    # IpoAddData
    def DistToTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # time from start position
    # IpoAddData
    def TimeFromStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # time to target position
    # IpoAddData
    def TimeToTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the distance from start position
    # IpoAddData
    def DistFromStartUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the distance to target position
    # IpoAddData
    def DistToTargetUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the time from start position
    # IpoAddData
    def TimeFromStartUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the time to target position
    # IpoAddData
    def TimeToTargetUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IpoAddDataStart(builder): builder.StartObject(8)
def IpoAddDataAddDistFromStart(builder, distFromStart): builder.PrependFloat64Slot(0, distFromStart, 0.0)
def IpoAddDataAddDistToTarget(builder, distToTarget): builder.PrependFloat64Slot(1, distToTarget, 0.0)
def IpoAddDataAddTimeFromStart(builder, timeFromStart): builder.PrependFloat64Slot(2, timeFromStart, 0.0)
def IpoAddDataAddTimeToTarget(builder, timeToTarget): builder.PrependFloat64Slot(3, timeToTarget, 0.0)
def IpoAddDataAddDistFromStartUnit(builder, distFromStartUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(distFromStartUnit), 0)
def IpoAddDataAddDistToTargetUnit(builder, distToTargetUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(distToTargetUnit), 0)
def IpoAddDataAddTimeFromStartUnit(builder, timeFromStartUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(timeFromStartUnit), 0)
def IpoAddDataAddTimeToTargetUnit(builder, timeToTargetUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(timeToTargetUnit), 0)
def IpoAddDataEnd(builder): return builder.EndObject()
