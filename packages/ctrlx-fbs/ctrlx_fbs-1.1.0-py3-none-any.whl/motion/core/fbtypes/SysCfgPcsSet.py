# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single set for the product coordiate system of a kinematics
class SysCfgPcsSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCfgPcsSet(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgPcsSet()
        x.Init(buf, n + offset)
        return x

    # SysCfgPcsSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the set (required for load/save)
    # SysCfgPcsSet
    def SetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # XYZ offsets (must be exactly three values)
    # SysCfgPcsSet
    def OffsetXYZ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgPcsSet
    def OffsetXYZAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgPcsSet
    def OffsetXYZLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetXYZIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
    # SysCfgPcsSet
    def Orientation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgPcsSet
    def OrientationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgPcsSet
    def OrientationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OrientationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # offsets for auxilary axes (must be exactly 10 values)
    # SysCfgPcsSet
    def OffsetAux(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgPcsSet
    def OffsetAuxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgPcsSet
    def OffsetAuxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetAuxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # is this set relative to an other pcs set?
    # SysCfgPcsSet
    def RelativeToPCS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Units for XYZ offsets (must be exactly three values)
    # SysCfgPcsSet
    def OffsetXYZUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsSet
    def OffsetXYZUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetXYZUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Units for rotation offsets (must be exactly three values)
    # SysCfgPcsSet
    def OrientationUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsSet
    def OrientationUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OrientationUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Units for offsets for auxilary axes (must be exactly 10 values)
    # SysCfgPcsSet
    def OffsetAuxUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsSet
    def OffsetAuxUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetAuxUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def SysCfgPcsSetStart(builder): builder.StartObject(8)
def SysCfgPcsSetAddSetName(builder, setName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(setName), 0)
def SysCfgPcsSetAddOffsetXYZ(builder, offsetXYZ): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(offsetXYZ), 0)
def SysCfgPcsSetStartOffsetXYZVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SysCfgPcsSetAddOrientation(builder, orientation): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)
def SysCfgPcsSetStartOrientationVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SysCfgPcsSetAddOffsetAux(builder, offsetAux): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(offsetAux), 0)
def SysCfgPcsSetStartOffsetAuxVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SysCfgPcsSetAddRelativeToPCS(builder, relativeToPCS): builder.PrependBoolSlot(4, relativeToPCS, 0)
def SysCfgPcsSetAddOffsetXYZUnits(builder, offsetXYZUnits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(offsetXYZUnits), 0)
def SysCfgPcsSetStartOffsetXYZUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgPcsSetAddOrientationUnits(builder, orientationUnits): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(orientationUnits), 0)
def SysCfgPcsSetStartOrientationUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgPcsSetAddOffsetAuxUnits(builder, offsetAuxUnits): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(offsetAuxUnits), 0)
def SysCfgPcsSetStartOffsetAuxUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgPcsSetEnd(builder): return builder.EndObject()
