# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the limits in a single dimension of the box of a single safe area
class SysCfgSafeAreaBox(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCfgSafeAreaBox(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgSafeAreaBox()
        x.Init(buf, n + offset)
        return x

    # SysCfgSafeAreaBox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # minimum limit in this dimension of the box
    # SysCfgSafeAreaBox
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # maximum limit in this dimension of the box
    # SysCfgSafeAreaBox
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of min and max as configured
    # SysCfgSafeAreaBox
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # should this dimension being checked?
    # SysCfgSafeAreaBox
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SysCfgSafeAreaBoxStart(builder): builder.StartObject(4)
def SysCfgSafeAreaBoxAddMin(builder, min): builder.PrependFloat64Slot(0, min, 0.0)
def SysCfgSafeAreaBoxAddMax(builder, max): builder.PrependFloat64Slot(1, max, 0.0)
def SysCfgSafeAreaBoxAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def SysCfgSafeAreaBoxAddActive(builder, active): builder.PrependBoolSlot(3, active, 0)
def SysCfgSafeAreaBoxEnd(builder): return builder.EndObject()
