# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# get informations of a single active command
class actCmdJobObjects(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsactCmdJobObjects(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = actCmdJobObjects()
        x.Init(buf, n + offset)
        return x

    # actCmdJobObjects
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command type name (e.g. PosAbs)
    # actCmdJobObjects
    def CmdName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # array of the strings of the jobObjects (including parameters)
    # actCmdJobObjects
    def JobObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # actCmdJobObjects
    def JobObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # actCmdJobObjects
    def JobObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def actCmdJobObjectsStart(builder): builder.StartObject(2)
def actCmdJobObjectsAddCmdName(builder, cmdName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmdName), 0)
def actCmdJobObjectsAddJobObjects(builder, jobObjects): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(jobObjects), 0)
def actCmdJobObjectsStartJobObjectsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def actCmdJobObjectsEnd(builder): return builder.EndObject()
