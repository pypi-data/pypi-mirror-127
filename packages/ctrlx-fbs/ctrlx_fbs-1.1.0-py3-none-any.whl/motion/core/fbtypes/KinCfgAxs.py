# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of an axis that can be added to a kinematics
class KinCfgAxs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxs()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the axis
    # KinCfgAxs
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # (geometric) meaning of the axis in the kinematics when added
    # KinCfgAxs
    def AxsMeaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # direction ("+" or "-") of the axis referring to the kinematics coordinate system
    # KinCfgAxs
    def AxsDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCfgAxsStart(builder): builder.StartObject(3)
def KinCfgAxsAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def KinCfgAxsAddAxsMeaning(builder, axsMeaning): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(axsMeaning), 0)
def KinCfgAxsAddAxsDir(builder, axsDir): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(axsDir), 0)
def KinCfgAxsEnd(builder): return builder.EndObject()
