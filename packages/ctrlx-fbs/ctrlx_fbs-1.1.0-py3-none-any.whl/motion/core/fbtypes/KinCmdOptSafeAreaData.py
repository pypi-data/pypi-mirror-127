# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option SafeArea (monitoring of safe zones and work areas) for kinematics
class KinCmdOptSafeAreaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdOptSafeAreaData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptSafeAreaData()
        x.Init(buf, n + offset)
        return x

    # KinCmdOptSafeAreaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # KinCmdOptSafeAreaData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the safe zone or work area that should become active/disabled as set in the configuration
    # KinCmdOptSafeAreaData
    def SafeArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCmdOptSafeAreaDataStart(builder): builder.StartObject(2)
def KinCmdOptSafeAreaDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def KinCmdOptSafeAreaDataAddSafeArea(builder, safeArea): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(safeArea), 0)
def KinCmdOptSafeAreaDataEnd(builder): return builder.EndObject()
