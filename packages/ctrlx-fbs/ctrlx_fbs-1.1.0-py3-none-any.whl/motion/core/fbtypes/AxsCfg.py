# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# complete configuration of a single axis
class AxsCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCfg(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfg()
        x.Init(buf, n + offset)
        return x

    # AxsCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # object type (must be "Axis"), required for save/load
    # AxsCfg
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the assigned axis profile or empty for virtual drives
    # AxsCfg
    def AxisProfileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # all configured limits of this axis
    # AxsCfg
    def Limits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgLimits import AxsCfgLimits
            obj = AxsCfgLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration for specific functions of this axis
    # AxsCfg
    def Functions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgFunctions import AxsCfgFunctions
            obj = AxsCfgFunctions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # common axis properties of this axis
    # AxsCfg
    def Properties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgProperties import AxsCfgProperties
            obj = AxsCfgProperties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # general unit configuration of this axis
    # AxsCfg
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.UnitCfgObj import UnitCfgObj
            obj = UnitCfgObj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # kinematic properties for axes
    # AxsCfg
    def KinProperties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgKinProperties import AxsCfgKinProperties
            obj = AxsCfgKinProperties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgStart(builder): builder.StartObject(7)
def AxsCfgAddObjectType(builder, objectType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectType), 0)
def AxsCfgAddAxisProfileName(builder, axisProfileName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(axisProfileName), 0)
def AxsCfgAddLimits(builder, limits): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(limits), 0)
def AxsCfgAddFunctions(builder, functions): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(functions), 0)
def AxsCfgAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def AxsCfgAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def AxsCfgAddKinProperties(builder, kinProperties): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(kinProperties), 0)
def AxsCfgEnd(builder): return builder.EndObject()
