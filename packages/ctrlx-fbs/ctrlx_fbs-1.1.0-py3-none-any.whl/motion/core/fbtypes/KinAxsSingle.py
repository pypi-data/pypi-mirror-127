# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# informations of an axis that is part of a kinematics
class KinAxsSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinAxsSingle(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinAxsSingle()
        x.Init(buf, n + offset)
        return x

    # KinAxsSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # (geometric) meaning of the axis in the kinematics 
    # KinAxsSingle
    def Meaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the axis
    # KinAxsSingle
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # direction ("+" or "-") of the axis referring to the kinematics coordinate system
    # KinAxsSingle
    def Dir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinAxsSingleStart(builder): builder.StartObject(3)
def KinAxsSingleAddMeaning(builder, meaning): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(meaning), 0)
def KinAxsSingleAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def KinAxsSingleAddDir(builder, dir): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dir), 0)
def KinAxsSingleEnd(builder): return builder.EndObject()
