# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of all registered axis transformations
class KinCfgAxsTrafoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoData()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # data of all registered axis transformations
    # KinCfgAxsTrafoData
    def AxsTrafoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoDataSingle import KinCfgAxsTrafoDataSingle
            obj = KinCfgAxsTrafoDataSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoData
    def AxsTrafoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoData
    def AxsTrafoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgAxsTrafoDataStart(builder): builder.StartObject(1)
def KinCfgAxsTrafoDataAddAxsTrafoData(builder, axsTrafoData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsTrafoData), 0)
def KinCfgAxsTrafoDataStartAxsTrafoDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoDataEnd(builder): return builder.EndObject()
