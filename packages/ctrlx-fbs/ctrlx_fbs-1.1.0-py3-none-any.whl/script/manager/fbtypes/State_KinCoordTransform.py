# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_KinCoordTransform(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsState_KinCoordTransform(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_KinCoordTransform()
        x.Init(buf, n + offset)
        return x

    # State_KinCoordTransform
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_KinCoordTransform
    def ObjName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_KinCoordTransform
    def PosIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # State_KinCoordTransform
    def PosInAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # State_KinCoordTransform
    def PosInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State_KinCoordTransform
    def PosInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # State_KinCoordTransform
    def CoordSysIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_KinCoordTransform
    def CoordSysOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def State_KinCoordTransformStart(builder): builder.StartObject(4)
def State_KinCoordTransformAddObjName(builder, objName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objName), 0)
def State_KinCoordTransformAddPosIn(builder, posIn): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(posIn), 0)
def State_KinCoordTransformStartPosInVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def State_KinCoordTransformAddCoordSysIn(builder, coordSysIn): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSysIn), 0)
def State_KinCoordTransformAddCoordSysOut(builder, coordSysOut): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(coordSysOut), 0)
def State_KinCoordTransformEnd(builder): return builder.EndObject()
