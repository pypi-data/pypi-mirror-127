# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DL_Write(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDL_Write(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DL_Write()
        x.Init(buf, n + offset)
        return x

    # DL_Write
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DL_Write
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DL_Write
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DL_Write
    def S(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DL_Write
    def I(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DL_Write
    def B(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DL_Write
    def D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DL_WriteStart(builder): builder.StartObject(6)
def DL_WriteAddPath(builder, path): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def DL_WriteAddType(builder, type): builder.PrependInt32Slot(1, type, 0)
def DL_WriteAddS(builder, s): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(s), 0)
def DL_WriteAddI(builder, i): builder.PrependInt64Slot(3, i, 0)
def DL_WriteAddB(builder, b): builder.PrependBoolSlot(4, b, 0)
def DL_WriteAddD(builder, d): builder.PrependFloat64Slot(5, d, 0.0)
def DL_WriteEnd(builder): return builder.EndObject()
