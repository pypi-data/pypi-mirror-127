# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_KinIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsState_KinIpoValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_KinIpoValues()
        x.Init(buf, n + offset)
        return x

    # State_KinIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_KinIpoValues
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # State_KinIpoValues
    def PosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # State_KinIpoValues
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State_KinIpoValues
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # State_KinIpoValues
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_KinIpoValues
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_KinIpoValues
    def Jrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def State_KinIpoValuesStart(builder): builder.StartObject(4)
def State_KinIpoValuesAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def State_KinIpoValuesStartPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def State_KinIpoValuesAddVel(builder, vel): builder.PrependFloat64Slot(1, vel, 0.0)
def State_KinIpoValuesAddAcc(builder, acc): builder.PrependFloat64Slot(2, acc, 0.0)
def State_KinIpoValuesAddJrk(builder, jrk): builder.PrependFloat64Slot(3, jrk, 0.0)
def State_KinIpoValuesEnd(builder): return builder.EndObject()
