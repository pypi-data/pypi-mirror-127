# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_AxsIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsState_AxsIpoValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsIpoValues()
        x.Init(buf, n + offset)
        return x

    # State_AxsIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsIpoValues
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsIpoValues
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsIpoValues
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsIpoValues
    def Jrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def State_AxsIpoValuesStart(builder): builder.StartObject(4)
def State_AxsIpoValuesAddPos(builder, pos): builder.PrependFloat64Slot(0, pos, 0.0)
def State_AxsIpoValuesAddVel(builder, vel): builder.PrependFloat64Slot(1, vel, 0.0)
def State_AxsIpoValuesAddAcc(builder, acc): builder.PrependFloat64Slot(2, acc, 0.0)
def State_AxsIpoValuesAddJrk(builder, jrk): builder.PrependFloat64Slot(3, jrk, 0.0)
def State_AxsIpoValuesEnd(builder): return builder.EndObject()
