# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Resp_Error(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsResp_Error(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Resp_Error()
        x.Init(buf, n + offset)
        return x

    # Resp_Error
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Resp_Error
    def MainCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Resp_Error
    def DetailCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Resp_Error
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Resp_Error
    def Trace(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Resp_Error
    def TraceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Resp_Error
    def TraceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Resp_ErrorStart(builder): builder.StartObject(4)
def Resp_ErrorAddMainCode(builder, mainCode): builder.PrependUint32Slot(0, mainCode, 0)
def Resp_ErrorAddDetailCode(builder, detailCode): builder.PrependUint32Slot(1, detailCode, 0)
def Resp_ErrorAddText(builder, text): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def Resp_ErrorAddTrace(builder, trace): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(trace), 0)
def Resp_ErrorStartTraceVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def Resp_ErrorEnd(builder): return builder.EndObject()
