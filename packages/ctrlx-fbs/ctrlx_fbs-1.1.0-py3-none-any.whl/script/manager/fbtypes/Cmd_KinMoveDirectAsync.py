# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinMoveDirectAsync(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCmd_KinMoveDirectAsync(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinMoveDirectAsync()
        x.Init(buf, n + offset)
        return x

    # Cmd_KinMoveDirectAsync
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinMoveDirectAsync
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinMoveDirectAsync
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Cmd_KinMoveDirectAsync
    def PosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # Cmd_KinMoveDirectAsync
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_KinMoveDirectAsync
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Cmd_KinMoveDirectAsync
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cmd_KinMoveDirectAsync
    def DynLimFactors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinMoveDirectAsync
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def Cmd_KinMoveDirectAsyncStart(builder): builder.StartObject(5)
def Cmd_KinMoveDirectAsyncAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def Cmd_KinMoveDirectAsyncAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def Cmd_KinMoveDirectAsyncStartPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def Cmd_KinMoveDirectAsyncAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def Cmd_KinMoveDirectAsyncAddDynLimFactors(builder, dynLimFactors): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dynLimFactors), 0)
def Cmd_KinMoveDirectAsyncAddBuffered(builder, buffered): builder.PrependBoolSlot(4, buffered, 1)
def Cmd_KinMoveDirectAsyncEnd(builder): return builder.EndObject()
