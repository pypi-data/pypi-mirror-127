# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_DynLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCmd_DynLimits(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_DynLimits()
        x.Init(buf, n + offset)
        return x

    # Cmd_DynLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_DynLimits
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Cmd_DynLimitsStart(builder): builder.StartObject(5)
def Cmd_DynLimitsAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def Cmd_DynLimitsAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 0.0)
def Cmd_DynLimitsAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def Cmd_DynLimitsAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def Cmd_DynLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def Cmd_DynLimitsEnd(builder): return builder.EndObject()
