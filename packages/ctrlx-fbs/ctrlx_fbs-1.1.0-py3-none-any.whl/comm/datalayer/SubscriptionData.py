# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscriptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubscriptionData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscriptionData()
        x.Init(buf, n + offset)
        return x

    # SubscriptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubscriptionData
    def Properties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.SubscriptionProperties import SubscriptionProperties
            obj = SubscriptionProperties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SubscriptionData
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SubscriptionData
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SubscriptionData
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SubscriptionDataStart(builder): builder.StartObject(2)
def SubscriptionDataAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def SubscriptionDataAddNodes(builder, nodes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)
def SubscriptionDataStartNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SubscriptionDataEnd(builder): return builder.EndObject()
