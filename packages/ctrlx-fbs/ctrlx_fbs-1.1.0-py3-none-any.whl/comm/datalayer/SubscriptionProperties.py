# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscriptionProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubscriptionProperties(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscriptionProperties()
        x.Init(buf, n + offset)
        return x

    # SubscriptionProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubscriptionProperties
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SubscriptionProperties
    def KeepaliveInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 60000

    # SubscriptionProperties
    def PublishInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1000

    # SubscriptionProperties
    def Rules(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SubscriptionProperties
    def RulesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SubscriptionProperties
    def RulesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # SubscriptionProperties
    def ErrorInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

def SubscriptionPropertiesStart(builder): builder.StartObject(5)
def SubscriptionPropertiesAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def SubscriptionPropertiesAddKeepaliveInterval(builder, keepaliveInterval): builder.PrependUint32Slot(1, keepaliveInterval, 60000)
def SubscriptionPropertiesAddPublishInterval(builder, publishInterval): builder.PrependUint32Slot(2, publishInterval, 1000)
def SubscriptionPropertiesAddRules(builder, rules): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rules), 0)
def SubscriptionPropertiesStartRulesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SubscriptionPropertiesAddErrorInterval(builder, errorInterval): builder.PrependUint32Slot(4, errorInterval, 10000)
def SubscriptionPropertiesEnd(builder): return builder.EndObject()
