# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Claim(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsClaim(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Claim()
        x.Init(buf, n + offset)
        return x

    # Claim
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Claim
    def Claim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Claim
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ClaimStart(builder): builder.StartObject(2)
def ClaimAddClaim(builder, claim): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(claim), 0)
def ClaimAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def ClaimEnd(builder): return builder.EndObject()
