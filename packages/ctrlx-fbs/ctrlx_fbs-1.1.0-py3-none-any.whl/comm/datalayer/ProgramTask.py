# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProgramTask(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProgramTask(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProgramTask()
        x.Init(buf, n + offset)
        return x

    # ProgramTask
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProgramTask
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProgramTask
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ProgramTask
    def Progress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ProgramTask
    def Result(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Diagnosis import Diagnosis
            obj = Diagnosis()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ProgramTaskStart(builder): builder.StartObject(4)
def ProgramTaskAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def ProgramTaskAddState(builder, state): builder.PrependInt8Slot(1, state, 0)
def ProgramTaskAddProgress(builder, progress): builder.PrependUint32Slot(2, progress, 0)
def ProgramTaskAddResult(builder, result): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(result), 0)
def ProgramTaskEnd(builder): return builder.EndObject()
