# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataChangeFilter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDataChangeFilter(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataChangeFilter()
        x.Init(buf, n + offset)
        return x

    # DataChangeFilter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataChangeFilter
    def DeadBandValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def DataChangeFilterStart(builder): builder.StartObject(1)
def DataChangeFilterAddDeadBandValue(builder, deadBandValue): builder.PrependFloat32Slot(0, deadBandValue, 0.0)
def DataChangeFilterEnd(builder): return builder.EndObject()
