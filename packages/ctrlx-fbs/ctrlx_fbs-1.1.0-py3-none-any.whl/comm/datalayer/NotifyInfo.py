# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NotifyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNotifyInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NotifyInfo()
        x.Init(buf, n + offset)
        return x

    # NotifyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NotifyInfo
    def Node(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NotifyInfo
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # NotifyInfo
    def NotifyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NotifyInfoStart(builder): builder.StartObject(3)
def NotifyInfoAddNode(builder, node): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(node), 0)
def NotifyInfoAddTimestamp(builder, timestamp): builder.PrependUint64Slot(1, timestamp, 0)
def NotifyInfoAddNotifyType(builder, notifyType): builder.PrependInt32Slot(2, notifyType, 0)
def NotifyInfoEnd(builder): return builder.EndObject()
