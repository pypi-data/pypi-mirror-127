# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RetainStats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRetainStats(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RetainStats()
        x.Init(buf, n + offset)
        return x

    # RetainStats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RetainStats
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RetainStats
    def Free(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RetainStats
    def Used(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RetainStats
    def BiggestFree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RetainStats
    def SyncCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RetainStats
    def LastUsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def RetainStatsStart(builder): builder.StartObject(6)
def RetainStatsAddTotal(builder, total): builder.PrependUint32Slot(0, total, 0)
def RetainStatsAddFree(builder, free): builder.PrependUint32Slot(1, free, 0)
def RetainStatsAddUsed(builder, used): builder.PrependUint32Slot(2, used, 0)
def RetainStatsAddBiggestFree(builder, biggestFree): builder.PrependUint32Slot(3, biggestFree, 0)
def RetainStatsAddSyncCounter(builder, syncCounter): builder.PrependUint32Slot(4, syncCounter, 0)
def RetainStatsAddLastUsed(builder, lastUsed): builder.PrependUint32Slot(5, lastUsed, 0)
def RetainStatsEnd(builder): return builder.EndObject()
