# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Diagnosis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDiagnosis(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Diagnosis()
        x.Init(buf, n + offset)
        return x

    # Diagnosis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Diagnosis
    def MainDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Diagnosis
    def DetailedDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Diagnosis
    def DynamicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisStart(builder): builder.StartObject(3)
def DiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode): builder.PrependUint32Slot(0, mainDiagnosisCode, 0)
def DiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode): builder.PrependUint32Slot(1, detailedDiagnosisCode, 0)
def DiagnosisAddDynamicDescription(builder, dynamicDescription): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicDescription), 0)
def DiagnosisEnd(builder): return builder.EndObject()
