# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Variable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVariable(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Variable()
        x.Init(buf, n + offset)
        return x

    # Variable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Variable
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Variable
    def Bitoffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Variable
    def Bitsize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Variable
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def VariableStart(builder): builder.StartObject(4)
def VariableAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def VariableAddBitoffset(builder, bitoffset): builder.PrependUint32Slot(1, bitoffset, 0)
def VariableAddBitsize(builder, bitsize): builder.PrependUint32Slot(2, bitsize, 0)
def VariableAddType(builder, type): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def VariableEnd(builder): return builder.EndObject()
