# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscriptionSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubscriptionSettings(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscriptionSettings()
        x.Init(buf, n + offset)
        return x

    # SubscriptionSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubscriptionSettings
    def MinimumPublishInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 50

    # SubscriptionSettings
    def MinimumSampleInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 100000

    # SubscriptionSettings
    def MaximumBufferSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 50

    # SubscriptionSettings
    def MinimumErrorInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

def SubscriptionSettingsStart(builder): builder.StartObject(4)
def SubscriptionSettingsAddMinimumPublishInterval(builder, minimumPublishInterval): builder.PrependUint32Slot(0, minimumPublishInterval, 50)
def SubscriptionSettingsAddMinimumSampleInterval(builder, minimumSampleInterval): builder.PrependUint64Slot(1, minimumSampleInterval, 100000)
def SubscriptionSettingsAddMaximumBufferSize(builder, maximumBufferSize): builder.PrependUint32Slot(2, maximumBufferSize, 50)
def SubscriptionSettingsAddMinimumErrorInterval(builder, minimumErrorInterval): builder.PrependUint32Slot(3, minimumErrorInterval, 10000)
def SubscriptionSettingsEnd(builder): return builder.EndObject()
