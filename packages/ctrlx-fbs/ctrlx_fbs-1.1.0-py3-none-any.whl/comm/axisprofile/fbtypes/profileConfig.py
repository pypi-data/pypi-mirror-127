# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profileConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsprofileConfig(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profileConfig()
        x.Init(buf, n + offset)
        return x

    # profileConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profileConfig
    def DeviceAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # profileConfig
    def InputBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # profileConfig
    def OutputBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # profileConfig
    def ProfileBasicData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.profile import profile
            obj = profile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileConfig
    def InputMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.valueMapping import valueMapping
            obj = valueMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileConfig
    def OutputMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.valueMapping import valueMapping
            obj = valueMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def profileConfigStart(builder): builder.StartObject(6)
def profileConfigAddDeviceAddress(builder, deviceAddress): builder.PrependUint32Slot(0, deviceAddress, 0)
def profileConfigAddInputBuffer(builder, inputBuffer): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputBuffer), 0)
def profileConfigAddOutputBuffer(builder, outputBuffer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputBuffer), 0)
def profileConfigAddProfileBasicData(builder, profileBasicData): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(profileBasicData), 0)
def profileConfigAddInputMapping(builder, inputMapping): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inputMapping), 0)
def profileConfigAddOutputMapping(builder, outputMapping): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(outputMapping), 0)
def profileConfigEnd(builder): return builder.EndObject()
