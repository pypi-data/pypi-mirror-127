# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimingStatistic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTimingStatistic(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimingStatistic()
        x.Init(buf, n + offset)
        return x

    # TimingStatistic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimingStatistic
    def Minimum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimingStatistic
    def Maximum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimingStatistic
    def Current(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TimingStatisticStart(builder): builder.StartObject(3)
def TimingStatisticAddMinimum(builder, minimum): builder.PrependInt64Slot(0, minimum, 0)
def TimingStatisticAddMaximum(builder, maximum): builder.PrependInt64Slot(1, maximum, 0)
def TimingStatisticAddCurrent(builder, current): builder.PrependInt64Slot(2, current, 0)
def TimingStatisticEnd(builder): return builder.EndObject()
