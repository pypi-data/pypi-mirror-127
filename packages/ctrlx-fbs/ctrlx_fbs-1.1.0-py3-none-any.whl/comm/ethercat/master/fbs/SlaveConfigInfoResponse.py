# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SlaveConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSlaveConfigInfoResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    # SlaveConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveConfigInfoResponse
    def AutoIncAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def EthercatAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def IdentifyAdo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def IdentifyValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def SlaveHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def HcGroupIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def PreviousEthercatAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def PreviousPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def SlaveIdentity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatIdentityInfo import EthercatIdentityInfo
            obj = EthercatIdentityInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def SlaveName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SlaveConfigInfoResponse
    def MbxProtocols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def MbxStandard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMailboxInfo import EthercatMailboxInfo
            obj = EthercatMailboxInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def MbxBootstrap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMailboxInfo import EthercatMailboxInfo
            obj = EthercatMailboxInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def ProcessDataIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def ProcessDataInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def ProcessDataInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # SlaveConfigInfoResponse
    def ProcessDataOut(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def ProcessDataOutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def ProcessDataOutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # SlaveConfigInfoResponse
    def NumProcessVarsIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def NumProcessVarsOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def PortDescriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SlaveConfigInfoResponse
    def Reserved01(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SlaveConfigInfoResponse
    def Reserved01AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved01Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved01IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsInAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOut(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOutAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # SlaveConfigInfoResponse
    def Reserved02(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SlaveConfigInfoResponse
    def Reserved02AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved02Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved02IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # SlaveConfigInfoResponse
    def IsPresent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlaveConfigInfoResponse
    def IsHcGroupPresent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlaveConfigInfoResponse
    def DcSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SlaveConfigInfoResponseStart(builder): builder.StartObject(25)
def SlaveConfigInfoResponseAddAutoIncAddr(builder, autoIncAddr): builder.PrependUint16Slot(0, autoIncAddr, 0)
def SlaveConfigInfoResponseAddEthercatAddr(builder, ethercatAddr): builder.PrependUint16Slot(1, ethercatAddr, 0)
def SlaveConfigInfoResponseAddIdentifyAdo(builder, identifyAdo): builder.PrependUint16Slot(2, identifyAdo, 0)
def SlaveConfigInfoResponseAddIdentifyValue(builder, identifyValue): builder.PrependUint16Slot(3, identifyValue, 0)
def SlaveConfigInfoResponseAddSlaveHandle(builder, slaveHandle): builder.PrependUint32Slot(4, slaveHandle, 0)
def SlaveConfigInfoResponseAddHcGroupIdx(builder, hcGroupIdx): builder.PrependUint32Slot(5, hcGroupIdx, 0)
def SlaveConfigInfoResponseAddPreviousEthercatAddr(builder, previousEthercatAddr): builder.PrependUint16Slot(6, previousEthercatAddr, 0)
def SlaveConfigInfoResponseAddPreviousPort(builder, previousPort): builder.PrependUint16Slot(7, previousPort, 0)
def SlaveConfigInfoResponseAddSlaveIdentity(builder, slaveIdentity): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(slaveIdentity), 0)
def SlaveConfigInfoResponseAddSlaveName(builder, slaveName): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(slaveName), 0)
def SlaveConfigInfoResponseAddMbxProtocols(builder, mbxProtocols): builder.PrependUint32Slot(10, mbxProtocols, 0)
def SlaveConfigInfoResponseAddMbxStandard(builder, mbxStandard): builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(mbxStandard), 0)
def SlaveConfigInfoResponseAddMbxBootstrap(builder, mbxBootstrap): builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(mbxBootstrap), 0)
def SlaveConfigInfoResponseAddProcessDataIn(builder, processDataIn): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(processDataIn), 0)
def SlaveConfigInfoResponseStartProcessDataInVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def SlaveConfigInfoResponseAddProcessDataOut(builder, processDataOut): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(processDataOut), 0)
def SlaveConfigInfoResponseStartProcessDataOutVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def SlaveConfigInfoResponseAddNumProcessVarsIn(builder, numProcessVarsIn): builder.PrependUint16Slot(15, numProcessVarsIn, 0)
def SlaveConfigInfoResponseAddNumProcessVarsOut(builder, numProcessVarsOut): builder.PrependUint16Slot(16, numProcessVarsOut, 0)
def SlaveConfigInfoResponseAddPortDescriptor(builder, portDescriptor): builder.PrependUint8Slot(17, portDescriptor, 0)
def SlaveConfigInfoResponseAddReserved01(builder, reserved01): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(reserved01), 0)
def SlaveConfigInfoResponseStartReserved01Vector(builder, numElems): return builder.StartVector(1, numElems, 1)
def SlaveConfigInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(wkcStateDiagOffsIn), 0)
def SlaveConfigInfoResponseStartWkcStateDiagOffsInVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def SlaveConfigInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(wkcStateDiagOffsOut), 0)
def SlaveConfigInfoResponseStartWkcStateDiagOffsOutVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def SlaveConfigInfoResponseAddReserved02(builder, reserved02): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(reserved02), 0)
def SlaveConfigInfoResponseStartReserved02Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SlaveConfigInfoResponseAddIsPresent(builder, isPresent): builder.PrependBoolSlot(22, isPresent, 0)
def SlaveConfigInfoResponseAddIsHcGroupPresent(builder, isHcGroupPresent): builder.PrependBoolSlot(23, isHcGroupPresent, 0)
def SlaveConfigInfoResponseAddDcSupport(builder, dcSupport): builder.PrependBoolSlot(24, dcSupport, 0)
def SlaveConfigInfoResponseEnd(builder): return builder.EndObject()
