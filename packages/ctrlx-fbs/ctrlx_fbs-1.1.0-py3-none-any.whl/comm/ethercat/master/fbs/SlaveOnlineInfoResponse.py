# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SlaveOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSlaveOnlineInfoResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    # SlaveOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveOnlineInfoResponse
    def AutoIncAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def EthercatAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def StationAlias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def IdentifyValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def SlaveHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandlesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandlesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandlesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # SlaveOnlineInfoResponse
    def SlaveIdentity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatIdentityInfo import EthercatIdentityInfo
            obj = EthercatIdentityInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveOnlineInfoResponse
    def EscType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def EscRevision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def EscBuild(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def EscFeatures(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def PortDescriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def Reserved01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def AlStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def AlStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def MbxProtocols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def DlStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def PortState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def PreviousPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def SystemTimeDifference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def SlaveDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def PropagationDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # SlaveOnlineInfoResponse
    def DcSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlaveOnlineInfoResponse
    def Dc64Support(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlaveOnlineInfoResponse
    def IsRefClock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlaveOnlineInfoResponse
    def LineCrossed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SlaveOnlineInfoResponseStart(builder): builder.StartObject(27)
def SlaveOnlineInfoResponseAddAutoIncAddr(builder, autoIncAddr): builder.PrependUint16Slot(0, autoIncAddr, 0)
def SlaveOnlineInfoResponseAddEthercatAddr(builder, ethercatAddr): builder.PrependUint16Slot(1, ethercatAddr, 0)
def SlaveOnlineInfoResponseAddStationAlias(builder, stationAlias): builder.PrependUint16Slot(2, stationAlias, 0)
def SlaveOnlineInfoResponseAddIdentifyValue(builder, identifyValue): builder.PrependUint16Slot(3, identifyValue, 0)
def SlaveOnlineInfoResponseAddSlaveHandle(builder, slaveHandle): builder.PrependUint32Slot(4, slaveHandle, 0)
def SlaveOnlineInfoResponseAddPortSlaveHandles(builder, portSlaveHandles): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(portSlaveHandles), 0)
def SlaveOnlineInfoResponseStartPortSlaveHandlesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SlaveOnlineInfoResponseAddSlaveIdentity(builder, slaveIdentity): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(slaveIdentity), 0)
def SlaveOnlineInfoResponseAddEscType(builder, escType): builder.PrependUint8Slot(7, escType, 0)
def SlaveOnlineInfoResponseAddEscRevision(builder, escRevision): builder.PrependUint8Slot(8, escRevision, 0)
def SlaveOnlineInfoResponseAddEscBuild(builder, escBuild): builder.PrependUint16Slot(9, escBuild, 0)
def SlaveOnlineInfoResponseAddEscFeatures(builder, escFeatures): builder.PrependUint16Slot(10, escFeatures, 0)
def SlaveOnlineInfoResponseAddPortDescriptor(builder, portDescriptor): builder.PrependUint8Slot(11, portDescriptor, 0)
def SlaveOnlineInfoResponseAddReserved01(builder, reserved01): builder.PrependUint8Slot(12, reserved01, 0)
def SlaveOnlineInfoResponseAddAlStatus(builder, alStatus): builder.PrependUint16Slot(13, alStatus, 0)
def SlaveOnlineInfoResponseAddAlStatusCode(builder, alStatusCode): builder.PrependUint16Slot(14, alStatusCode, 0)
def SlaveOnlineInfoResponseAddMbxProtocols(builder, mbxProtocols): builder.PrependUint16Slot(15, mbxProtocols, 0)
def SlaveOnlineInfoResponseAddDlStatus(builder, dlStatus): builder.PrependUint16Slot(16, dlStatus, 0)
def SlaveOnlineInfoResponseAddPortState(builder, portState): builder.PrependUint16Slot(17, portState, 0)
def SlaveOnlineInfoResponseAddPreviousPort(builder, previousPort): builder.PrependUint16Slot(18, previousPort, 0)
def SlaveOnlineInfoResponseAddSystemTimeDifference(builder, systemTimeDifference): builder.PrependUint32Slot(19, systemTimeDifference, 0)
def SlaveOnlineInfoResponseAddSlaveDelay(builder, slaveDelay): builder.PrependUint32Slot(20, slaveDelay, 0)
def SlaveOnlineInfoResponseAddPropagationDelay(builder, propagationDelay): builder.PrependUint32Slot(21, propagationDelay, 0)
def SlaveOnlineInfoResponseAddReserved02(builder, reserved02): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(reserved02), 0)
def SlaveOnlineInfoResponseStartReserved02Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SlaveOnlineInfoResponseAddDcSupport(builder, dcSupport): builder.PrependBoolSlot(23, dcSupport, 0)
def SlaveOnlineInfoResponseAddDc64Support(builder, dc64Support): builder.PrependBoolSlot(24, dc64Support, 0)
def SlaveOnlineInfoResponseAddIsRefClock(builder, isRefClock): builder.PrependBoolSlot(25, isRefClock, 0)
def SlaveOnlineInfoResponseAddLineCrossed(builder, lineCrossed): builder.PrependBoolSlot(26, lineCrossed, 0)
def SlaveOnlineInfoResponseEnd(builder): return builder.EndObject()
