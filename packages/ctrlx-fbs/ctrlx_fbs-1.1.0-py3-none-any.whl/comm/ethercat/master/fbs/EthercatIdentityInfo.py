# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EthercatIdentityInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # EthercatIdentityInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EthercatIdentityInfo
    def VendorId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # EthercatIdentityInfo
    def ProductCode(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # EthercatIdentityInfo
    def RevisionNumber(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # EthercatIdentityInfo
    def SerialNumber(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))

def CreateEthercatIdentityInfo(builder, vendorId, productCode, revisionNumber, serialNumber):
    builder.Prep(4, 16)
    builder.PrependUint32(serialNumber)
    builder.PrependUint32(revisionNumber)
    builder.PrependUint32(productCode)
    builder.PrependUint32(vendorId)
    return builder.Offset()
