# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Interface(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInterface(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Interface()
        x.Init(buf, n + offset)
        return x

    # Interface
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Interface
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interface
    def Device(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interface
    def LinkLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interface
    def CapabilityList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.Capability import Capability
            obj = Capability()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Interface
    def CapabilityListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interface
    def CapabilityListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def InterfaceStart(builder): builder.StartObject(4)
def InterfaceAddPort(builder, port): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(port), 0)
def InterfaceAddDevice(builder, device): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(device), 0)
def InterfaceAddLinkLayer(builder, linkLayer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linkLayer), 0)
def InterfaceAddCapabilityList(builder, capabilityList): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(capabilityList), 0)
def InterfaceStartCapabilityListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InterfaceEnd(builder): return builder.EndObject()
