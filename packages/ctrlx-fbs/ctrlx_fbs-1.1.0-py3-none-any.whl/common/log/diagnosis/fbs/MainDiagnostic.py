# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MainDiagnostic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMainDiagnostic(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MainDiagnostic()
        x.Init(buf, n + offset)
        return x

    # MainDiagnostic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MainDiagnostic
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MainDiagnostic
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # MainDiagnostic
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MainDiagnostic
    def DetailedDiagnostics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.log.diagnosis.fbs.DetailedDiagnostic import DetailedDiagnostic
            obj = DetailedDiagnostic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MainDiagnostic
    def DetailedDiagnosticsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MainDiagnostic
    def DetailedDiagnosticsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MainDiagnosticStart(builder): builder.StartObject(4)
def MainDiagnosticAddNumber(builder, number): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)
def MainDiagnosticAddVersion(builder, version): builder.PrependUint32Slot(1, version, 1)
def MainDiagnosticAddText(builder, text): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def MainDiagnosticAddDetailedDiagnostics(builder, detailedDiagnostics): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(detailedDiagnostics), 0)
def MainDiagnosticStartDetailedDiagnosticsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MainDiagnosticEnd(builder): return builder.EndObject()
