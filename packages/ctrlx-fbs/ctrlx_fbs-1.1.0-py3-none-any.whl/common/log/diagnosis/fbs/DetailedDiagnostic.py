# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DetailedDiagnostic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDetailedDiagnostic(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedDiagnostic()
        x.Init(buf, n + offset)
        return x

    # DetailedDiagnostic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DetailedDiagnostic
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DetailedDiagnostic
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # DetailedDiagnostic
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DetailedDiagnosticStart(builder): builder.StartObject(3)
def DetailedDiagnosticAddNumber(builder, number): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)
def DetailedDiagnosticAddVersion(builder, version): builder.PrependUint32Slot(1, version, 1)
def DetailedDiagnosticAddText(builder, text): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def DetailedDiagnosticEnd(builder): return builder.EndObject()
