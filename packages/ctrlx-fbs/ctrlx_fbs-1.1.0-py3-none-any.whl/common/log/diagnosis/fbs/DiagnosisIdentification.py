# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DiagnosisIdentification(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDiagnosisIdentification(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagnosisIdentification()
        x.Init(buf, n + offset)
        return x

    # DiagnosisIdentification
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DiagnosisIdentification
    def MainDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DiagnosisIdentification
    def DetailedDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DiagnosisIdentification
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisIdentificationStart(builder): builder.StartObject(3)
def DiagnosisIdentificationAddMainDiagnosisNumber(builder, mainDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainDiagnosisNumber), 0)
def DiagnosisIdentificationAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detailedDiagnosisNumber), 0)
def DiagnosisIdentificationAddEntity(builder, entity): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)
def DiagnosisIdentificationEnd(builder): return builder.EndObject()
