# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CpuInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCpuInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CpuInfo()
        x.Init(buf, n + offset)
        return x

    # CpuInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CpuInfo
    def CpuCoresTotal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresTotalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresTotalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresTotalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # CpuInfo
    def CpuCoresActive(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresActiveAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresActiveLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresActiveIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CpuInfo
    def CpuCoresRealtime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresRealtimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresRealtimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresRealtimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CpuInfo
    def CpuCoresNonRealtime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresNonRealtimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresNonRealtimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresNonRealtimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CpuInfo
    def CpuCoreRealtimeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreRealtimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreRealtimeDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreNonRealtimeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreNonRealtimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreNonRealtimeDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def VariationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CpuInfo
    def CpuCoreHwWdg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CpuInfo
    def CpuCorePtpTimer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CpuInfo
    def CpuCoreScheduler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CpuInfo
    def CpuCoreAutomation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CpuInfoStart(builder): builder.StartObject(15)
def CpuInfoAddCpuCoresTotal(builder, cpuCoresTotal): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresTotal), 0)
def CpuInfoStartCpuCoresTotalVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CpuInfoAddCpuCoresActive(builder, cpuCoresActive): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresActive), 0)
def CpuInfoStartCpuCoresActiveVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CpuInfoAddCpuCoresRealtime(builder, cpuCoresRealtime): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresRealtime), 0)
def CpuInfoStartCpuCoresRealtimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CpuInfoAddCpuCoresNonRealtime(builder, cpuCoresNonRealtime): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresNonRealtime), 0)
def CpuInfoStartCpuCoresNonRealtimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CpuInfoAddCpuCoreRealtimeMax(builder, cpuCoreRealtimeMax): builder.PrependInt32Slot(4, cpuCoreRealtimeMax, -1)
def CpuInfoAddCpuCoreRealtimeMin(builder, cpuCoreRealtimeMin): builder.PrependInt32Slot(5, cpuCoreRealtimeMin, -1)
def CpuInfoAddCpuCoreRealtimeDefault(builder, cpuCoreRealtimeDefault): builder.PrependInt32Slot(6, cpuCoreRealtimeDefault, -1)
def CpuInfoAddCpuCoreNonRealtimeMax(builder, cpuCoreNonRealtimeMax): builder.PrependInt32Slot(7, cpuCoreNonRealtimeMax, -1)
def CpuInfoAddCpuCoreNonRealtimeMin(builder, cpuCoreNonRealtimeMin): builder.PrependInt32Slot(8, cpuCoreNonRealtimeMin, -1)
def CpuInfoAddCpuCoreNonRealtimeDefault(builder, cpuCoreNonRealtimeDefault): builder.PrependInt32Slot(9, cpuCoreNonRealtimeDefault, -1)
def CpuInfoAddVariationId(builder, variationId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(variationId), 0)
def CpuInfoAddCpuCoreHwWdg(builder, cpuCoreHwWdg): builder.PrependUint32Slot(11, cpuCoreHwWdg, 0)
def CpuInfoAddCpuCorePtpTimer(builder, cpuCorePtpTimer): builder.PrependUint32Slot(12, cpuCorePtpTimer, 0)
def CpuInfoAddCpuCoreScheduler(builder, cpuCoreScheduler): builder.PrependUint32Slot(13, cpuCoreScheduler, 0)
def CpuInfoAddCpuCoreAutomation(builder, cpuCoreAutomation): builder.PrependUint32Slot(14, cpuCoreAutomation, 0)
def CpuInfoEnd(builder): return builder.EndObject()
