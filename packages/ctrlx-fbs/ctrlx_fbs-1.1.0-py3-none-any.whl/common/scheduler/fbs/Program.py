# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Program(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProgram(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Program()
        x.Init(buf, n + offset)
        return x

    # Program
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Program
    def Task(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs.Task import Task
            obj = Task()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Program
    def Callables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.scheduler.fbs.Callable import Callable
            obj = Callable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Program
    def CallablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Program
    def CallablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Program
    def Watchdog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.watchdog.fbs.Watchdog import Watchdog
            obj = Watchdog()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ProgramStart(builder): builder.StartObject(3)
def ProgramAddTask(builder, task): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(task), 0)
def ProgramAddCallables(builder, callables): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(callables), 0)
def ProgramStartCallablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ProgramAddWatchdog(builder, watchdog): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(watchdog), 0)
def ProgramEnd(builder): return builder.EndObject()
