# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DurationRt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDurationRt(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DurationRt()
        x.Init(buf, n + offset)
        return x

    # DurationRt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DurationRt
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DurationRt
    def Task(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DurationRt
    def Other(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DurationRt
    def Equidistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DurationRt
    def Deviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DurationRt
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DurationRt
    def Samplerate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def DurationRtStart(builder): builder.StartObject(7)
def DurationRtAddTotal(builder, total): builder.PrependUint64Slot(0, total, 0)
def DurationRtAddTask(builder, task): builder.PrependUint64Slot(1, task, 0)
def DurationRtAddOther(builder, other): builder.PrependUint64Slot(2, other, 0)
def DurationRtAddEquidistance(builder, equidistance): builder.PrependUint64Slot(3, equidistance, 0)
def DurationRtAddDeviation(builder, deviation): builder.PrependUint64Slot(4, deviation, 0)
def DurationRtAddCounter(builder, counter): builder.PrependUint64Slot(5, counter, 0)
def DurationRtAddSamplerate(builder, samplerate): builder.PrependUint64Slot(6, samplerate, 0)
def DurationRtEnd(builder): return builder.EndObject()
