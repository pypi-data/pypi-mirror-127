# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Admin(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAdmin(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Admin()
        x.Init(buf, n + offset)
        return x

    # Admin
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Admin
    def StartupState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Admin
    def StartupTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5

    # Admin
    def StartupErrorReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Admin
    def TriggerSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Admin
    def ControlDebugType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Admin
    def ControlDebug(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Admin
    def CpuInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs.CpuInfo import CpuInfo
            obj = CpuInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AdminStart(builder): builder.StartObject(7)
def AdminAddStartupState(builder, startupState): builder.PrependInt8Slot(0, startupState, 0)
def AdminAddStartupTimeout(builder, startupTimeout): builder.PrependUint32Slot(1, startupTimeout, 5)
def AdminAddStartupErrorReaction(builder, startupErrorReaction): builder.PrependInt8Slot(2, startupErrorReaction, 0)
def AdminAddTriggerSource(builder, triggerSource): builder.PrependInt8Slot(3, triggerSource, 0)
def AdminAddControlDebugType(builder, controlDebugType): builder.PrependUint8Slot(4, controlDebugType, 0)
def AdminAddControlDebug(builder, controlDebug): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(controlDebug), 0)
def AdminAddCpuInfo(builder, cpuInfo): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cpuInfo), 0)
def AdminEnd(builder): return builder.EndObject()
