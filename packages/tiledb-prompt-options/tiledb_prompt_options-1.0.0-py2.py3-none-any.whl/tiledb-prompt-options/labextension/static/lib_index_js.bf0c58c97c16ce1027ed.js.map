{"version":3,"file":"lib_index_js.bf0c58c97c16ce1027ed.js","mappings":";;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,uBAAuB,mBAAO,CAAC,mHAA0B;AACzD,cAAc,mBAAO,CAAC,8CAAkB;AACxC,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,kBAAkB,mBAAO,CAAC,wEAAiB;AAC3C,cAAc,mBAAO,CAAC,4CAAgB;AACtC,oBAAoB,mBAAO,CAAC,wDAAsB;AAClD,wCAAwC,mBAAO,CAAC,gGAA0C;AAC1F,QAAQ,UAAU;AAClB;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4FAA4F;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAA8D;AAC1E;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1Ma;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,wBAAwB;AAC1D;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,+BAA+B;;;;;;;;;;;ACpBlB;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,mBAAO,CAAC,mHAA0B;AACzD,oBAAoB,mBAAO,CAAC,+CAAa;AACzC,QAAQ,2BAA2B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAe;;;;;;;;;;;ACtCF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAe;;;;;;;;;;;ACbF;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,oBAAoB,mBAAO,CAAC,oFAAuB;AACnD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB;;;;;;;;;;;ACxCL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,oCAAoC,mBAAO,CAAC,wFAAsC;AAClF;AACA;AACA;AACA;AACA;AACA,yCAAyC,kDAAkD;AAC3F;AACA;AACA,KAAK;AACL;AACA,sBAAsB;;;;;;;;;;;AChBT;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,kBAAkB,mBAAO,CAAC,2CAAW;AACrC;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC,gBAAgB,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc,GAAG,WAAW;AACjD;AACA;AACA,CAAC;AACD,kBAAe;;;;;;;;;;;AC7BF;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,mBAAO,CAAC,mHAA0B;AACzD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,oBAAoB,mBAAO,CAAC,uDAAqB;AACjD,sBAAsB,mBAAO,CAAC,2DAAuB;AACrD,0CAA0C,mBAAO,CAAC,mGAA2C;AAC7F,QAAQ,UAAU;AAClB,QAAQ,qBAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,gEAAgE;AACpF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA,kBAAe","sources":["webpack://@tiledb-inc/tiledb_prompt_options/./lib/dialogs/TileDBPromptOptionsWidget.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/dom.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/getDefaultS3DataFromNamespace.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/getOrgNamesWithWritePermissions.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/handler.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/openDialogs.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/tiledbAPI.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TileDBPromptOptionsWidget = void 0;\nconst tiledb_cloud_1 = require(\"@tiledb-inc/tiledb-cloud\");\nconst dom_1 = require(\"./../helpers/dom\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst widgets_1 = require(\"@lumino/widgets\");\nconst dom_2 = require(\"../helpers/dom\");\nconst tiledbAPI_1 = require(\"../helpers/tiledbAPI\");\nconst getDefaultS3DataFromNamespace_1 = require(\"../helpers/getDefaultS3DataFromNamespace\");\nconst { UserApi } = tiledb_cloud_1.v2;\nclass TileDBPromptOptionsWidget extends widgets_1.Widget {\n    constructor(options) {\n        const body = document.createElement('div');\n        super({ node: body });\n        this.addClass('TDB-Prompt-Dialog');\n        this.app = options.app;\n        this.docManager = options.docManager;\n        const name_label = document.createElement('label');\n        name_label.textContent = 'Name:';\n        const name_input = document.createElement('input');\n        name_input.setAttribute('type', 'text');\n        name_input.setAttribute('value', 'untitled');\n        name_input.setAttribute('name', 'name');\n        name_input.setAttribute('required', 'true');\n        name_input.setAttribute('pattern', '[A-Za-z0-9_-]*');\n        name_input.setAttribute('maxlength', '250');\n        name_input.setAttribute('oninput', 'this.setCustomValidity(\"\")');\n        name_input.addEventListener('invalid', function (event) {\n            if (event.target.validity.valueMissing) {\n                event.target.setCustomValidity('This field is required');\n            }\n            else {\n                event.target.setCustomValidity('Name should start with a lowercase character and consist of letters(a -z and A-Z), numbers, \"_\" and \"-\" only');\n            }\n        });\n        const s3_label = document.createElement('label');\n        s3_label.textContent = 'Cloud storage path:';\n        const s3_input = document.createElement('input');\n        s3_input.setAttribute('type', 'text');\n        s3_input.setAttribute('value', options.defaultS3Path);\n        s3_input.setAttribute('name', 's3_prefix');\n        s3_input.onchange = () => {\n            this.isDefaultS3PathInputDirty = true;\n        };\n        const s3_cred_label = document.createElement('label');\n        s3_cred_label.textContent = 'Cloud storage credentials:';\n        const s3_cred_selectinput = document.createElement('select');\n        s3_cred_selectinput.setAttribute('name', 's3_credentials');\n        s3_cred_selectinput.setAttribute('required', 'true');\n        const credentials = options.credentials.map((cred) => cred.name);\n        dom_1.addOptionsToSelectInput(s3_cred_selectinput, credentials, options.defaultS3CredentialName);\n        const addCredentialsLink = document.createElement('a');\n        addCredentialsLink.textContent = 'Add credentials';\n        addCredentialsLink.classList.add('TDB-Prompt-Dialog__link');\n        addCredentialsLink.onclick = () => {\n            window.parent.postMessage(`@tiledb/prompt_options::add_credentials`, '*');\n        };\n        const owner_label = document.createElement('label');\n        owner_label.textContent = 'Owner:';\n        const owner_input = document.createElement('select');\n        dom_1.addOptionsToSelectInput(owner_input, options.owners, options.selectedOwner);\n        owner_input.setAttribute('name', 'owner');\n        owner_input.onchange = (e) => __awaiter(this, void 0, void 0, function* () {\n            const newOwner = e.currentTarget.value;\n            // Reset credentials input\n            dom_2.resetSelectInput(s3_cred_selectinput);\n            // Get credentials and default credentials name from API\n            const userTileDBAPI = yield tiledbAPI_1.default(UserApi, tiledbAPI_1.Versions.v2);\n            const credentialsResponse = yield userTileDBAPI.listCredentials(newOwner);\n            const newCredentials = credentialsResponse.data.credentials || [];\n            const username = options.owners[0];\n            const { default_s3_path_credentials_name: defaultCredentialsName, default_s3_path: defaultS3Path, } = yield getDefaultS3DataFromNamespace_1.default(username, newOwner);\n            // Update the s3_path with the new owner's default_s3_path if the input has not changed by the user.\n            if (defaultS3Path && !this.isDefaultS3PathInputDirty) {\n                s3_input.setAttribute('value', defaultS3Path);\n            }\n            const credentials = newCredentials.map((cred) => cred.name);\n            dom_1.addOptionsToSelectInput(s3_cred_selectinput, credentials, defaultCredentialsName);\n        });\n        const kernel_label = document.createElement('label');\n        kernel_label.textContent = 'Kernel:';\n        const kernel_input = document.createElement('select');\n        kernel_input.setAttribute('name', 'kernel');\n        const kernelSpecs = this.docManager.services.kernelspecs.specs;\n        const listOfAvailableKernels = Object.keys(kernelSpecs.kernelspecs);\n        const kernelNames = Object.values(kernelSpecs.kernelspecs).map((kernel) => kernel.display_name);\n        const defaultKernel = kernelSpecs.default;\n        dom_1.addOptionsToSelectInput(kernel_input, listOfAvailableKernels, defaultKernel, kernelNames);\n        const form = document.createElement('form');\n        form.classList.add('TDB-Prompt-Dialog__form');\n        body.appendChild(form);\n        form.appendChild(name_label);\n        form.appendChild(name_input);\n        form.appendChild(s3_label);\n        form.appendChild(s3_input);\n        form.appendChild(s3_cred_label);\n        form.appendChild(s3_cred_selectinput);\n        form.appendChild(addCredentialsLink);\n        form.appendChild(owner_label);\n        form.appendChild(owner_input);\n        form.appendChild(kernel_label);\n        form.appendChild(kernel_input);\n        // Update credentials input when we get message from parent window\n        window.addEventListener('message', (e) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (e.data === 'TILEDB_UPDATED_CREDENTIALS') {\n                // Make call to update credentials\n                const userTileDBAPI = yield tiledbAPI_1.default(UserApi, tiledbAPI_1.Versions.v2);\n                const username = options.owners[0];\n                const credentialsResponse = yield userTileDBAPI.listCredentials(username);\n                s3_cred_selectinput.innerHTML = '';\n                const credentials = (_a = credentialsResponse.data) === null || _a === void 0 ? void 0 : _a.credentials.map((cred) => cred.name);\n                dom_1.addOptionsToSelectInput(s3_cred_selectinput, credentials, options.defaultS3CredentialName);\n            }\n        }));\n    }\n    /**\n     * Add a fake button with a loader to indicate users to wait\n     */\n    onAfterAttach() {\n        var _a;\n        const footerElement = (_a = document.querySelector('.TDB-Prompt-Dialog')) === null || _a === void 0 ? void 0 : _a.nextElementSibling;\n        const fakeBtn = document.createElement('button');\n        fakeBtn.classList.add('TDB-Prompt-Dialog__styled-btn', 'jp-Dialog-button', 'jp-mod-accept', 'jp-mod-styled');\n        fakeBtn.textContent = 'GO';\n        fakeBtn.onclick = () => onSbumit(this.app, this.docManager);\n        footerElement.appendChild(fakeBtn);\n    }\n    getValue() {\n        const input_elem = this.node.getElementsByTagName('input');\n        const select_elem = this.node.getElementsByTagName('select');\n        return {\n            name: input_elem[0].value,\n            s3_prefix: input_elem[1].value,\n            s3_credentials: select_elem[0].value,\n            owner: select_elem[1].value,\n            kernel: select_elem[2].value,\n        };\n    }\n}\nexports.TileDBPromptOptionsWidget = TileDBPromptOptionsWidget;\nfunction onSbumit(app, docManager) {\n    const fakeBtn = document.querySelector('.TDB-Prompt-Dialog__styled-btn');\n    const originalSubmitButton = document.querySelector('.TDB-Prompt-Dialog__btn');\n    const formElement = document.querySelector('.TDB-Prompt-Dialog__form');\n    const formData = new FormData(formElement);\n    // If form is not valid just return\n    if (!formElement.reportValidity()) {\n        return;\n    }\n    fakeBtn.textContent = '';\n    const loader = document.createElement('div');\n    loader.classList.add('TDB-Prompt-Dialog__loader');\n    fakeBtn.appendChild(loader);\n    const { name, owner, s3_credentials, s3_prefix, kernel: kernelName, } = serializeForm(formData);\n    const tiledb_options_json = {\n        name,\n        s3_prefix,\n        s3_credentials,\n    };\n    const kernel = { name: kernelName };\n    const path = 'cloud/owned/'.concat(owner, '/');\n    const options = {\n        path: path,\n        type: 'notebook',\n        options: JSON.stringify(tiledb_options_json),\n    };\n    docManager.services.contents\n        .newUntitled(options)\n        .then((model) => {\n        app.commands\n            .execute('docmanager:open', {\n            factory: 'Notebook',\n            path: model.path + '.ipynb',\n            kernel,\n        })\n            .finally(() => {\n            // We click the original submit button to close the dialog\n            originalSubmitButton.click();\n        });\n    })\n        .catch((err) => {\n        apputils_1.showErrorMessage('Error', err);\n        originalSubmitButton.click();\n    });\n}\nfunction serializeForm(formData) {\n    const obj = {};\n    for (const key of formData.keys()) {\n        obj[key] = formData.get(key);\n    }\n    return obj;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addOptionsToSelectInput = exports.resetSelectInput = void 0;\nconst resetSelectInput = (selectInput) => {\n    selectInput.value = '';\n    selectInput.innerHTML = '';\n};\nexports.resetSelectInput = resetSelectInput;\nconst addOptionsToSelectInput = (selectInput, options, defaultValue, deplayNames) => {\n    options.forEach((opt, i) => {\n        const diplayName = deplayNames ? deplayNames[i] : opt;\n        const option = document.createElement('option');\n        option.setAttribute('value', opt);\n        option.setAttribute('label', diplayName);\n        if (!!defaultValue && defaultValue === opt) {\n            option.setAttribute('selected', 'true');\n        }\n        selectInput.append(option);\n    });\n};\nexports.addOptionsToSelectInput = addOptionsToSelectInput;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tiledb_cloud_1 = require(\"@tiledb-inc/tiledb-cloud\");\nconst tiledbAPI_1 = require(\"./tiledbAPI\");\nconst { UserApi, OrganizationApi } = tiledb_cloud_1.v1;\n/**\n * Returns the default_s3_path_credentials_name of the selected owner\n * @param user The user's username\n * @param owner The selected owner\n * @returns The default credentials name of the owner\n */\nconst getDefaultS3DataFromNamespace = (user, owner) => __awaiter(void 0, void 0, void 0, function* () {\n    const userTileDBAPI = yield tiledbAPI_1.default(UserApi);\n    const orgTileDBAPI = yield tiledbAPI_1.default(OrganizationApi);\n    const isOwnerOrganization = user !== owner;\n    /**\n     * If the current owner is the user we use UserAPI to get user's data\n     * otherwise the current owner is an organization so we use OrganizationApi\n     * to get the org's data\n     */\n    const getOwnerData = () => isOwnerOrganization\n        ? orgTileDBAPI.getOrganization(owner)\n        : userTileDBAPI.getUser();\n    const ownerResponse = yield getOwnerData();\n    return {\n        default_s3_path: ownerResponse.data.default_s3_path,\n        default_s3_path_credentials_name: ownerResponse.data.default_s3_path_credentials_name,\n    };\n});\nexports.default = getDefaultS3DataFromNamespace;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getOrgNamesWithWritePermissions(orgs) {\n    const orgNames = [];\n    orgs.forEach((org) => {\n        const orgName = org.organization_name;\n        if (orgName !== 'public' &&\n            !!~org.allowed_actions.indexOf('write')) {\n            orgNames.push(orgName);\n        }\n    });\n    return orgNames;\n}\nexports.default = getOrgNamesWithWritePermissions;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requestAPI = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst services_1 = require(\"@jupyterlab/services\");\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nfunction requestAPI(endPoint = '', init = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Make request to Jupyter API\n        const settings = services_1.ServerConnection.makeSettings();\n        const requestUrl = coreutils_1.URLExt.join(settings.baseUrl, 'get_access_token', (endPoint = ''));\n        let response;\n        try {\n            response = yield services_1.ServerConnection.makeRequest(requestUrl, init, settings);\n        }\n        catch (error) {\n            throw new services_1.ServerConnection.NetworkError(error);\n        }\n        const data = yield response.json();\n        if (!response.ok) {\n            throw new services_1.ServerConnection.ResponseError(response, data.message);\n        }\n        return data;\n    });\n}\nexports.requestAPI = requestAPI;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.showMainDialog = void 0;\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst apputils_2 = require(\"@jupyterlab/apputils\");\nconst TileDBPromptOptionsWidget_1 = require(\"../dialogs/TileDBPromptOptionsWidget\");\nconst showMainDialog = (data) => {\n    apputils_1.showDialog({\n        body: new TileDBPromptOptionsWidget_1.TileDBPromptOptionsWidget(data),\n        buttons: [\n            apputils_2.Dialog.cancelButton(),\n            apputils_2.Dialog.okButton({ label: 'GO', className: 'TDB-Prompt-Dialog__btn' }),\n        ],\n        title: 'TileDB Notebook Options',\n    });\n};\nexports.showMainDialog = showMainDialog;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Versions = void 0;\nconst handler_1 = require(\"./handler\");\nlet data;\nvar Versions;\n(function (Versions) {\n    Versions[\"v1\"] = \"v1\";\n    Versions[\"v2\"] = \"v2\";\n})(Versions = exports.Versions || (exports.Versions = {}));\nconst getTileDBAPI = (Api, apiVersion = Versions.v1) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!data) {\n        data = yield handler_1.requestAPI();\n    }\n    const config = {\n        apiKey: data.token,\n        basePath: `${data.api_host}/${apiVersion}`,\n    };\n    return new Api(config);\n});\nexports.default = getTileDBAPI;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tiledb_cloud_1 = require(\"@tiledb-inc/tiledb-cloud\");\nconst docmanager_1 = require(\"@jupyterlab/docmanager\");\nconst filebrowser_1 = require(\"@jupyterlab/filebrowser\");\nconst launcher_1 = require(\"@jupyterlab/launcher\");\nconst mainmenu_1 = require(\"@jupyterlab/mainmenu\");\nconst tiledbAPI_1 = require(\"./helpers/tiledbAPI\");\nconst openDialogs_1 = require(\"./helpers/openDialogs\");\nconst getOrgNamesWithWritePermissions_1 = require(\"./helpers/getOrgNamesWithWritePermissions\");\nconst { UserApi } = tiledb_cloud_1.v1;\nconst { UserApi: UserApiV2 } = tiledb_cloud_1.v2;\nconst extension = {\n    activate,\n    autoStart: true,\n    id: 'tiledb-prompt-notebook-options',\n    optional: [launcher_1.ILauncher],\n    requires: [mainmenu_1.IMainMenu, docmanager_1.IDocumentManager, filebrowser_1.IFileBrowserFactory],\n};\nfunction activate(app, menu, docManager, browser, launcher) {\n    const OPEN_COMMAND = 'tiledb-prompt-notebook-options:open';\n    app.commands.addCommand(OPEN_COMMAND, {\n        caption: 'Prompt the user for TileDB notebook options',\n        execute: () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const tileDBAPI = yield tiledbAPI_1.default(UserApi);\n            const tileDBAPIV2 = yield tiledbAPI_1.default(UserApiV2, tiledbAPI_1.Versions.v2);\n            const userResponse = yield tileDBAPI.getUser();\n            const userData = userResponse.data;\n            const username = userData.username;\n            const credentialsResponse = yield tileDBAPIV2.listCredentials(username);\n            const owners = [username];\n            const organizationsWithWritePermissions = getOrgNamesWithWritePermissions_1.default(userData.organizations || []);\n            const defaultS3Path = userData.default_s3_path || 's3://tiledb-user/notebooks';\n            owners.push(...organizationsWithWritePermissions);\n            openDialogs_1.showMainDialog({\n                owners,\n                credentials: ((_a = credentialsResponse.data) === null || _a === void 0 ? void 0 : _a.credentials) || [],\n                defaultS3Path,\n                defaultS3CredentialName: userData.default_s3_path_credentials_name,\n                app,\n                docManager,\n                selectedOwner: userData.username,\n            });\n        }),\n        isEnabled: () => true,\n        label: 'TileDB Notebook',\n    });\n    // Add a launcher item.\n    if (launcher) {\n        launcher.add({\n            args: { isLauncher: true, kernelName: 'tiledb-prompt-notebook-options' },\n            category: 'Notebook',\n            command: OPEN_COMMAND,\n            kernelIconUrl: 'https://cloud.tiledb.com/static/img/tiledb-logo-jupyterlab.svg',\n            rank: 1,\n        });\n    }\n    // Add to the file menu.\n    if (menu) {\n        menu.fileMenu.newMenu.addGroup([{ command: OPEN_COMMAND }], 40);\n    }\n    console.log('JupyterLab extension @tiledb/tiledb_prompt_options is activated.');\n}\nexports.default = extension;\n"],"names":[],"sourceRoot":""}