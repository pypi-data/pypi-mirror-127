#pragma once

#include <string_view>

#include <scip/config.h>

#include "ecole/export.hpp"

namespace ecole {

struct ECOLE_EXPORT VersionInfo {
	unsigned int major;
	unsigned int minor;
	unsigned int patch;
	std::string_view revision = "unknown";
	std::string_view build_type = "unknown";
	std::string_view build_os = "unknown";
	std::string_view build_time = "unknown";
	std::string_view build_compiler = "unknown";
};

/**
 * Ecole version, as per header files.
 */
inline constexpr VersionInfo get_ecole_header_version() noexcept {
	return {
		@Ecole_VERSION_MAJOR@,  // NOLINT(readability-magic-numbers)
		@Ecole_VERSION_MINOR@,  // NOLINT(readability-magic-numbers)
		@Ecole_VERSION_PATCH@,  // NOLINT(readability-magic-numbers)
		"@Ecole_VERSION_REVISION@",
		"@Ecole_BUILD_TYPE@",
		"@Ecole_BUILD_OS@",
		"@Ecole_BUILD_TIME@",
		"@Ecole_BUILD_COMPILER@",
	};
}

/**
 * Ecole version of the library.
 *
 * This is the version of Ecole when compiling it as a library.
 * This is useful for detecting incompatibilities when loading as a dynamic library.
 */
ECOLE_EXPORT VersionInfo get_ecole_lib_version() noexcept;

/**
 * SCIP version, as per current header files.
 */
inline constexpr VersionInfo get_scip_header_version() noexcept {
	return {SCIP_VERSION_MAJOR, SCIP_VERSION_MINOR, SCIP_VERSION_PATCH};
}

/**
 * SCIP version, as per the (dynamically) loaded library.
 */
ECOLE_EXPORT VersionInfo get_scip_lib_version() noexcept;

/**
 * SCIP version used to compile Ecole library.
 */
ECOLE_EXPORT VersionInfo get_scip_buildtime_version() noexcept;

}  // namespace ecole
