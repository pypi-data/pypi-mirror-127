{"version":3,"file":"chunks/app_views_dashboardsV2_view_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'app/api';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport NotFound from 'app/components/errors/notFound';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nimport {DashboardDetails, DashboardListItem} from './types';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  reloadData: () => void;\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n  location: Location;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: parseInt(params.dashboardId, 10),\n      });\n    }\n\n    return endpoints;\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n\n    return children({\n      error,\n      dashboard: selectedDashboard,\n      dashboards: this.getDashboards(),\n      reloadData: this.reloadData.bind(this),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import React, {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {updateDashboardVisit} from 'app/actionCreators/dashboards';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport useApi from 'app/utils/useApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\ntype Props = RouteComponentProps<{orgId: string; dashboardId: string}, {}> & {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string\n    if (constructedWidget) {\n      browserHistory.replace(location.pathname);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, reloadData}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <DashboardDetail\n              {...props}\n              initialState={newWidget ? DashboardState.EDIT : DashboardState.VIEW}\n              dashboard={dashboard}\n              dashboards={dashboards}\n              reloadData={(...args) => {\n                if (newWidget) {\n                  setNewWidget(undefined);\n                }\n                return reloadData(...args);\n              }}\n              newWidget={newWidget}\n            />\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","OrgDashboards","AsyncComponent","loading","reloading","error","errors","dashboards","selectedDashboard","componentDidUpdate","prevProps","isEqual","params","dashboardId","this","props","remountComponent","getEndpoints","organization","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","location","length","browserHistory","pathname","query","renderBody","dashboard","reloadData","bind","renderError","Object","values","find","resp","status","super","renderComponent","features","includes","t","ViewEditDashboard","api","useApi","newWidget","setNewWidget","useState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","DashboardBasicFeature","initialState","DashboardState","args","undefined","withOrganization","hookName","renderDisabled","type"],"sourceRoot":""}