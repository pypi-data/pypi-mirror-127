{"version":3,"file":"chunks/app_components_events_eventDataSection_tsx-app_components_events_interfaces_keyValueList_tsx--49db81.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/contextData/toggle.tsx","webpack:///./app/components/contextData/utils.tsx","webpack:///./app/components/contextData/index.tsx","webpack:///./app/components/events/eventDataSection.tsx","webpack:///./app/components/events/interfaces/keyValueList.tsx","webpack:///./app/components/events/meta/annotatedText/redaction.tsx","webpack:///./app/components/events/meta/annotatedText/utils.tsx","webpack:///./app/components/events/meta/annotatedText/chunk.tsx","webpack:///./app/components/events/meta/annotatedText/chunks.tsx","webpack:///./app/components/events/meta/annotatedText/valueElement.tsx","webpack:///./app/components/events/meta/annotatedText/index.tsx","webpack:///./app/components/events/styles.tsx","webpack:///./app/stores/latestContextStore.tsx","webpack:///./app/utils/withLatestContext.tsx"],"sourcesContent":["import {Children, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconAdd, IconSubtract} from 'app/icons';\n\ntype Props = {\n  highUp: boolean;\n  wrapClassName: string;\n  children: React.ReactNode;\n};\n\nfunction Toggle({highUp, wrapClassName, children}: Props) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (Children.count(children) === 0) {\n    return null;\n  }\n\n  const wrappedChildren = <span className={wrapClassName}>{children}</span>;\n\n  if (highUp) {\n    return wrappedChildren;\n  }\n\n  return (\n    <span>\n      <IconWrapper\n        isExpanded={isExpanded}\n        onClick={evt => {\n          setIsExpanded(!isExpanded);\n          evt.preventDefault();\n        }}\n      >\n        {isExpanded ? (\n          <IconSubtract size=\"9px\" color=\"white\" />\n        ) : (\n          <IconAdd size=\"9px\" color=\"white\" />\n        )}\n      </IconWrapper>\n      {isExpanded && wrappedChildren}\n    </span>\n  );\n}\n\nexport default Toggle;\n\nconst IconWrapper = styled('div')<{isExpanded: boolean}>`\n  border-radius: 2px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  ${p =>\n    p.isExpanded\n      ? `\n          background: ${p.theme.gray300};\n          border: 1px solid ${p.theme.gray300};\n          &:hover {\n            background: ${p.theme.gray400};\n          }\n        `\n      : `\n          background: ${p.theme.blue300};\n          border: 1px solid ${p.theme.blue300};\n          &:hover {\n            background: ${p.theme.blue200};\n          }\n        `}\n`;\n","export function looksLikeObjectRepr(value: string) {\n  const a = value[0];\n  const z = value[value.length - 1];\n\n  if (a === '<' && z === '>') {\n    return true;\n  }\n\n  if (a === '[' && z === ']') {\n    return true;\n  }\n\n  if (a === '(' && z === ')') {\n    return true;\n  }\n\n  if (z === ')' && value.match(/^[\\w\\d._-]+\\(/)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function looksLikeMultiLineString(value: string) {\n  return !!value.match(/[\\r\\n]/);\n}\n\nexport function padNumbersInString(string: string) {\n  return string.replace(/(\\d+)/g, (num: string) => {\n    let isNegative = false;\n    let realNum = parseInt(num, 10);\n    if (realNum < 0) {\n      realNum *= -1;\n      isNegative = true;\n    }\n    let s = '0000000000000' + realNum;\n    s = s.substr(s.length - (isNegative ? 11 : 12));\n    if (isNegative) {\n      s = '-' + s;\n    }\n    return s;\n  });\n}\n\nexport function naturalCaseInsensitiveSort(a: string, b: string) {\n  a = padNumbersInString(a).toLowerCase();\n  b = padNumbersInString(b).toLowerCase();\n  return a === b ? 0 : a < b ? -1 : 1;\n}\n\nexport function analyzeStringForRepr(value: string) {\n  const rv = {\n    repr: value,\n    isString: true,\n    isMultiLine: false,\n    isStripped: false,\n  };\n\n  // stripped for security reasons\n  if (value.match(/^['\"]?\\*{8,}['\"]?$/)) {\n    rv.isStripped = true;\n    return rv;\n  }\n\n  if (looksLikeObjectRepr(value)) {\n    rv.isString = false;\n    return rv;\n  }\n\n  rv.isMultiLine = looksLikeMultiLineString(value);\n  return rv;\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport isArray from 'lodash/isArray';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\n\nimport AnnotatedText from 'app/components/events/meta/annotatedText';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconOpen} from 'app/icons';\nimport {Meta} from 'app/types';\nimport {isUrl} from 'app/utils';\n\nimport Toggle from './toggle';\nimport {analyzeStringForRepr, naturalCaseInsensitiveSort} from './utils';\n\ntype Value = null | string | boolean | number | {[key: string]: Value} | Value[];\n\ntype Props = React.HTMLAttributes<HTMLPreElement> & {\n  data: Value;\n  preserveQuotes?: boolean;\n  withAnnotatedText?: boolean;\n  maxDefaultDepth?: number;\n  meta?: Meta;\n  jsonConsts?: boolean;\n};\n\ntype State = {\n  data: Value;\n  withAnnotatedText: boolean;\n};\n\nfunction getValueWithAnnotatedText(v: Value, meta?: Meta) {\n  return <AnnotatedText value={v} meta={meta} />;\n}\n\nclass ContextData extends React.Component<Props, State> {\n  static defaultProps = {\n    data: null,\n    withAnnotatedText: false,\n  };\n\n  renderValue(value: Value) {\n    const {preserveQuotes, meta, withAnnotatedText, jsonConsts, maxDefaultDepth} =\n      this.props;\n    const maxDepth = maxDefaultDepth ?? 2;\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    function walk(value: Value, depth: number) {\n      let i = 0;\n      const children: React.ReactNode[] = [];\n      if (value === null) {\n        return <span className=\"val-null\">{jsonConsts ? 'null' : 'None'}</span>;\n      }\n\n      if (value === true || value === false) {\n        return (\n          <span className=\"val-bool\">\n            {jsonConsts ? (value ? 'true' : 'false') : value ? 'True' : 'False'}\n          </span>\n        );\n      }\n\n      if (isString(value)) {\n        const valueInfo = analyzeStringForRepr(value);\n\n        const valueToBeReturned = withAnnotatedText\n          ? getValueWithAnnotatedText(valueInfo.repr, meta)\n          : valueInfo.repr;\n\n        const out = [\n          <span\n            key=\"value\"\n            className={\n              (valueInfo.isString ? 'val-string' : '') +\n              (valueInfo.isStripped ? ' val-stripped' : '') +\n              (valueInfo.isMultiLine ? ' val-string-multiline' : '')\n            }\n          >\n            {preserveQuotes ? `\"${valueToBeReturned}\"` : valueToBeReturned}\n          </span>,\n        ];\n\n        if (valueInfo.isString && isUrl(value)) {\n          out.push(\n            <ExternalLink key=\"external\" href={value} className=\"external-icon\">\n              <StyledIconOpen size=\"xs\" />\n            </ExternalLink>\n          );\n        }\n\n        return out;\n      }\n\n      if (isNumber(value)) {\n        const valueToBeReturned =\n          withAnnotatedText && meta ? getValueWithAnnotatedText(value, meta) : value;\n        return <span>{valueToBeReturned}</span>;\n      }\n\n      if (isArray(value)) {\n        for (i = 0; i < value.length; i++) {\n          children.push(\n            <span className=\"val-array-item\" key={i}>\n              {walk(value[i], depth + 1)}\n              {i < value.length - 1 ? (\n                <span className=\"val-array-sep\">{', '}</span>\n              ) : null}\n            </span>\n          );\n        }\n        return (\n          <span className=\"val-array\">\n            <span className=\"val-array-marker\">{'['}</span>\n            <Toggle highUp={depth <= maxDepth} wrapClassName=\"val-array-items\">\n              {children}\n            </Toggle>\n            <span className=\"val-array-marker\">{']'}</span>\n          </span>\n        );\n      }\n\n      if (React.isValidElement(value)) {\n        return value;\n      }\n\n      const keys = Object.keys(value);\n      keys.sort(naturalCaseInsensitiveSort);\n      for (i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        children.push(\n          <span className=\"val-dict-pair\" key={key}>\n            <span className=\"val-dict-key\">\n              <span className=\"val-string\">{preserveQuotes ? `\"${key}\"` : key}</span>\n            </span>\n            <span className=\"val-dict-col\">{': '}</span>\n            <span className=\"val-dict-value\">\n              {walk(value[key], depth + 1)}\n              {i < keys.length - 1 ? <span className=\"val-dict-sep\">{', '}</span> : null}\n            </span>\n          </span>\n        );\n      }\n      return (\n        <span className=\"val-dict\">\n          <span className=\"val-dict-marker\">{'{'}</span>\n          <Toggle highUp={depth <= maxDepth - 1} wrapClassName=\"val-dict-items\">\n            {children}\n          </Toggle>\n          <span className=\"val-dict-marker\">{'}'}</span>\n        </span>\n      );\n    }\n    return walk(value, 0);\n  }\n\n  render() {\n    const {\n      data,\n      preserveQuotes: _preserveQuotes,\n      withAnnotatedText: _withAnnotatedText,\n      meta: _meta,\n      children,\n      ...other\n    } = this.props;\n\n    return (\n      <pre {...other}>\n        {this.renderValue(data)}\n        {children}\n      </pre>\n    );\n  }\n}\n\nconst StyledIconOpen = styled(IconOpen)`\n  position: relative;\n  top: 1px;\n`;\n\nexport default ContextData;\n","import * as React from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {DataSection} from 'app/components/events/styles';\nimport {IconAnchor} from 'app/icons/iconAnchor';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {callIfFunction} from 'app/utils/callIfFunction';\n\nconst defaultProps = {\n  wrapTitle: true,\n  raw: false,\n  isCentered: false,\n  showPermalink: true,\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  title: React.ReactNode;\n  type: string;\n  toggleRaw?: (enable: boolean) => void;\n  actions?: React.ReactNode;\n  className?: string;\n} & DefaultProps;\n\nclass EventDataSection extends React.Component<Props> {\n  static defaultProps = defaultProps;\n\n  componentDidMount() {\n    const dataSectionDOM = this.dataSectionDOMRef.current;\n    if (location.hash && dataSectionDOM) {\n      const [, hash] = location.hash.split('#');\n\n      try {\n        const anchorElement = hash && dataSectionDOM.querySelector('div#' + hash);\n        if (anchorElement) {\n          anchorElement.scrollIntoView();\n        }\n      } catch {\n        // Since we're blindly taking the hash from the url and shoving\n        // it into a querySelector, it's possible that this may\n        // raise an exception if the input is invalid. So let's just ignore\n        // this instead of blowing up.\n        // e.g. `document.querySelector('div#=')`\n        // > Uncaught DOMException: Failed to execute 'querySelector' on 'Document': 'div#=' is not a valid selector.\n      }\n    }\n  }\n\n  dataSectionDOMRef = React.createRef<HTMLDivElement>();\n\n  render() {\n    const {\n      children,\n      className,\n      type,\n      title,\n      toggleRaw,\n      raw,\n      wrapTitle,\n      actions,\n      isCentered,\n      showPermalink,\n      ...props\n    } = this.props;\n\n    const titleNode = wrapTitle ? <h3>{title}</h3> : title;\n\n    return (\n      <DataSection ref={this.dataSectionDOMRef} className={className || ''} {...props}>\n        {title && (\n          <SectionHeader id={type} isCentered={isCentered}>\n            <Title>\n              {showPermalink ? (\n                <Permalink href={'#' + type} className=\"permalink\">\n                  <StyledIconAnchor />\n                  {titleNode}\n                </Permalink>\n              ) : (\n                titleNode\n              )}\n            </Title>\n            {type === 'extra' && (\n              <ButtonBar merged active={raw ? 'raw' : 'formatted'}>\n                <Button\n                  barId=\"formatted\"\n                  size=\"xsmall\"\n                  onClick={() => callIfFunction(toggleRaw, false)}\n                >\n                  {t('Formatted')}\n                </Button>\n                <Button\n                  barId=\"raw\"\n                  size=\"xsmall\"\n                  onClick={() => callIfFunction(toggleRaw, true)}\n                >\n                  {t('Raw')}\n                </Button>\n              </ButtonBar>\n            )}\n            {actions && <ActionContainer>{actions}</ActionContainer>}\n          </SectionHeader>\n        )}\n        <SectionContents>{children}</SectionContents>\n      </DataSection>\n    );\n  }\n}\n\nconst Title = styled('div')`\n  display: flex;\n`;\n\nconst StyledIconAnchor = styled(IconAnchor)`\n  display: none;\n  position: absolute;\n  top: 4px;\n  left: -22px;\n`;\n\nconst Permalink = styled('a')`\n  width: 100%;\n  :hover ${StyledIconAnchor} {\n    display: block;\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nconst SectionHeader = styled('div')<{isCentered?: boolean}>`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-bottom: ${space(1)};\n\n  > * {\n    margin-bottom: ${space(0.5)};\n  }\n\n  & h3,\n  & h3 a {\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 1.2;\n    color: ${p => p.theme.gray300};\n  }\n\n  & h3 {\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 1.2;\n    padding: ${space(0.75)} 0;\n    margin-bottom: 0;\n    text-transform: uppercase;\n  }\n\n  & small {\n    color: ${p => p.theme.textColor};\n    font-size: ${p => p.theme.fontSizeMedium};\n    margin-right: ${space(0.5)};\n    margin-left: ${space(0.5)};\n\n    text-transform: none;\n  }\n  & small > span {\n    color: ${p => p.theme.textColor};\n    border-bottom: 1px dotted ${p => p.theme.border};\n    font-weight: normal;\n  }\n\n  @media (min-width: ${props => props.theme.breakpoints[2]}) {\n    & > small {\n      margin-left: ${space(1)};\n      display: inline-block;\n    }\n  }\n\n  ${p =>\n    p.isCentered &&\n    css`\n      align-items: center;\n      @media (max-width: ${p.theme.breakpoints[0]}) {\n        display: block;\n      }\n    `}\n\n  >*:first-child {\n    position: relative;\n    flex-grow: 1;\n  }\n`;\n\nexport const SectionContents = styled('div')`\n  position: relative;\n`;\n\nconst ActionContainer = styled('div')`\n  flex-shrink: 0;\n  max-width: 100%;\n`;\n\nexport default EventDataSection;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport sortBy from 'lodash/sortBy';\n\nimport ContextData from 'app/components/contextData';\nimport AnnotatedText from 'app/components/events/meta/annotatedText';\nimport {KeyValueListData} from 'app/types';\nimport {defined} from 'app/utils';\nimport theme from 'app/utils/theme';\n\ntype Props = {\n  data?: KeyValueListData;\n  onClick?: () => void;\n  raw?: boolean;\n  longKeys?: boolean;\n  isContextData?: boolean;\n  isSorted?: boolean;\n};\n\nconst KeyValueList = ({\n  data,\n  isContextData = false,\n  isSorted = true,\n  raw = false,\n  longKeys = false,\n  onClick,\n}: Props) => {\n  if (!defined(data) || data.length === 0) {\n    return null;\n  }\n\n  const getData = () => {\n    if (isSorted) {\n      return sortBy(data, [({key}) => key.toLowerCase()]);\n    }\n    return data;\n  };\n\n  return (\n    <table className=\"table key-value\" onClick={onClick}>\n      <tbody>\n        {getData().map(\n          ({key, subject, value = null, meta, subjectIcon, subjectDataTestId}) => {\n            const dataValue: React.ReactNode =\n              typeof value === 'object' && !React.isValidElement(value)\n                ? JSON.stringify(value, null, 2)\n                : value;\n\n            let contentComponent: React.ReactNode = (\n              <pre className=\"val-string\">\n                <AnnotatedText value={dataValue} meta={meta} />\n                {subjectIcon}\n              </pre>\n            );\n\n            if (isContextData) {\n              contentComponent = (\n                <ContextData\n                  data={!raw ? value : JSON.stringify(value)}\n                  meta={meta}\n                  withAnnotatedText\n                >\n                  {subjectIcon}\n                </ContextData>\n              );\n            } else if (typeof dataValue !== 'string' && React.isValidElement(dataValue)) {\n              contentComponent = dataValue;\n            }\n\n            return (\n              <tr key={key}>\n                <TableSubject className=\"key\" wide={longKeys}>\n                  {subject}\n                </TableSubject>\n                <td className=\"val\" data-test-id={subjectDataTestId}>\n                  {contentComponent}\n                </td>\n              </tr>\n            );\n          }\n        )}\n      </tbody>\n    </table>\n  );\n};\n\nconst TableSubject = styled('td')<{wide?: boolean}>`\n  @media (min-width: ${theme.breakpoints[2]}) {\n    max-width: ${p => (p.wide ? '620px !important' : 'none')};\n  }\n`;\n\nKeyValueList.displayName = 'KeyValueList';\n\nexport default KeyValueList;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  children: React.ReactNode;\n  withoutBackground?: boolean;\n  className?: string;\n};\n\nconst Redaction = styled(({children, className}: Props) => (\n  <span className={className}>{children}</span>\n))`\n  cursor: default;\n  vertical-align: middle;\n  ${p => !p.withoutBackground && `background: rgba(255, 0, 0, 0.05);`}\n`;\nexport default Redaction;\n","import {t} from 'app/locale';\nimport {ChunkType} from 'app/types';\n\nconst REMARKS = {\n  a: 'Annotated',\n  x: 'Removed',\n  s: 'Replaced',\n  m: 'Masked',\n  p: 'Pseudonymized',\n  e: 'Encrypted',\n};\n\nconst KNOWN_RULES = {\n  '!limit': 'size limits',\n  '!raw': 'raw payload',\n  '!config': 'SDK configuration',\n};\n\nexport function getTooltipText({\n  remark = '',\n  rule_id: rule = '',\n}: Pick<ChunkType, 'remark' | 'rule_id'>) {\n  const remark_title = REMARKS[remark];\n  const rule_title = KNOWN_RULES[rule] || t('PII rule \"%s\"', rule);\n\n  if (remark_title) {\n    return t('%s because of %s', remark_title, rule_title);\n  }\n\n  return rule_title;\n}\n","import Tooltip from 'app/components/tooltip';\nimport {ChunkType} from 'app/types';\n\nimport Redaction from './redaction';\nimport {getTooltipText} from './utils';\n\ntype Props = {\n  chunk: ChunkType;\n};\n\nconst Chunk = ({chunk}: Props) => {\n  if (chunk.type === 'redaction') {\n    const title = getTooltipText({rule_id: chunk.rule_id, remark: chunk.remark});\n    return (\n      <Tooltip title={title}>\n        <Redaction>{chunk.text}</Redaction>\n      </Tooltip>\n    );\n  }\n\n  return <span>{chunk.text}</span>;\n};\n\nexport default Chunk;\n","import {cloneElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport {ChunkType} from 'app/types';\n\nimport Chunk from './chunk';\n\ntype Props = {\n  chunks: Array<ChunkType>;\n};\n\nconst Chunks = ({chunks}: Props) => (\n  <ChunksSpan>\n    {chunks.map((chunk, key) => cloneElement(<Chunk chunk={chunk} />, {key}))}\n  </ChunksSpan>\n);\n\nexport default Chunks;\n\nconst ChunksSpan = styled('span')`\n  span {\n    display: inline;\n  }\n`;\n","import * as React from 'react';\n\nimport {t} from 'app/locale';\nimport {Meta} from 'app/types';\n\nimport Redaction from './redaction';\n\ntype Props = {\n  value: React.ReactNode;\n  meta?: Meta;\n};\n\n// If you find yourself modifying this component to fix some tooltip bug,\n// consider that `meta` is not properly passed into this component in the\n// first place. It's much more likely that `withMeta` is buggy or improperly\n// used than that this component has a bug.\nconst ValueElement = ({value, meta}: Props) => {\n  if (value && meta) {\n    return <Redaction>{value}</Redaction>;\n  }\n\n  if (meta?.err?.length) {\n    return (\n      <Redaction withoutBackground>\n        <i>{`<${t('invalid')}>`}</i>\n      </Redaction>\n    );\n  }\n\n  if (meta?.rem?.length) {\n    return (\n      <Redaction>\n        <i>{`<${t('redacted')}>`}</i>\n      </Redaction>\n    );\n  }\n\n  if (React.isValidElement(value)) {\n    return value;\n  }\n\n  return (\n    <React.Fragment>\n      {typeof value === 'object' || typeof value === 'boolean'\n        ? JSON.stringify(value)\n        : value}\n    </React.Fragment>\n  );\n};\n\nexport default ValueElement;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport Tooltip from 'app/components/tooltip';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Meta, MetaError} from 'app/types';\n\nimport Chunks from './chunks';\nimport {getTooltipText} from './utils';\nimport ValueElement from './valueElement';\n\ntype Props = {\n  value: React.ReactNode;\n  meta?: Meta;\n  className?: string;\n};\n\nconst AnnotatedText = ({value, meta, className, ...props}: Props) => {\n  const renderValue = () => {\n    if (meta?.chunks?.length && meta.chunks.length > 1) {\n      return <Chunks chunks={meta.chunks} />;\n    }\n\n    const element = <ValueElement value={value} meta={meta} />;\n\n    if (meta?.rem?.length) {\n      const title = getTooltipText({rule_id: meta.rem[0][0], remark: meta.rem[0][1]});\n      return <Tooltip title={title}>{element}</Tooltip>;\n    }\n\n    return element;\n  };\n\n  const formatErrorKind = (kind: string) => {\n    return capitalize(kind.replace(/_/g, ' '));\n  };\n\n  const getErrorMessage = (error: MetaError) => {\n    const errorMessage: string[] = [];\n\n    if (Array.isArray(error)) {\n      if (error[0]) {\n        errorMessage.push(formatErrorKind(error[0]));\n      }\n\n      if (error[1]?.reason) {\n        errorMessage.push(`(${error[1].reason})`);\n      }\n    } else {\n      errorMessage.push(formatErrorKind(error));\n    }\n\n    return errorMessage.join(' ');\n  };\n\n  const getTooltipTitle = (errors: Array<MetaError>) => {\n    if (errors.length === 1) {\n      return <TooltipTitle>{t('Error: %s', getErrorMessage(errors[0]))}</TooltipTitle>;\n    }\n    return (\n      <TooltipTitle>\n        <span>{t('Errors:')}</span>\n        <StyledList symbol=\"bullet\">\n          {errors.map((error, index) => (\n            <ListItem key={index}>{getErrorMessage(error)}</ListItem>\n          ))}\n        </StyledList>\n      </TooltipTitle>\n    );\n  };\n\n  const renderErrors = (errors: Array<MetaError>) => {\n    if (!errors.length) {\n      return null;\n    }\n\n    return (\n      <StyledTooltipError title={getTooltipTitle(errors)}>\n        <StyledIconWarning color=\"red300\" />\n      </StyledTooltipError>\n    );\n  };\n\n  return (\n    <span className={className} {...props}>\n      {renderValue()}\n      {meta?.err && renderErrors(meta.err)}\n    </span>\n  );\n};\n\nexport default AnnotatedText;\n\nconst StyledTooltipError = styled(Tooltip)`\n  margin-left: ${space(0.75)};\n  vertical-align: middle;\n`;\n\nconst StyledList = styled(List)`\n  li {\n    padding-left: ${space(3)};\n    word-break: break-all;\n    :before {\n      border-color: ${p => p.theme.white};\n      top: 6px;\n    }\n  }\n`;\n\nconst TooltipTitle = styled('div')`\n  text-align: left;\n`;\n\nconst StyledIconWarning = styled(IconWarning)`\n  vertical-align: middle;\n`;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nexport const DataSection = styled('div')`\n  display: flex;\n  flex-direction: column;\n  padding: ${space(2)} 0;\n  border-top: 1px solid ${p => p.theme.innerBorder};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    padding: ${space(3)} ${space(4)} 0 40px;\n  }\n`;\n\ntype BannerProps = {\n  priority: 'default' | 'danger' | 'success';\n};\n\nfunction getColors({priority, theme}: BannerProps & {theme: Theme}) {\n  const COLORS = {\n    default: {\n      background: theme.backgroundSecondary,\n      border: theme.border,\n    },\n    danger: {\n      background: theme.alert.error.backgroundLight,\n      border: theme.alert.error.border,\n    },\n    success: {\n      background: theme.alert.success.backgroundLight,\n      border: theme.alert.success.border,\n    },\n  } as const;\n\n  return COLORS[priority];\n}\n\nexport const BannerContainer = styled('div')<BannerProps>`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  background: ${p => getColors(p).background};\n  border-top: 1px solid ${p => getColors(p).border};\n  border-bottom: 1px solid ${p => getColors(p).border};\n\n  /* Muted box & processing errors are in different parts of the DOM */\n  &\n    + ${/* sc-selector */ DataSection}:first-child,\n    &\n    + div\n    > ${/* sc-selector */ DataSection}:first-child {\n    border-top: 0;\n  }\n`;\n\nexport const BannerSummary = styled('p')`\n  display: flex;\n  align-items: flex-start;\n  padding: ${space(2)} ${space(4)} ${space(2)} 40px;\n  margin-bottom: 0;\n\n  /* Get icons in top right of content box */\n  & > .icon,\n  & > svg {\n    flex-shrink: 0;\n    flex-grow: 0;\n    margin-right: ${space(1)};\n    margin-top: 2px;\n  }\n\n  & > span {\n    flex-grow: 1;\n  }\n\n  & > a {\n    align-self: flex-end;\n  }\n`;\n\nexport const CauseHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${space(3)};\n\n  & button,\n  & h3 {\n    color: ${p => p.theme.gray300};\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 1.2;\n    text-transform: uppercase;\n  }\n\n  & h3 {\n    margin-bottom: 0;\n  }\n\n  & button {\n    background: none;\n    border: 0;\n    outline: none;\n    padding: 0;\n  }\n`;\n","import Reflux from 'reflux';\n\nimport NavigationActions from 'app/actions/navigationActions';\nimport OrganizationActions from 'app/actions/organizationActions';\nimport OrganizationsActions from 'app/actions/organizationsActions';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Organization, Project} from 'app/types';\n\ntype OrgTypes = Organization | null;\n\ntype State = {\n  project: Project | null;\n  lastProject: Project | null;\n  organization: OrgTypes;\n  environment: string | string[] | null;\n  lastRoute: string | null;\n};\n\ntype LatestContextStoreInterface = {\n  state: State;\n  reset(): void;\n  get(): State;\n  onSetLastRoute(route: string): void;\n  onUpdateOrganization(organization: OrgTypes): void;\n  onSetActiveOrganization(organization: OrgTypes): void;\n  onSetActiveProject(project: Project | null): void;\n  onUpdateProject(project: Project | null): void;\n};\n\n/**\n * Keeps track of last usable project/org this currently won't track when users\n * navigate out of a org/project completely, it tracks only if a user switches\n * into a new org/project.\n *\n * Only keep slug so that people don't get the idea to access org/project data\n * here Org/project data is currently in organizationsStore/projectsStore\n */\nconst storeConfig: Reflux.StoreDefinition & LatestContextStoreInterface = {\n  state: {\n    project: null,\n    lastProject: null,\n    organization: null,\n    environment: null,\n    lastRoute: null,\n  },\n\n  get() {\n    return this.state;\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(ProjectActions.setActive, this.onSetActiveProject);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateProject);\n    this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);\n    this.listenTo(OrganizationsActions.update, this.onUpdateOrganization);\n    this.listenTo(OrganizationActions.update, this.onUpdateOrganization);\n    this.listenTo(NavigationActions.setLastRoute, this.onSetLastRoute);\n  },\n\n  reset() {\n    this.state = {\n      project: null,\n      lastProject: null,\n      organization: null,\n      environment: null,\n      lastRoute: null,\n    };\n    return this.state;\n  },\n\n  onSetLastRoute(route) {\n    this.state = {\n      ...this.state,\n      lastRoute: route,\n    };\n\n    this.trigger(this.state);\n  },\n\n  onUpdateOrganization(org) {\n    // Don't do anything if base/target orgs are falsey\n    if (!this.state.organization) {\n      return;\n    }\n    if (!org) {\n      return;\n    }\n    // Check to make sure current active org is what has been updated\n    if (org.slug !== this.state.organization.slug) {\n      return;\n    }\n\n    this.state = {\n      ...this.state,\n      organization: org,\n    };\n    this.trigger(this.state);\n  },\n\n  onSetActiveOrganization(org) {\n    if (!org) {\n      this.state = {\n        ...this.state,\n        organization: null,\n        project: null,\n      };\n    } else if (!this.state.organization || this.state.organization.slug !== org.slug) {\n      // Update only if different\n      this.state = {\n        ...this.state,\n        organization: org,\n        project: null,\n      };\n    }\n\n    this.trigger(this.state);\n  },\n\n  onSetActiveProject(project) {\n    if (!project) {\n      this.state = {\n        ...this.state,\n        lastProject: this.state.project,\n        project: null,\n      };\n    } else if (!this.state.project || this.state.project.slug !== project.slug) {\n      // Update only if different\n      this.state = {\n        ...this.state,\n        lastProject: this.state.project,\n        project,\n      };\n    }\n\n    this.trigger(this.state);\n  },\n\n  onUpdateProject(project) {\n    this.state = {\n      ...this.state,\n      project,\n    };\n    this.trigger(this.state);\n  },\n};\n\nconst LatestContextStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  LatestContextStoreInterface;\n\nexport default LatestContextStore;\n","import * as React from 'react';\n\nimport ConfigStore from 'app/stores/configStore';\nimport LatestContextStore from 'app/stores/latestContextStore';\nimport {Organization, OrganizationSummary, Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganizations from 'app/utils/withOrganizations';\n\ntype InjectedLatestContextProps = {\n  organizations?: OrganizationSummary[];\n  organization?: Organization | null;\n  project?: Project | null;\n  lastRoute?: string | null;\n};\n\ntype HocProps = {\n  organization?: Organization | null;\n  organizations: OrganizationSummary[];\n};\n\ntype State = {\n  latestContext: Omit<InjectedLatestContextProps, 'organizations'>;\n};\n\nconst fallbackContext: State['latestContext'] = {\n  organization: null,\n  project: null,\n  lastRoute: null,\n};\n\nfunction withLatestContext<P extends InjectedLatestContextProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithLatestContext extends React.Component<\n    Omit<P, keyof InjectedLatestContextProps> & HocProps,\n    State\n  > {\n    static displayName = `withLatestContext(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      latestContext: LatestContextStore.get(),\n    };\n\n    componentWillUmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = LatestContextStore.listen(\n      (latestContext: State['latestContext']) => this.setState({latestContext}),\n      undefined\n    );\n\n    render() {\n      const {organizations} = this.props;\n      const {latestContext} = this.state;\n      const {organization, project, lastRoute} = latestContext || fallbackContext;\n\n      // Even though org details exists in LatestContextStore,\n      // fetch organization from OrganizationsStore so that we can\n      // expect consistent data structure because OrganizationsStore has a list\n      // of orgs but not full org details\n      const latestOrganization =\n        organization ||\n        (organizations && organizations.length\n          ? organizations.find(\n              ({slug}) => slug === ConfigStore.get('lastOrganization')\n            ) || organizations[0]\n          : null);\n\n      // TODO(billy): Below is going to be wrong if component is passed project, it will override\n      // project from `latestContext`\n      return (\n        <WrappedComponent\n          project={project as Project}\n          lastRoute={lastRoute}\n          {...(this.props as P)}\n          organization={(this.props.organization || latestOrganization) as Organization}\n        />\n      );\n    }\n  }\n  return withOrganizations(WithLatestContext);\n}\n\nexport default withLatestContext;\n"],"names":["Toggle","highUp","wrapClassName","children","isExpanded","setIsExpanded","useState","Children","wrappedChildren","className","IconWrapper","onClick","evt","preventDefault","size","color","p","theme","gray300","gray400","blue300","blue200","padNumbersInString","string","replace","num","isNegative","realNum","parseInt","s","substr","length","naturalCaseInsensitiveSort","a","b","toLowerCase","getValueWithAnnotatedText","v","meta","value","ContextData","React","renderValue","preserveQuotes","withAnnotatedText","jsonConsts","maxDefaultDepth","this","props","maxDepth","walk","depth","i","isString","valueInfo","rv","repr","isMultiLine","isStripped","match","z","looksLikeObjectRepr","looksLikeMultiLineString","analyzeStringForRepr","valueToBeReturned","out","isUrl","push","href","StyledIconOpen","isNumber","isArray","keys","Object","sort","key","render","data","_preserveQuotes","_withAnnotatedText","_meta","other","IconOpen","EventDataSection","componentDidMount","dataSectionDOM","dataSectionDOMRef","current","location","hash","split","anchorElement","querySelector","scrollIntoView","type","title","toggleRaw","raw","wrapTitle","actions","isCentered","showPermalink","titleNode","ref","SectionHeader","id","Title","Permalink","StyledIconAnchor","merged","active","barId","callIfFunction","t","ActionContainer","SectionContents","IconAnchor","space","textColor","fontSizeMedium","border","breakpoints","css","KeyValueList","isContextData","isSorted","longKeys","defined","sortBy","map","subject","subjectIcon","subjectDataTestId","dataValue","JSON","stringify","contentComponent","TableSubject","wide","displayName","withoutBackground","REMARKS","x","m","e","KNOWN_RULES","getTooltipText","remark","rule_id","rule","remark_title","rule_title","Chunk","chunk","text","Chunks","chunks","ChunksSpan","cloneElement","ValueElement","err","rem","AnnotatedText","formatErrorKind","kind","capitalize","getErrorMessage","error","errorMessage","Array","reason","join","element","errors","StyledTooltipError","TooltipTitle","StyledList","symbol","index","getTooltipTitle","StyledIconWarning","Tooltip","List","white","IconWarning","DataSection","innerBorder","getColors","priority","default","background","backgroundSecondary","danger","alert","backgroundLight","success","BannerContainer","BannerSummary","CauseHeader","storeConfig","state","project","lastProject","organization","environment","lastRoute","get","init","reset","listenTo","ProjectActions","onSetActiveProject","onUpdateProject","OrganizationsActions","onSetActiveOrganization","onUpdateOrganization","OrganizationActions","NavigationActions","onSetLastRoute","route","trigger","org","slug","Reflux","fallbackContext","WrappedComponent","WithLatestContext","latestContext","LatestContextStore","setState","undefined","componentWillUmount","unsubscribe","organizations","latestOrganization","find","ConfigStore","getDisplayName","withOrganizations"],"sourceRoot":""}