{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/model.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamActions.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {updateTeam} from 'app/actionCreators/teams';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nclass TeamFormModel extends FormModel {\n  public orgId: string;\n  public teamId: string;\n\n  constructor(orgId: string, teamId: string) {\n    super();\n    this.orgId = orgId;\n    this.teamId = teamId;\n  }\n\n  doApiRequest({data}) {\n    return new Promise((resolve, reject) =>\n      updateTeam(\n        this.api,\n        {\n          orgId: this.orgId,\n          teamId: this.teamId,\n          data,\n        },\n        {\n          success: resolve,\n          error: reject,\n        }\n      )\n    );\n  }\n}\n\nexport default TeamFormModel;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport teamSettingsFields from 'app/data/forms/teamSettingsFields';\nimport {IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization, Scope, Team} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nimport TeamModel from './model';\n\ntype Props = RouteComponentProps<{orgId: string; teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'];\n\nclass TeamSettings extends AsyncView<Props, State> {\n  model = new TeamModel(this.props.params.orgId, this.props.params.teamId);\n\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess = (resp: any, model: FormModel, id?: string) => {\n    updateTeamSuccess(resp.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      browserHistory.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    browserHistory.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {organization, team} = this.props;\n\n    const access = new Set<Scope>(organization.access);\n\n    return (\n      <Fragment>\n        <Form\n          model={this.model}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(TeamSettings);\n"],"names":["doCallback","params","name","args","callIfFunction","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamActions","fetchTeamDetails","options","teamId","request","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","route","title","fields","type","required","label","t","placeholder","help","disabled","access","has","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","str","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","TeamFormModel","FormModel","constructor","super","doApiRequest","Promise","resolve","reject","TeamSettings","TeamModel","props","resp","model","browserHistory","getValue","setState","loading","getEndpoints","renderBody","Set","Fragment","apiMethod","allowUndo","onSubmitSuccess","handleSubmitSuccess","onSubmitError","initialData","forms","teamSettingsFields","onConfirm","handleRemoveTeam","priority","message","icon","withOrganization"],"sourceRoot":""}