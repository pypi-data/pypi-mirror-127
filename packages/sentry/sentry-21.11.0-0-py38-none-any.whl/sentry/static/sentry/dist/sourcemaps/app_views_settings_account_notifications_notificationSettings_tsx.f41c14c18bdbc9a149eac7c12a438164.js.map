{"version":3,"file":"chunks/app_views_settings_account_notifications_notificationSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/views/settings/account/notifications/constants.tsx","webpack:///./app/views/settings/account/notifications/fields2.tsx","webpack:///./app/views/settings/account/notifications/notificationSettings.tsx","webpack:///./app/views/settings/account/notifications/parentLabel.tsx","webpack:///./app/views/settings/account/notifications/utils.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport space from 'app/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: React.ReactNode;\n};\n\ntype DefaultProps = {\n  size: Size;\n  priority: Priority;\n  withoutMarginBottom: boolean;\n  openInNewTab: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & Partial<DefaultProps> & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nfunction AlertLink({\n  size = 'normal',\n  priority = 'warning',\n  icon,\n  children,\n  onClick,\n  withoutMarginBottom = false,\n  openInNewTab = false,\n  to,\n  href,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  return (\n    <StyledLink\n      data-test-id={dataTestId}\n      to={to}\n      href={href}\n      onClick={onClick}\n      size={size}\n      priority={priority}\n      withoutMarginBottom={withoutMarginBottom}\n      openInNewTab={openInNewTab}\n    >\n      {icon && <IconWrapper>{icon}</IconWrapper>}\n      <AlertLinkText>{children}</AlertLinkText>\n      <IconLink>\n        <IconChevron direction=\"right\" />\n      </IconLink>\n    </StyledLink>\n  );\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","import {t} from 'app/locale';\n\nexport const ALL_PROVIDERS = {\n  email: 'default',\n  slack: 'never',\n};\n\n/**\n * These values are stolen from the DB.\n */\nexport const VALUE_MAPPING = {\n  default: 0,\n  never: 10,\n  always: 20,\n  subscribe_only: 30,\n  committed_only: 40,\n};\n\nexport const MIN_PROJECTS_FOR_CONFIRMATION = 3;\nexport const MIN_PROJECTS_FOR_SEARCH = 3;\nexport const MIN_PROJECTS_FOR_PAGINATION = 100;\n\nexport type NotificationSettingsByProviderObject = {[key: string]: string};\nexport type NotificationSettingsObject = {\n  [key: string]: {[key: string]: {[key: string]: NotificationSettingsByProviderObject}};\n};\n\nexport const NOTIFICATION_SETTINGS_TYPES = [\n  'alerts',\n  'workflow',\n  'deploy',\n  'approval',\n  'reports',\n  'email',\n];\n\nexport const SELF_NOTIFICATION_SETTINGS_TYPES = [\n  'personalActivityNotifications',\n  'selfAssignOnResolve',\n];\n\nexport const CONFIRMATION_MESSAGE = (\n  <div>\n    <p style={{marginBottom: '20px'}}>\n      <strong>Are you sure you want to disable these notifications?</strong>\n    </p>\n    <p>\n      {t(\n        'Turning this off will irreversibly overwrite all of your fine-tuning settings to \"off\".'\n      )}\n    </p>\n  </div>\n);\n","import * as React from 'react';\n\nimport {t} from 'app/locale';\n\nexport type NotificationSettingField = {\n  name: string;\n  type: 'select' | 'blank' | 'boolean';\n  label: string;\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n  help?: string;\n  confirm?: {[key: string]: React.ReactNode | string};\n};\n\nexport const NOTIFICATION_SETTING_FIELDS: Record<string, NotificationSettingField> = {\n  alerts: {\n    name: 'alerts',\n    type: 'select',\n    label: t('Issue Alerts'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications sent from Alert rules that your team has set up.'),\n  },\n  workflow: {\n    name: 'workflow',\n    type: 'select',\n    label: t('Issue Workflow'),\n    choices: [\n      ['always', t('On')],\n      ['subscribe_only', t('Only Subscribed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Changes in issue assignment, resolution status, and comments.'),\n  },\n  deploy: {\n    name: 'deploy',\n    type: 'select',\n    label: t('Deploys'),\n    choices: [\n      ['always', t('On')],\n      ['committed_only', t('Only Committed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Release, environment, and commit overviews.'),\n  },\n  provider: {\n    name: 'provider',\n    type: 'select',\n    label: t('Delivery Method'),\n    choices: [\n      ['email', t('Send to Email')],\n      ['slack', t('Send to Slack')],\n      ['email+slack', t('Send to Email and Slack')],\n    ],\n  },\n  approval: {\n    name: 'approval',\n    type: 'select',\n    label: t('Approvals'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications from teammates that require review or approval.'),\n  },\n  reports: {\n    name: 'weekly reports',\n    type: 'blank',\n    label: t('Weekly Reports'),\n    help: t('A summary of the past week for an organization.'),\n  },\n  email: {\n    name: 'email routing',\n    type: 'blank',\n    label: t('Email Routing'),\n    help: t('Change the email address that receives notifications.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('My Own Activity'),\n    help: t('Notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t('Claim Unassigned Issues I’ve Resolved'),\n    help: t('You’ll receive notifications about any changes that happen afterwards.'),\n  },\n};\n","import React from 'react';\n\nimport AlertLink from 'app/components/alertLink';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Link from 'app/components/links/link';\nimport {IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport {\n  CONFIRMATION_MESSAGE,\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'app/views/settings/account/notifications/constants';\nimport FeedbackAlert from 'app/views/settings/account/notifications/feedbackAlert';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'] & {\n  organizations: Organization[];\n};\n\ntype State = {\n  notificationSettings: NotificationSettingsObject;\n  legacyData: {[key: string]: string};\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  get notificationSettingsType() {\n    const hasApprovalFeatureFlag =\n      this.props.organizations.filter(org => org.features?.includes('slack-requests'))\n        .length > 0;\n    // filter out approvals if the feature flag isn't set\n    return NOTIFICATION_SETTINGS_TYPES.filter(\n      type => type !== 'approval' || hasApprovalFeatureFlag\n    );\n  }\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings} = this.state;\n\n    return Object.fromEntries(\n      this.notificationSettingsType.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationSettings} = this.state;\n\n    const fields: FieldObject[] = [];\n    for (const notificationType of this.notificationSettingsType) {\n      const field = Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        getData: data => this.getStateToPutForDefault(data, notificationType),\n        help: (\n          <React.Fragment>\n            <p>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link\n                data-test-id=\"fine-tuning\"\n                to={`/settings/account/notifications/${notificationType}`}\n              >\n                Fine tune\n              </Link>\n            </p>\n          </React.Fragment>\n        ),\n      }) as any;\n\n      if (\n        isSufficientlyComplex(notificationType, notificationSettings) &&\n        typeof field !== 'function'\n      ) {\n        field.confirm = {never: CONFIRMATION_MESSAGE};\n      }\n\n      fields.push(field);\n    }\n    return fields;\n  }\n\n  renderBody() {\n    const {legacyData} = this.state;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title=\"Notifications\" />\n        <TextBlock>Personal notifications sent via email or an integration.</TextBlock>\n        <FeedbackAlert />\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <Form\n          initialData={legacyData}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notifications/\"\n        >\n          <JsonForm\n            title={t('My Activity')}\n            fields={SELF_NOTIFICATION_SETTINGS_TYPES.map(\n              type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n            )}\n          />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettings);\n","import styled from '@emotion/styled';\n\nimport Avatar from 'app/components/avatar';\nimport space from 'app/styles/space';\nimport {OrganizationSummary, Project} from 'app/types';\nimport {getParentKey} from 'app/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationType: string;\n  parent: OrganizationSummary | Project;\n};\n\n// TODO(mgaeta): Infer parentKey from parent.\nconst ParentLabel = ({notificationType, parent}: Props) => (\n  <FieldLabel>\n    <Avatar\n      {...{\n        [getParentKey(notificationType)]: parent,\n      }}\n    />\n    <span>{parent.slug}</span>\n  </FieldLabel>\n);\n\nconst FieldLabel = styled('div')`\n  display: flex;\n  gap: ${space(0.5)};\n  line-height: 16px;\n`;\n\nexport default ParentLabel;\n","import set from 'lodash/set';\n\nimport {t} from 'app/locale';\nimport {OrganizationSummary, Project} from 'app/types';\nimport {\n  ALL_PROVIDERS,\n  MIN_PROJECTS_FOR_CONFIRMATION,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n  VALUE_MAPPING,\n} from 'app/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport ParentLabel from 'app/views/settings/account/notifications/parentLabel';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\n\n/**\n * Which fine-tuning parts are grouped by project\n */\nexport const isGroupedByProject = (notificationType: string): boolean =>\n  ['alerts', 'email', 'workflow'].includes(notificationType);\n\nexport const getParentKey = (notificationType: string): string => {\n  return isGroupedByProject(notificationType) ? 'project' : 'organization';\n};\n\nexport const groupByOrganization = (\n  projects: Project[]\n): Record<string, {organization: OrganizationSummary; projects: Project[]}> => {\n  return projects.reduce<\n    Record<string, {organization: OrganizationSummary; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getFallBackValue = (notificationType: string): string => {\n  switch (notificationType) {\n    case 'alerts':\n      return 'always';\n    case 'deploy':\n      return 'committed_only';\n    case 'workflow':\n      return 'subscribe_only';\n    default:\n      return '';\n  }\n};\n\nexport const providerListToString = (providers: string[]): string => {\n  return providers.sort().join('+');\n};\n\nexport const getChoiceString = (choices: string[][], key: string): string => {\n  if (!choices) {\n    return 'default';\n  }\n  const found = choices.find(row => row[0] === key);\n  if (!found) {\n    throw new Error(`Could not find ${key}`);\n  }\n\n  return found[1];\n};\n\nconst isDataAllNever = (data: {[key: string]: string}): boolean =>\n  !!Object.keys(data).length && Object.values(data).every(value => value === 'never');\n\nconst getNonNeverValue = (data: {[key: string]: string}): string | null =>\n  Object.values(data).reduce(\n    (previousValue: string | null, currentValue) =>\n      currentValue === 'never' ? previousValue : currentValue,\n    null\n  );\n\n/**\n * Transform `data`, a mapping of providers to values, so that all providers in\n * `providerList` are \"on\" in the resulting object. The \"on\" value is\n * determined by checking `data` for non-\"never\" values and falling back to the\n * value `fallbackValue`. The \"off\" value is either \"default\" or \"never\"\n * depending on whether `scopeType` is \"parent\" or \"user\" respectively.\n */\nexport const backfillMissingProvidersWithFallback = (\n  data: {[key: string]: string},\n  providerList: string[],\n  fallbackValue: string,\n  scopeType: string\n): NotificationSettingsByProviderObject => {\n  // First pass: What was this scope's previous value?\n  let existingValue;\n  if (scopeType === 'user') {\n    existingValue = isDataAllNever(data)\n      ? fallbackValue\n      : getNonNeverValue(data) || fallbackValue;\n  } else {\n    existingValue = isDataAllNever(data) ? 'never' : getNonNeverValue(data) || 'default';\n  }\n\n  // Second pass: Fill in values for every provider.\n  return Object.fromEntries(\n    Object.keys(ALL_PROVIDERS).map(provider => [\n      provider,\n      providerList.includes(provider) ? existingValue : 'never',\n    ])\n  );\n};\n\n/**\n * Deeply merge N notification settings objects (usually just 2).\n */\nexport const mergeNotificationSettings = (\n  ...objects: NotificationSettingsObject[]\n): NotificationSettingsObject => {\n  const output = {};\n  objects.map(settingsByType =>\n    Object.entries(settingsByType).map(([type, settingsByScopeType]) =>\n      Object.entries(settingsByScopeType).map(([scopeType, settingsByScopeId]) =>\n        Object.entries(settingsByScopeId).map(([scopeId, settingsByProvider]) => {\n          set(output, [type, scopeType, scopeId].join('.'), settingsByProvider);\n        })\n      )\n    )\n  );\n\n  return output;\n};\n\n/**\n * Get the mapping of providers to values that describe a user's parent-\n * independent notification preferences. The data from the API uses the user ID\n * rather than \"me\" so we assume the first ID is the user's.\n */\nexport const getUserDefaultValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): NotificationSettingsByProviderObject => {\n  return (\n    Object.values(notificationSettings[notificationType]?.user || {}).pop() ||\n    Object.fromEntries(\n      Object.entries(ALL_PROVIDERS).map(([provider, value]) => [\n        provider,\n        value === 'default' ? getFallBackValue(notificationType) : value,\n      ])\n    )\n  );\n};\n\n/**\n * Get the list of providers currently active on this page. Note: this can be empty.\n */\nexport const getCurrentProviders = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] => {\n  const userData = getUserDefaultValues(notificationType, notificationSettings);\n\n  return Object.entries(userData)\n    .filter(([_, value]) => !['never'].includes(value))\n    .map(([provider, _]) => provider);\n};\n\n/**\n * Calculate the currently selected provider.\n */\nexport const getCurrentDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const providersList = getCurrentProviders(notificationType, notificationSettings);\n  return providersList.length\n    ? getUserDefaultValues(notificationType, notificationSettings)[providersList[0]]\n    : 'never';\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\". If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const decideDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const compare = (a: string, b: string): number => VALUE_MAPPING[a] - VALUE_MAPPING[b];\n\n  const parentIndependentSetting =\n    Object.values(getUserDefaultValues(notificationType, notificationSettings))\n      .sort(compare)\n      .pop() || 'never';\n\n  if (parentIndependentSetting !== 'never') {\n    return parentIndependentSetting;\n  }\n\n  const parentSpecificSetting =\n    Object.values(\n      notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n    )\n      .flatMap(settingsByProvider => Object.values(settingsByProvider))\n      .sort(compare)\n      .pop() || 'default';\n\n  return parentSpecificSetting === 'default' ? 'never' : parentSpecificSetting;\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\"? If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const isEverythingDisabled = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  ['never', 'default'].includes(decideDefault(notificationType, notificationSettings));\n\n/**\n * Extract either the list of project or organization IDs from the notification\n * settings in state. This assumes that the notification settings object is\n * fully backfilled with settings for every parent.\n */\nexport const getParentIds = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] =>\n  Object.keys(\n    notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n  );\n\nexport const getParentValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parentId: string\n): NotificationSettingsByProviderObject =>\n  notificationSettings[notificationType]?.[getParentKey(notificationType)]?.[\n    parentId\n  ] || {\n    email: 'default',\n  };\n\n/**\n * Get a mapping of all parent IDs to the notification setting for the current\n * providers.\n */\nexport const getParentData = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parents: OrganizationSummary[] | Project[]\n): NotificationSettingsByProviderObject => {\n  const provider = getCurrentProviders(notificationType, notificationSettings)[0];\n\n  return Object.fromEntries(\n    parents.map(parent => [\n      parent.id,\n      getParentValues(notificationType, notificationSettings, parent.id)[provider],\n    ])\n  );\n};\n\n/**\n * Are there are more than N project or organization settings?\n */\nexport const isSufficientlyComplex = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  getParentIds(notificationType, notificationSettings).length >\n  MIN_PROJECTS_FOR_CONFIRMATION;\n\n/**\n * This is triggered when we change the Delivery Method select. Don't update the\n * provider for EVERY one of the user's projects and organizations, just the user\n * and parents that have explicit settings.\n */\nexport const getStateToPutForProvider = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject\n): NotificationSettingsObject => {\n  const providerList: string[] = changedData.provider.split('+');\n  const fallbackValue = getFallBackValue(notificationType);\n\n  // If the user has no settings, we need to create them.\n  if (!Object.keys(notificationSettings).length) {\n    return {\n      [notificationType]: {\n        user: {\n          me: Object.fromEntries(providerList.map(provider => [provider, fallbackValue])),\n        },\n      },\n    };\n  }\n\n  return {\n    [notificationType]: Object.fromEntries(\n      Object.entries(notificationSettings[notificationType]).map(\n        ([scopeType, scopeTypeData]) => [\n          scopeType,\n          Object.fromEntries(\n            Object.entries(scopeTypeData).map(([scopeId, scopeIdData]) => [\n              scopeId,\n              backfillMissingProvidersWithFallback(\n                scopeIdData,\n                providerList,\n                fallbackValue,\n                scopeType\n              ),\n            ])\n          ),\n        ]\n      )\n    ),\n  };\n};\n\n/**\n * Update the current providers' parent-independent notification settings with\n * the new value. If the new value is \"never\", then also update all\n * parent-specific notification settings to \"default\". If the previous value\n * was \"never\", then assume providerList should be \"email\" only.\n */\nexport const getStateToPutForDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentIds: string[]\n): NotificationSettingsObject => {\n  const newValue = Object.values(changedData)[0];\n  let providerList = getCurrentProviders(notificationType, notificationSettings);\n  if (!providerList.length) {\n    providerList = ['email'];\n  }\n\n  const updatedNotificationSettings = {\n    [notificationType]: {\n      user: {\n        me: Object.fromEntries(providerList.map(provider => [provider, newValue])),\n      },\n    },\n  };\n\n  if (newValue === 'never') {\n    updatedNotificationSettings[notificationType][getParentKey(notificationType)] =\n      Object.fromEntries(\n        parentIds.map(parentId => [\n          parentId,\n          Object.fromEntries(providerList.map(provider => [provider, 'default'])),\n        ])\n      );\n  }\n\n  return updatedNotificationSettings;\n};\n\n/**\n * Get the diff of the Notification Settings for this parent ID.\n */\nexport const getStateToPutForParent = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentId: string\n): NotificationSettingsObject => {\n  const providerList = getCurrentProviders(notificationType, notificationSettings);\n  const newValue = Object.values(changedData)[0];\n\n  return {\n    [notificationType]: {\n      [getParentKey(notificationType)]: {\n        [parentId]: Object.fromEntries(\n          providerList.map(provider => [provider, newValue])\n        ),\n      },\n    },\n  };\n};\n\n/**\n * Render each parent and add a default option to the the field choices.\n */\nexport const getParentField = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parent: OrganizationSummary | Project,\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject\n): FieldObject => {\n  const defaultFields = NOTIFICATION_SETTING_FIELDS[notificationType];\n\n  return Object.assign({}, defaultFields, {\n    label: <ParentLabel parent={parent} notificationType={notificationType} />,\n    getData: data => onChange(data, parent.id),\n    name: parent.id,\n    choices: defaultFields.choices?.concat([\n      [\n        'default',\n        `${t('Default')} (${getChoiceString(\n          defaultFields.choices,\n          getCurrentDefault(notificationType, notificationSettings)\n        )})`,\n      ],\n    ]),\n    defaultValue: 'default',\n    help: undefined,\n  }) as any;\n};\n"],"names":["AlertLink","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","IconWrapper","AlertLinkText","IconLink","direction","props","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","ALL_PROVIDERS","email","slack","VALUE_MAPPING","default","never","always","subscribe_only","committed_only","MIN_PROJECTS_FOR_CONFIRMATION","MIN_PROJECTS_FOR_SEARCH","MIN_PROJECTS_FOR_PAGINATION","NOTIFICATION_SETTINGS_TYPES","SELF_NOTIFICATION_SETTINGS_TYPES","CONFIRMATION_MESSAGE","style","marginBottom","t","NOTIFICATION_SETTING_FIELDS","alerts","name","type","label","choices","help","workflow","deploy","provider","approval","reports","personalActivityNotifications","selfAssignOnResolve","NotificationSettings","AsyncComponent","changedData","notificationType","notificationSettings","this","state","updatedNotificationSettings","getStateToPutForDefault","getParentIds","setState","mergeNotificationSettings","getDefaultState","super","legacyData","getEndpoints","hasApprovalFeatureFlag","organizations","filter","org","features","includes","length","getInitialData","Object","fromEntries","notificationSettingsType","map","decideDefault","getFields","fields","field","assign","getData","data","isSufficientlyComplex","confirm","push","renderBody","title","saveOnBlur","apiMethod","apiEndpoint","initialData","withOrganizations","ParentLabel","parent","FieldLabel","getParentKey","slug","isGroupedByProject","groupByOrganization","projects","reduce","acc","project","orgSlug","organization","hasOwnProperty","getFallBackValue","providerListToString","providers","sort","join","getChoiceString","key","found","find","row","Error","isDataAllNever","keys","values","every","value","getNonNeverValue","previousValue","currentValue","backfillMissingProvidersWithFallback","providerList","fallbackValue","scopeType","existingValue","objects","output","settingsByType","entries","settingsByScopeType","settingsByScopeId","scopeId","settingsByProvider","set","getUserDefaultValues","user","pop","getCurrentProviders","userData","_","getCurrentDefault","providersList","compare","a","b","parentIndependentSetting","parentSpecificSetting","flatMap","isEverythingDisabled","getParentValues","parentId","getParentData","parents","id","getStateToPutForProvider","split","scopeTypeData","scopeIdData","me","parentIds","newValue","getStateToPutForParent","getParentField","onChange","defaultFields","concat","defaultValue","undefined"],"sourceRoot":""}