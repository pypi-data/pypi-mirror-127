{"version":3,"file":"chunks/app_views_alerts_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8XAUA,MAAMA,UAAwBC,EAAAA,UAC5BC,SACE,MAAM,SAACC,EAAD,aAAWC,GAAgBC,KAAKC,MACtC,OACE,QAAC,IAAD,CAASF,aAAcA,EAAcG,SAAU,CAAC,aAAhD,SACG,EAAEC,WAAYC,MACb,QAAC,EAAAC,SAAD,UACGP,IAAYQ,EAAAA,EAAAA,gBAAeR,IACxBS,EAAAA,EAAAA,cAAaT,EAAU,CACrBC,aAAAA,EACAK,gBAAAA,IAEFN,OAZVH,EAAAA,YAAAA,kBAoBN,SAAea,EAAAA,EAAAA,GAAiBb","sources":["webpack:///./app/views/alerts/index.tsx"],"sourcesContent":["import {cloneElement, Component, Fragment, isValidElement} from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n};\n\nclass AlertsContainer extends Component<Props> {\n  render() {\n    const {children, organization} = this.props;\n    return (\n      <Feature organization={organization} features={['incidents']}>\n        {({hasFeature: hasMetricAlerts}) => (\n          <Fragment>\n            {children && isValidElement(children)\n              ? cloneElement(children, {\n                  organization,\n                  hasMetricAlerts,\n                })\n              : children}\n          </Fragment>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport default withOrganization(AlertsContainer);\n"],"names":["AlertsContainer","Component","render","children","organization","this","props","features","hasFeature","hasMetricAlerts","Fragment","isValidElement","cloneElement","withOrganization"],"sourceRoot":""}