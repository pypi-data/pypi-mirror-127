{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionOverview_tagExplorer_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {EventQuery} from 'app/actionCreators/events';\nimport {LocationQuery} from 'app/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'app/utils/discover/genericDiscoverQuery';\nimport withApi from 'app/utils/withApi';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  tags_key: string;\n  tags_value: string;\n  sumdelta: number;\n  count: number;\n  frequency: number;\n  aggregate: number;\n  comparison: number;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  allTagKeys?: boolean;\n  tagKey?: string;\n  sort?: string | string[];\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    sort?: string | string[];\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(SegmentExplorerQuery);\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport Feature from 'app/components/acl/feature';\nimport {GuideAnchor} from 'app/components/assistant/guideAnchor';\nimport Button from 'app/components/button';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport FeatureBadge from 'app/components/featureBadge';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'app/components/gridEditable';\nimport SortLink from 'app/components/gridEditable/sortLink';\nimport Link from 'app/components/links/link';\nimport Pagination, {CursorHandler} from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView, {fromSorts, isFieldSortable} from 'app/utils/discover/eventView';\nimport {fieldAlignment} from 'app/utils/discover/fields';\nimport {formatPercentage} from 'app/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'app/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'app/utils/queryString';\nimport {MutableSearch} from 'app/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'app/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'app/views/eventsV2/table/types';\n\nimport {\n  PerformanceDuration,\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../../utils';\nimport {SpanOperationBreakdownFilter} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nconst COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nconst filterToField = {\n  [SpanOperationBreakdownFilter.Browser]: 'spans.browser',\n  [SpanOperationBreakdownFilter.Http]: 'spans.http',\n  [SpanOperationBreakdownFilter.Db]: 'spans.db',\n  [SpanOperationBreakdownFilter.Resource]: 'spans.resource',\n};\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = filterToField[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = filterToField[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  eventView: EventView;\n  organization: Organization;\n  location: Location;\n  projects: Project[];\n  transactionName: string;\n  currentFilter: SpanOperationBreakdownFilter;\n};\n\ntype State = {\n  widths: number[];\n};\nclass _TagExplorer extends React.Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.sort',\n      eventName: 'Performance Views: Tag Explorer Sorted',\n      organization_id: parseInt(organization.id, 10),\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.tag_value',\n      eventName: 'Performance Views: Tag Explorer Value Clicked',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAnalyticsEvent({\n        eventKey: 'performance_views.summary.tag_explorer.cell_action',\n        eventName: 'Performance Views: Tag Explorer Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n      });\n\n      const searchConditions = new MutableSearch(eventView.query);\n\n      // remove any event.type queries since it is implied to apply to only transactions\n      searchConditions.removeFilter('event.type');\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.visit_tag_key',\n      eventName: 'Performance Views: Tag Explorer - Visit Tag Key',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Feature features={['performance-tag-page']} organization={organization}>\n          {({hasFeature}) => {\n            if (hasFeature) {\n              return (\n                <Link to={target} onClick={() => this.onTagKeyClick()}>\n                  {dataRow.tags_key}\n                </Link>\n              );\n            }\n            return dataRow.tags_key;\n          }}\n        </Feature>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <Feature features={['performance-tag-page']} organization={organization}>\n            {({hasFeature}) => {\n              if (hasFeature) {\n                return <div className=\"truncate\">{dataRow.tags_value}</div>;\n              }\n              return (\n                <Link\n                  to=\"\"\n                  onClick={() =>\n                    this.handleTagValueClick(\n                      location,\n                      dataRow.tags_key,\n                      dataRow.tags_value\n                    )\n                  }\n                >\n                  <TagValue row={dataRow} />\n                </Link>\n              );\n            }}\n          </Feature>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <React.Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </React.Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  organization: Organization;\n  transactionName: string;\n  location: Location;\n  pageLinks: string | null;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.change_page',\n      eventName: 'Performance Views: Tag Explorer Change Page',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.change_page',\n      eventName: 'Performance Views: Tag Explorer Change Page',\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n        <FeatureBadge type=\"new\" />\n      </div>\n      <Feature features={['performance-tag-page']} organization={organization}>\n        <Button\n          onClick={handleViewAllTagsClick}\n          to={viewAllTarget}\n          size=\"small\"\n          data-test-id=\"tags-explorer-open-tags\"\n        >\n          {t('View All Tags')}\n        </Button>\n      </Feature>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"small\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n\nexport const TagExplorer = _TagExplorer;\n"],"names":["getRequestFunction","_props","aggregateColumn","props","eventView","apiPayload","getEventsAPIPayload","location","sort","allTagKeys","tagKey","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","route","getRequestPayload","withApi","TAGS_CURSOR_NAME","COLUMN_ORDER","key","field","name","width","column","kind","canSort","filterToField","SpanOperationBreakdownFilter","getTransactionField","currentFilter","projects","fieldFromFilter","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","row","tags_value","_TagExplorer","React","widths","columnIndex","nextColumn","this","state","Number","COL_WIDTH_UNDEFINED","setState","columns","map","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","organization","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","queryString","decodeScalar","query","conditions","MutableSearch","addFilterValues","formatString","browserHistory","pathname","String","trim","actionRow","action","searchConditions","removeFilter","updateQuery","undefined","parentProps","dataRow","value","transactionName","target","tagsRouteWithQuery","orgSlug","slug","transaction","projectID","project","tags_key","features","hasFeature","to","onClick","onTagKeyClick","allowActions","Actions","handleCellAction","handleTagValueClick","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","abbreviation","milliseconds","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","title","generateSortLink","nextEventView","sortOnField","generateQueryStringObject","tagSort","render","cursor","tagEventView","clone","fields","tagSorts","fromSorts","withSorts","length","adjustedColumns","c","durationColumn","find","getColumnsWithReplacedDuration","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","TagsHeader","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","size","StyledPagination","onCursor","space","Pagination","TagExplorer"],"sourceRoot":""}