{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamActions.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'app/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelHeader, PanelItem} from 'app/components/panels';\nimport {IconSubtract, IconUser} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Config, Member, Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype RouteParams = {\n  orgId: string;\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  dropdownBusy: boolean;\n  teamMemberList: Member[];\n  orgMemberList: Member[];\n};\n\nclass TeamMembers extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    dropdownBusy: false,\n    teamMemberList: [],\n    orgMemberList: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  removeMember(member: Member) {\n    const {params} = this.props;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMemberList: this.state.teamMemberList.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  }\n\n  fetchMembersRequest = async (query: string) => {\n    const {params, api} = this.props;\n    const {orgId} = params;\n\n    try {\n      const data = await api.requestPromise(`/organizations/${orgId}/members/`, {\n        query: {query},\n      });\n      this.setState({\n        orgMemberList: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/teams/${params.orgId}/${params.teamId}/members/`\n      );\n      this.setState({\n        teamMemberList: data,\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n      });\n    }\n\n    this.fetchMembersRequest('');\n  };\n\n  addTeamMember = (selection: Item) => {\n    const {params} = this.props;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = this.state.orgMemberList.find(\n            member => member.id === selection.value\n          );\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMemberList: this.state.teamMemberList.concat([orgMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n          });\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean) {\n    const {organization, params} = this.props;\n    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (this.state.orgMemberList || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: params.orgId,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xsmall\" data-test-id=\"add-member\">\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  removeButton(member: Member) {\n    return (\n      <Button\n        size=\"small\"\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={() => this.removeMember(member)}\n        label={t('Remove')}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {params, organization, config} = this.props;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <div>{t('Members')}</div>\n          <div style={{textTransform: 'none'}}>{this.renderDropdown(hasWriteAccess)}</div>\n        </PanelHeader>\n        {this.state.teamMemberList.length ? (\n          this.state.teamMemberList.map(member => {\n            const isSelf = member.email === config.user.email;\n            const canRemoveMember = hasWriteAccess || isSelf;\n            return (\n              <StyledMemberContainer key={member.id}>\n                <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />\n                {canRemoveMember && this.removeButton(member)}\n              </StyledMemberContainer>\n            );\n          })\n        ) : (\n          <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n            {t('This team has no members')}\n          </EmptyMessage>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst StyledMemberContainer = styled(PanelItem)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"names":["doCallback","params","name","args","callIfFunction","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamActions","fetchTeamDetails","options","teamId","request","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","TeamMembers","React","loading","dropdownBusy","teamMemberList","orgMemberList","debounce","query","this","setState","fetchMembersRequest","props","_err","t","duration","selection","debouncedFetchMembersRequest","value","orgMember","state","find","member","undefined","concat","e","target","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","removeMember","filter","m","renderDropdown","hasWriteAccess","existingMembers","Set","map","canAddMembers","openMembership","items","has","searchKey","email","label","StyledUserListElement","StyledAvatar","user","size","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","onClick","openInviteMembersModal","source","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","onChange","handleMemberFilterChange","busy","onClose","isOpen","removeButton","icon","isCircled","render","onRetry","config","access","includes","hasButtons","style","textTransform","length","isSelf","canRemoveMember","StyledMemberContainer","avatarSize","useLink","PanelItem","space","p","theme","fontSizeSmall","overflowEllipsis","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"sourceRoot":""}