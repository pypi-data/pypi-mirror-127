{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupEvents_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/role.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/components/fileSize.tsx","webpack:///./app/utils/attachmentUrl.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/components/eventsTable/eventsTableRow.tsx","webpack:///./app/components/eventsTable/eventsTable.tsx","webpack:///./app/views/organizationGroupDetails/groupEvents.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport ConfigStore from 'app/stores/configStore';\nimport {Organization} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype RoleRenderProps = {\n  hasRole: boolean;\n};\n\ntype ChildrenRenderFn = (props: RoleRenderProps) => React.ReactNode;\n\ntype Props = {\n  /**\n   * Minimum required role\n   */\n  role: string;\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed RoleRenderProps.\n   *\n   * The other interface is more simple, only show `children` if user has\n   * the minimum required role.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n};\n\nclass Role extends React.Component<Props> {\n  hasRole() {\n    const user = ConfigStore.get('user');\n    const {organization, role} = this.props;\n    const {availableRoles} = organization;\n\n    const currentRole = organization.role ?? '';\n\n    if (!user) {\n      return false;\n    }\n\n    if (isActiveSuperuser()) {\n      return true;\n    }\n\n    if (!Array.isArray(availableRoles)) {\n      return false;\n    }\n\n    const roleIds = availableRoles.map(r => r.id);\n\n    if (!roleIds.includes(role) || !roleIds.includes(currentRole)) {\n      return false;\n    }\n\n    const requiredIndex = roleIds.indexOf(role);\n    const currentIndex = roleIds.indexOf(currentRole);\n    return currentIndex >= requiredIndex;\n  }\n\n  render() {\n    const {children} = this.props;\n    const hasRole = this.hasRole();\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({hasRole});\n    }\n\n    return hasRole && children ? children : null;\n  }\n}\n\nexport default withOrganization(Role);\n","import * as React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import('ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport {formatBytesBase2} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\n\ntype Props = {\n  className?: string;\n  bytes: number;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <Span className={className}>\n      {getDynamicText({value: formatBytesBase2(bytes), fixed: 'xx KB'})}\n    </Span>\n  );\n}\n\nconst Span = styled('span')`\n  font-variant-numeric: tabular-nums;\n`;\n\nexport default FileSize;\n","import {memo, ReactNode} from 'react';\n\nimport Role from 'app/components/acl/role';\nimport {IssueAttachment, Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n  projectId: string;\n  eventId: string;\n  attachment: IssueAttachment;\n  children: (downloadUrl: string | null) => ReactNode;\n};\n\nfunction AttachmentUrl({attachment, organization, eventId, projectId, children}: Props) {\n  function getDownloadUrl() {\n    return `/api/0/projects/${organization.slug}/${projectId}/events/${eventId}/attachments/${attachment.id}/`;\n  }\n\n  return (\n    <Role role={organization.attachmentsRole}>\n      {({hasRole}) => children(hasRole ? getDownloadUrl() : null)}\n    </Role>\n  );\n}\n\nexport default withOrganization(memo(AttachmentUrl));\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import * as React from 'react';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport DateTime from 'app/components/dateTime';\nimport DeviceName from 'app/components/deviceName';\nimport FileSize from 'app/components/fileSize';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport {AvatarUser, Organization, Tag} from 'app/types';\nimport {Event} from 'app/types/event';\nimport AttachmentUrl from 'app/utils/attachmentUrl';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  hasUser?: boolean;\n  orgId: string;\n  groupId: string;\n  projectId: string;\n  event: Event;\n  tagList: Tag[];\n  organization: Organization;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nclass EventsTableRow extends React.Component<Props> {\n  renderCrashFileLink() {\n    const {event, projectId} = this.props;\n    if (!event.crashFile) {\n      return null;\n    }\n\n    const crashFileType =\n      event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';\n\n    return (\n      <AttachmentUrl\n        projectId={projectId}\n        eventId={event.id}\n        attachment={event.crashFile}\n      >\n        {url =>\n          url && (\n            <small>\n              {crashFileType}: <a href={`${url}?download=1`}>{event.crashFile?.name}</a> (\n              <FileSize bytes={event.crashFile?.size || 0} />)\n            </small>\n          )\n        }\n      </AttachmentUrl>\n    );\n  }\n\n  render() {\n    const {className, event, orgId, groupId, tagList, hasUser} = this.props;\n    const tagMap = {};\n    event.tags.forEach(tag => {\n      tagMap[tag.key] = tag.value;\n    });\n    const link = `/organizations/${orgId}/issues/${groupId}/events/${event.id}/`;\n\n    return (\n      <tr key={event.id} className={className}>\n        <td>\n          <h5>\n            <GlobalSelectionLink to={link}>\n              <DateTime date={event.dateCreated} />\n            </GlobalSelectionLink>\n            <small>{event.title.substr(0, 100)}</small>\n            {this.renderCrashFileLink()}\n          </h5>\n        </td>\n\n        {hasUser && (\n          <td className=\"event-user table-user-info\">\n            {event.user ? (\n              <div>\n                <UserAvatar\n                  user={event.user as AvatarUser} // TODO(ts): Some of the user fields are optional from event, this cast can probably be removed in the future\n                  size={24}\n                  className=\"avatar\"\n                  gravatar={false}\n                />\n                {event.user.email}\n              </div>\n            ) : (\n              <span>—</span>\n            )}\n          </td>\n        )}\n\n        {tagList.map(tag => (\n          <td key={tag.key}>\n            <div>\n              {tag.key === 'device' ? (\n                <DeviceName value={tagMap[tag.key]} />\n              ) : (\n                tagMap[tag.key]\n              )}\n            </div>\n          </td>\n        ))}\n      </tr>\n    );\n  }\n}\n\nexport {EventsTableRow};\nexport default withOrganization(EventsTableRow);\n","import {Component} from 'react';\n\nimport EventsTableRow from 'app/components/eventsTable/eventsTableRow';\nimport {t} from 'app/locale';\nimport {Tag} from 'app/types';\nimport {Event} from 'app/types/event';\n\ntype Props = {\n  events: Event[];\n  tagList: Tag[];\n  orgId: string;\n  projectId: string;\n  groupId: string;\n};\nclass EventsTable extends Component<Props> {\n  render() {\n    const {events, tagList, orgId, projectId, groupId} = this.props;\n\n    const hasUser = !!events.find(event => event.user);\n\n    return (\n      <table className=\"table events-table\">\n        <thead>\n          <tr>\n            <th>{t('ID')}</th>\n            {hasUser && <th>{t('User')}</th>}\n\n            {tagList.map(tag => (\n              <th key={tag.key}>{tag.name}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {events.map(event => (\n            <EventsTableRow\n              key={event.id}\n              event={event}\n              orgId={orgId}\n              projectId={projectId}\n              groupId={groupId}\n              tagList={tagList}\n              hasUser={hasUser}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default EventsTable;\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'app/api';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport EventsTable from 'app/components/eventsTable/eventsTable';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport {t} from 'app/locale';\nimport {Group} from 'app/types';\nimport {Event} from 'app/types/event';\nimport parseApiError from 'app/utils/parseApiError';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  group: Group;\n} & RouteComponentProps<{groupId: string; orgId: string}, {}>;\n\ntype State = {\n  eventList: Event[];\n  loading: boolean;\n  error: string | false;\n  pageLinks: string;\n  query: string;\n};\n\nclass GroupEvents extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n    this.state = {\n      eventList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  handleSearch = (query: string) => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {groupId, orgId} = this.props.params;\n\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,\n      query: targetQueryParams,\n    });\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const query = {\n      ...pick(this.props.location.query, ['cursor', 'environment']),\n      limit: 50,\n      query: this.state.query,\n    };\n\n    this.props.api.request(`/issues/${this.props.params.groupId}/events/`, {\n      query,\n      method: 'GET',\n      success: (data, _, resp) => {\n        this.setState({\n          eventList: data,\n          error: false,\n          loading: false,\n          pageLinks: resp?.getResponseHeader('Link') ?? '',\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          loading: false,\n        });\n      },\n    });\n  };\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no events match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <EmptyStateWarning>\n        <p>{t(\"There don't seem to be any events yet.\")}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderResults() {\n    const {group, params} = this.props;\n    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];\n\n    return (\n      <EventsTable\n        tagList={tagList}\n        events={this.state.eventList}\n        orgId={params.orgId}\n        projectId={group.project.slug}\n        groupId={params.groupId}\n      />\n    );\n  }\n\n  renderBody() {\n    let body: React.ReactNode;\n\n    if (this.state.loading) {\n      body = <LoadingIndicator />;\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.eventList.length > 0) {\n      body = this.renderResults();\n    } else if (this.state.query && this.state.query !== '') {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <SearchBar\n            defaultQuery=\"\"\n            placeholder={t('search event id, message, or tags')}\n            query={this.state.query}\n            onSearch={this.handleSearch}\n          />\n        </div>\n        <Panel className=\"event-list\">\n          <PanelBody>{this.renderBody()}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport {GroupEvents};\n\nexport default withApi(GroupEvents);\n"],"names":["Role","React","hasRole","user","ConfigStore","organization","role","this","props","availableRoles","currentRole","isActiveSuperuser","Array","isArray","roleIds","map","r","id","includes","requiredIndex","indexOf","render","children","isRenderFunc","withOrganization","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","async","loadDeviceListModule","DeviceName","constructor","super","state","componentDidMount","_isMounted","then","setState","componentWillUnmount","value","deviceName","FileSize","className","bytes","Span","getDynamicText","formatBytesBase2","fixed","AttachmentUrl","attachment","eventId","projectId","attachmentsRole","slug","memo","isSuperuser","Cookies","EventsTableRow","renderCrashFileLink","event","crashFile","crashFileType","type","url","href","name","size","orgId","groupId","tagList","hasUser","tagMap","tags","forEach","tag","key","link","to","date","dateCreated","title","substr","gravatar","email","EventsTable","Component","events","find","t","GroupEvents","query","targetQueryParams","location","params","browserHistory","pathname","loading","error","pick","limit","api","request","method","success","data","_","resp","eventList","pageLinks","getResponseHeader","err","parseApiError","queryParams","UNSAFE_componentWillMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","search","renderNoQueryResults","renderEmpty","renderResults","group","filter","project","renderBody","body","message","onRetry","length","style","marginBottom","defaultQuery","placeholder","onSearch","handleSearch","withApi"],"sourceRoot":""}