{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_components_sentryDocumentTitle_tsx-app_utils_useTeams-df7ebe.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/useTeams.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {ClassNames} from '@emotion/react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport {Client} from 'app/api';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const semverTags = organization.features.includes('semver')\n      ? Object.assign({}, SEMVER_TAGS, fieldTags)\n      : fieldTags;\n\n    const combined = assign({}, tags, semverTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    const {organization} = this.props;\n    return (\n      <Measurements organization={organization}>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                  {...this.props}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import * as React from 'react';\n\nimport {Organization} from 'app/types';\nimport {MobileVital, WebVital} from 'app/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'app/utils/performance/vitals/constants';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  organization: Organization;\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({organization, children}: Props) {\n  const measurements = organization.features.includes('performance-mobile-vitals')\n    ? {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS}\n    : WEB_MEASUREMENTS;\n  return <React.Fragment>{children({measurements})}</React.Fragment>;\n}\n\nexport default Measurements;\n","import {useEffect, useRef, useState} from 'react';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {fetchUserTeams} from 'app/actionCreators/teams';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport OrganizationStore from 'app/stores/organizationStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {useLegacyStore} from 'app/stores/useLegacyStore';\nimport {Team} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport parseLinkHeader from 'app/utils/parseLinkHeader';\nimport RequestError from 'app/utils/requestError/requestError';\nimport useApi from 'app/utils/useApi';\n\ntype State = {\n  /**\n   * Reflects whether or not the initial fetch for the requested teams was\n   * fulfilled\n   */\n  initiallyLoaded: boolean;\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n  /**\n   * Indicates that Team results (from API) are paginated and there are more\n   * Teams that are not in the initial response.\n   */\n  hasMore: null | boolean;\n  /**\n   * The last query we searched. Used to validate the cursor\n   */\n  lastSearch: null | string;\n  /**\n   * Pagination\n   */\n  nextCursor?: null | string;\n};\n\nexport type Result = {\n  /**\n   * The loaded teams list\n   */\n  teams: Team[];\n  /**\n   * This is an action provided to consumers for them to update the current\n   * teams result set using a simple search query.\n   *\n   * Will always add new options into the store.\n   */\n  onSearch: (searchTerm: string) => Promise<void>;\n} & Pick<State, 'fetching' | 'hasMore' | 'fetchError' | 'initiallyLoaded'>;\n\ntype Options = {\n  /**\n   * Number of teams to return when not using `props.slugs`\n   */\n  limit?: number;\n  /**\n   * When provided, fetches specified teams by slug if necessary and only provides those teams.\n   */\n  slugs?: string[];\n  /**\n   * When true, fetches user's teams if necessary and only provides user's\n   * teams (isMember = true).\n   */\n  provideUserTeams?: boolean;\n};\n\ntype FetchTeamOptions = {\n  slugs?: string[];\n  limit?: Options['limit'];\n  cursor?: State['nextCursor'];\n  search?: State['lastSearch'];\n  lastSearch?: State['lastSearch'];\n};\n\n/**\n * Helper function to actually load teams\n */\nasync function fetchTeams(\n  api: Client,\n  orgId: string,\n  {slugs, search, limit, lastSearch, cursor}: FetchTeamOptions = {}\n) {\n  const query: {\n    query?: string;\n    cursor?: typeof cursor;\n    per_page?: number;\n  } = {};\n\n  if (slugs !== undefined && slugs.length > 0) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ?? ''} ${search}`.trim();\n  }\n\n  const isSameSearch = lastSearch === search || (!lastSearch && !search);\n\n  if (isSameSearch && cursor) {\n    query.cursor = cursor;\n  }\n\n  if (limit !== undefined) {\n    query.per_page = limit;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/teams/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore = paginationObject?.next?.results || paginationObject?.previous?.results;\n    nextCursor = paginationObject?.next?.cursor;\n  }\n\n  return {results: data, hasMore, nextCursor};\n}\n\n// TODO: Paging for items which have already exist in the store is not\n// correctly implemented.\n\n/**\n * Provides teams from the TeamStore\n *\n * This hook also provides a way to select specific slugs to ensure they are\n * loaded, as well as search (type-ahead) for more slugs that may not be in the\n * TeamsStore.\n *\n * NOTE: It is NOT guaranteed that all teams for an organization will be\n * loaded, so you should use this hook with the intention of providing specific\n * slugs, or loading more through search.\n *\n */\nfunction useTeams({limit, slugs, provideUserTeams}: Options = {}) {\n  const api = useApi();\n  const {organization} = useLegacyStore(OrganizationStore);\n  const store = useLegacyStore(TeamStore);\n\n  const orgId = organization?.slug;\n\n  const storeSlugs = new Set(store.teams.map(t => t.slug));\n  const slugsToLoad = slugs?.filter(slug => !storeSlugs.has(slug)) ?? [];\n  const shouldLoadSlugs = slugsToLoad.length > 0;\n  const shouldLoadTeams = provideUserTeams && !store.loadedUserTeams;\n\n  // If we don't need to make a request either for slugs or user teams, set\n  // initiallyLoaded to true\n  const initiallyLoaded = !shouldLoadSlugs && !shouldLoadTeams;\n\n  const [state, setState] = useState<State>({\n    initiallyLoaded,\n    fetching: false,\n    hasMore: null,\n    lastSearch: null,\n    nextCursor: null,\n    fetchError: null,\n  });\n\n  const slugsRef = useRef<Set<string> | null>(null);\n\n  // Only initialize slugsRef.current once and modify it when we receive new\n  // slugs determined through set equality\n  if (slugs !== undefined) {\n    if (slugsRef.current === null) {\n      slugsRef.current = new Set(slugs);\n    }\n\n    if (\n      slugs.length !== slugsRef.current.size ||\n      slugs.some(slug => !slugsRef.current?.has(slug))\n    ) {\n      slugsRef.current = new Set(slugs);\n    }\n  }\n\n  async function loadUserTeams() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      await fetchUserTeams(api, {orgId});\n\n      setState({...state, fetching: false, initiallyLoaded: true});\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function loadTeamsBySlug() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        slugs: slugsToLoad,\n        limit,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n      TeamActions.loadTeams(fetchedTeams);\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        initiallyLoaded: true,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function handleSearch(search: string) {\n    const {lastSearch} = state;\n    const cursor = state.nextCursor;\n\n    if (search === '') {\n      return;\n    }\n\n    if (orgId === undefined) {\n      // eslint-disable-next-line no-console\n      console.error('Cannot use useTeam.onSearch without an organization in context');\n      return;\n    }\n\n    setState({...state, fetching: true});\n\n    try {\n      api.clear();\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        search,\n        limit,\n        lastSearch,\n        cursor,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n\n      // Only update the store if we have more items\n      if (fetchedTeams.length > store.teams.length) {\n        TeamActions.loadTeams(fetchedTeams);\n      }\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        lastSearch: search,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, fetchError: err});\n    }\n  }\n\n  useEffect(() => {\n    // Load specified team slugs\n    if (shouldLoadSlugs) {\n      loadTeamsBySlug();\n      return;\n    }\n\n    // Load user teams\n    if (shouldLoadTeams) {\n      loadUserTeams();\n    }\n  }, [slugsRef.current, provideUserTeams]);\n\n  const isSuperuser = isActiveSuperuser();\n\n  const filteredTeams = slugs\n    ? store.teams.filter(t => slugs.includes(t.slug))\n    : provideUserTeams && !isSuperuser\n    ? store.teams.filter(t => t.isMember)\n    : store.teams;\n\n  const result: Result = {\n    teams: filteredTeams,\n    fetching: state.fetching || store.loading,\n    initiallyLoaded: state.initiallyLoaded,\n    fetchError: state.fetchError,\n    hasMore: state.hasMore,\n    onSearch: handleSearch,\n  };\n\n  return result;\n}\n\nexport default useTeams;\n","import * as React from 'react';\n\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends React.Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'app/locale';\nimport {decodeScalar} from 'app/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  name: EventsDisplayFilterName;\n  sort?: {kind: 'desc' | 'asc'; field: string};\n  label: string;\n  query?: string[][];\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import * as React from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport SelectControl from 'app/components/forms/selectControl';\nimport Link from 'app/components/links/link';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport EventView from 'app/utils/discover/eventView';\nimport withApi from 'app/utils/withApi';\nimport withProjects from 'app/utils/withProjects';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport Field from 'app/views/settings/components/forms/field';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  transactionName: string;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n  projects: Project[];\n  eventView: EventView;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n} & ModalRenderProps;\n\ntype State = {\n  threshold: number | undefined;\n  metric: TransactionThresholdMetric | undefined;\n  error: string | null;\n};\n\nclass TransactionThresholdModal extends React.Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <React.Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <React.Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","React","memoize","tag","query","endpointParams","api","organization","projectIds","this","props","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","replace","componentDidMount","getEventFieldValues","cache","clear","componentDidUpdate","prevProps","isEqual","getTagList","measurements","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","semverTags","SEMVER_TAGS","combined","has","values","predefined","render","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","excludeEnvironment","dropdownClassName","withApi","withTags","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","isActiveSuperuser","isSuperuser","ConfigStore","Cookies","undefined","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","Measurements","async","fetchTeams","orgId","slugs","search","limit","lastSearch","cursor","length","join","trim","per_page","hasMore","nextCursor","data","resp","requestPromise","includeAllArgs","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","previous","provideUserTeams","useApi","useLegacyStore","OrganizationStore","store","TeamStore","storeSlugs","Set","teams","t","slugsToLoad","shouldLoadSlugs","shouldLoadTeams","loadedUserTeams","initiallyLoaded","state","setState","useState","fetching","fetchError","slugsRef","useRef","current","size","some","useEffect","fetchedTeams","uniqBy","TeamActions","err","console","error","loadTeamsBySlug","fetchUserTeams","loadUserTeams","isMember","loading","onSearch","WrappedComponent","WithTags","TagStore","componentWillUnmount","unsubscribe","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","sort","kind","filterToField","label","p100","eventsRouteWithQuery","transaction","projectID","pathname","project","environment","statsPeriod","start","end","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","threshold","transactionThreshold","metric","transactionThresholdMetric","event","preventDefault","closeModal","transactionName","onApply","getProject","transactionThresholdUrl","method","id","catch","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","projects","eventView","find","proj","projectId","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","slice","onChange","handleFieldChange","type","pattern","target","step","min","Header","Body","Footer","summaryView","clone","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","closeButton","Instruction","tct","to","projectSettings","gap","priority","onClick","handleReset","handleApply","space","modalCss","withProjects"],"sourceRoot":""}