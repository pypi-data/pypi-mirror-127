{"version":3,"file":"chunks/app_components_modals_dashboardWidgetLibraryModal_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/dashboardWidgetLibraryModal/customTab.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/data.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/libraryTab.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/index.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/dashboardsV2/utils.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction DashboardWidgetCustomTab() {\n  return <React.Fragment />;\n}\n\nexport default DashboardWidgetCustomTab;\n","import {t} from 'app/locale';\n\nimport {DisplayType, Widget} from '../types';\n\nexport type WidgetTemplate = Widget;\n\nexport const DEFAULT_WIDGETS: Readonly<Array<WidgetTemplate>> = [\n  {\n    id: undefined,\n    title: t('Total Errors'),\n    displayType: DisplayType.BIG_NUMBER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '!event.type:transaction',\n        fields: ['count()'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('All Events'),\n    displayType: DisplayType.AREA,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '!event.type:transaction',\n        fields: ['count()'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Affected Users'),\n    displayType: DisplayType.LINE,\n    interval: '5m',\n    queries: [\n      {\n        name: 'Known Users',\n        conditions: 'has:user.email !event.type:transaction',\n        fields: ['count_unique(user)'],\n        orderby: '',\n      },\n      {\n        name: 'Anonymous Users',\n        conditions: '!has:user.email !event.type:transaction',\n        fields: ['count_unique(user)'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Handled vs. Unhandled'),\n    displayType: DisplayType.LINE,\n    interval: '5m',\n    queries: [\n      {\n        name: 'Handled',\n        conditions: 'error.handled:true',\n        fields: ['count()'],\n        orderby: '',\n      },\n      {\n        name: 'Unhandled',\n        conditions: 'error.handled:false',\n        fields: ['count()'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Errors by Country'),\n    displayType: DisplayType.WORLD_MAP,\n    interval: '5m',\n    queries: [\n      {\n        name: 'Error counts',\n        conditions: '!event.type:transaction has:geo.country_code',\n        fields: ['count()'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Errors by Browser'),\n    displayType: DisplayType.TABLE,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '!event.type:transaction has:browser.name',\n        fields: ['browser.name', 'count()'],\n        orderby: '-count',\n      },\n    ],\n  },\n];\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Card from 'app/components/card';\nimport {IconAdd, IconCheckmark} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\nimport {miniWidget} from '../utils';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  widget: WidgetTemplate;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  setErrored: (errored: boolean) => void;\n  selectedWidgets: WidgetTemplate[];\n};\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  setErrored,\n}: Props) {\n  const selectButton = (\n    <StyledButton\n      type=\"button\"\n      icon={<IconAdd size=\"small\" isCircled color=\"gray300\" />}\n      onClick={() => {\n        const updatedWidgets = selectedWidgets.slice().concat(widget);\n        setErrored(false);\n        setSelectedWidgets(updatedWidgets);\n      }}\n    >\n      {t('Select')}\n    </StyledButton>\n  );\n\n  const selectedButton = (\n    <StyledButton\n      type=\"button\"\n      icon={<IconCheckmark size=\"small\" isCircled color=\"gray300\" />}\n      onClick={() => {\n        const updatedWidgets = selectedWidgets.filter(selected => widget !== selected);\n        setSelectedWidgets(updatedWidgets);\n      }}\n      priority=\"primary\"\n    >\n      {t('Selected')}\n    </StyledButton>\n  );\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardContent>\n          <Title>{widget.title}</Title>\n        </CardContent>\n      </CardHeader>\n      <CardBody>\n        <WidgetImage src={miniWidget(widget.displayType)} />\n      </CardBody>\n      <CardFooter>\n        {selectedWidgets.includes(widget) ? selectedButton : selectButton}\n      </CardFooter>\n    </Card>\n  );\n}\n\nconst CardContent = styled('div')`\n  flex-grow: 1;\n  overflow: hidden;\n  margin-right: ${space(1)};\n`;\n\nconst CardHeader = styled('div')`\n  display: flex;\n  padding: ${space(1.5)} ${space(2)};\n`;\n\nconst Title = styled('div')`\n  color: ${p => p.theme.textColor};\n`;\n\nconst CardBody = styled('div')`\n  background: ${p => p.theme.gray100};\n  padding: ${space(1.5)} ${space(2)};\n  max-height: 150px;\n  min-height: 150px;\n  overflow: hidden;\n`;\n\nconst CardFooter = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst StyledButton = styled(Button)`\n  width: 100%;\n  vertical-align: middle;\n  > span:first-child {\n    padding: 8px 16px;\n  }\n`;\n\nconst WidgetImage = styled('img')`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default WidgetLibraryCard;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {DEFAULT_WIDGETS, WidgetTemplate} from 'app/views/dashboardsV2/widgetLibrary/data';\nimport WidgetLibraryCard from 'app/views/dashboardsV2/widgetLibrary/widgetCard';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  errored: boolean;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  setErrored: (errored: boolean) => void;\n};\n\nfunction DashboardWidgetLibraryTab({\n  selectedWidgets,\n  errored,\n  setSelectedWidgets,\n  setErrored,\n}: Props) {\n  return (\n    <React.Fragment>\n      {errored && !!!selectedWidgets.length ? (\n        <Alert type=\"error\">\n          {t(\n            'Please select at least one Widget from our Library. Alternatively, you can build a custom widget from scratch.'\n          )}\n        </Alert>\n      ) : null}\n      <Title>{t('%s WIDGETS', DEFAULT_WIDGETS.length)}</Title>\n      <ScrollGrid>\n        <WidgetLibraryGrid>\n          {DEFAULT_WIDGETS.map(widgetCard => {\n            return (\n              <WidgetLibraryCard\n                key={widgetCard.title}\n                widget={widgetCard}\n                selectedWidgets={selectedWidgets}\n                setSelectedWidgets={setSelectedWidgets}\n                setErrored={setErrored}\n              />\n            );\n          })}\n        </WidgetLibraryGrid>\n      </ScrollGrid>\n    </React.Fragment>\n  );\n}\n\nconst WidgetLibraryGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(100px, 1fr));\n  grid-template-rows: repeat(2, max-content);\n  grid-gap: ${space(1)};\n`;\n\nconst ScrollGrid = styled('div')`\n  max-height: 550px;\n  overflow: scroll;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst Title = styled('h3')`\n  margin-bottom: ${space(1)};\n  padding: 0 !important;\n  font-size: ${p => p.theme.fontSizeSmall};\n  text-transform: uppercase;\n  color: ${p => p.theme.gray300};\n`;\n\nexport default DashboardWidgetLibraryTab;\n","import * as React from 'react';\nimport {useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport Tag from 'app/components/tagDeprecated';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport {DashboardDetails, Widget} from 'app/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'app/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nimport DashboardWidgetCustomTab from './customTab';\nimport DashboardWidgetLibraryTab from './libraryTab';\n\nexport type DashboardWidgetLibraryModalOptions = {\n  organization: Organization;\n  dashboard: DashboardDetails;\n  onAddWidget: (widgets: Widget[]) => void;\n};\n\nexport enum TAB {\n  Library = 'library',\n  Custom = 'custom',\n}\n\ntype Props = ModalRenderProps & DashboardWidgetLibraryModalOptions;\n\nfunction DashboardWidgetLibraryModal({\n  Header,\n  Body,\n  Footer,\n  dashboard,\n  closeModal,\n  onAddWidget,\n}: Props) {\n  const [tab, setTab] = useState(TAB.Library);\n  const [selectedWidgets, setSelectedWidgets] = useState<WidgetTemplate[]>([]);\n  const [errored, setErrored] = useState(false);\n\n  function handleSubmit() {\n    onAddWidget([...dashboard.widgets, ...selectedWidgets]);\n    closeModal();\n  }\n\n  return (\n    <React.Fragment>\n      <Header closeButton>\n        <h4>{t('Add Widget')}</h4>\n      </Header>\n      <Body>\n        <StyledButtonBar active={tab}>\n          <Button barId={TAB.Library} onClick={() => setTab(TAB.Library)}>\n            {t('Library')}\n          </Button>\n          <Button barId={TAB.Custom} onClick={() => setTab(TAB.Custom)}>\n            {t('Custom')}\n          </Button>\n        </StyledButtonBar>\n        {tab === TAB.Library ? (\n          <DashboardWidgetLibraryTab\n            selectedWidgets={selectedWidgets}\n            errored={errored}\n            setSelectedWidgets={setSelectedWidgets}\n            setErrored={setErrored}\n          />\n        ) : (\n          <DashboardWidgetCustomTab />\n        )}\n      </Body>\n      <Footer>\n        <FooterButtonbar gap={1}>\n          <Button\n            external\n            href=\"https://docs.sentry.io/product/dashboards/custom-dashboards/#widget-builder\"\n          >\n            {t('Read the docs')}\n          </Button>\n          <div>\n            <SelectedBadge data-test-id=\"selected-badge\">\n              {`${selectedWidgets.length} Selected`}\n            </SelectedBadge>\n            <Button\n              data-test-id=\"confirm-widgets\"\n              priority=\"primary\"\n              type=\"button\"\n              onClick={(event: React.FormEvent) => {\n                event.preventDefault();\n                if (!!!selectedWidgets.length) {\n                  setErrored(true);\n                  return;\n                }\n                handleSubmit();\n              }}\n            >\n              {t('Confirm')}\n            </Button>\n          </div>\n        </FooterButtonbar>\n      </Footer>\n    </React.Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  margin-bottom: ${space(1)};\n`;\n\nconst FooterButtonbar = styled(ButtonBar)`\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst SelectedBadge = styled(Tag)`\n  padding: 3px ${space(0.75)};\n  display: inline-flex;\n  align-items: center;\n  margin-left: ${space(1)};\n  margin-right: ${space(1)};\n  top: -1px;\n`;\n\nexport default DashboardWidgetLibraryModal;\n","import {User} from 'app/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n}\n","import {Query} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pick from 'lodash/pick';\n\nimport WidgetArea from 'sentry-images/dashboard/widget-area.svg';\nimport WidgetBar from 'sentry-images/dashboard/widget-bar.svg';\nimport WidgetBigNumber from 'sentry-images/dashboard/widget-big-number.svg';\nimport WidgetLine from 'sentry-images/dashboard/widget-line-1.svg';\nimport WidgetTable from 'sentry-images/dashboard/widget-table.svg';\nimport WidgetWorldMap from 'sentry-images/dashboard/widget-world-map.svg';\n\nimport {GlobalSelection} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\n\nimport {DashboardDetails, DisplayType, Widget, WidgetQuery} from './types';\n\nexport function cloneDashboard(dashboard: DashboardDetails): DashboardDetails {\n  return cloneDeep(dashboard);\n}\n\nexport function eventViewFromWidget(\n  title: string,\n  query: WidgetQuery,\n  selection: GlobalSelection,\n  widgetType?: DisplayType\n): EventView {\n  const {start, end, period: statsPeriod} = selection.datetime;\n  const {projects, environments} = selection;\n\n  // World Map requires an additional column (geo.country_code) to display in discover when navigating from the widget\n  const fields =\n    widgetType === DisplayType.WORLD_MAP\n      ? ['geo.country_code', ...query.fields]\n      : query.fields;\n  const conditions =\n    widgetType === DisplayType.WORLD_MAP\n      ? `${query.conditions} has:geo.country_code`\n      : query.conditions;\n\n  return EventView.fromSavedQuery({\n    id: undefined,\n    name: title,\n    version: 2,\n    fields,\n    query: conditions,\n    orderby: query.orderby,\n    projects,\n    range: statsPeriod,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n}\n\nfunction coerceStringToArray(value?: string | string[] | null) {\n  return typeof value === 'string' ? [value] : value;\n}\n\nexport function constructWidgetFromQuery(query?: Query): Widget | undefined {\n  if (query) {\n    const queryNames = coerceStringToArray(query.queryNames);\n    const queryConditions = coerceStringToArray(query.queryConditions);\n    const queryFields = coerceStringToArray(query.queryFields);\n    const queries: WidgetQuery[] = [];\n    if (\n      queryConditions &&\n      queryNames &&\n      queryFields &&\n      typeof query.queryOrderby === 'string'\n    ) {\n      queryConditions.forEach((condition, index) => {\n        queries.push({\n          name: queryNames[index],\n          conditions: condition,\n          fields: queryFields,\n          orderby: query.queryOrderby as string,\n        });\n      });\n    }\n    if (query.title && query.displayType && query.interval && queries.length > 0) {\n      const newWidget: Widget = {\n        ...(pick(query, ['title', 'displayType', 'interval']) as {\n          title: string;\n          displayType: DisplayType;\n          interval: string;\n        }),\n        queries,\n      };\n      return newWidget;\n    }\n  }\n  return undefined;\n}\n\nexport function miniWidget(displayType: DisplayType): string {\n  switch (displayType) {\n    case DisplayType.BAR:\n      return WidgetBar;\n    case DisplayType.AREA:\n    case DisplayType.TOP_N:\n      return WidgetArea;\n    case DisplayType.BIG_NUMBER:\n      return WidgetBigNumber;\n    case DisplayType.TABLE:\n      return WidgetTable;\n    case DisplayType.WORLD_MAP:\n      return WidgetWorldMap;\n    case DisplayType.LINE:\n    default:\n      return WidgetLine;\n  }\n}\n"],"names":["DashboardWidgetCustomTab","DEFAULT_WIDGETS","id","undefined","title","t","displayType","DisplayType","interval","queries","name","conditions","fields","orderby","WidgetLibraryCard","selectedWidgets","widget","setSelectedWidgets","setErrored","selectButton","StyledButton","type","icon","size","isCircled","color","onClick","updatedWidgets","slice","concat","selectedButton","filter","selected","priority","CardHeader","CardContent","Title","CardBody","WidgetImage","src","miniWidget","CardFooter","includes","space","p","theme","textColor","gray100","Button","DashboardWidgetLibraryTab","errored","length","ScrollGrid","WidgetLibraryGrid","map","widgetCard","fontSizeSmall","gray300","TAB","DashboardWidgetLibraryModal","Header","Body","Footer","dashboard","closeModal","onAddWidget","tab","setTab","useState","Library","closeButton","StyledButtonBar","active","barId","Custom","FooterButtonbar","gap","external","href","SelectedBadge","event","preventDefault","widgets","modalCss","ButtonBar","Tag","MAX_WIDGETS","DashboardState","cloneDashboard","cloneDeep","eventViewFromWidget","query","selection","widgetType","start","end","period","statsPeriod","datetime","projects","environments","EventView","version","range","getUtcDateString","environment","coerceStringToArray","value","constructWidgetFromQuery","queryNames","queryConditions","queryFields","queryOrderby","forEach","condition","index","push","pick","WidgetBar","WidgetArea","WidgetBigNumber","WidgetTable","WidgetWorldMap","WidgetLine"],"sourceRoot":""}