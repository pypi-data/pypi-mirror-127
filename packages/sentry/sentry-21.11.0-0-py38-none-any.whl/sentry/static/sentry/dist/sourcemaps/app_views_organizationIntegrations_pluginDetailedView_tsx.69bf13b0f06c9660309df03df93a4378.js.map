{"version":3,"file":"chunks/app_views_organizationIntegrations_pluginDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationIntegrations/pluginDeprecationAlert.tsx","webpack:///./app/views/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/organizationIntegrations/pluginDetailedView.tsx"],"sourcesContent":["import React, {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, PluginWithProjectList} from 'app/types';\nimport {trackIntegrationAnalytics} from 'app/utils/integrationUtil';\n\ntype Props = {\n  organization: Organization;\n  plugin: PluginWithProjectList;\n};\n\ntype State = {};\n\nclass PluginDeprecationAlert extends Component<Props, State> {\n  render() {\n    const {organization, plugin} = this.props;\n\n    // Short-circuit if not deprecated.\n    if (!plugin.deprecationDate) {\n      return <React.Fragment />;\n    }\n    const resource = plugin.altIsSentryApp ? 'sentry-apps' : 'integrations';\n    const upgradeUrl = `/settings/${organization.slug}/${resource}/${plugin.firstPartyAlternative}/`;\n    const queryParams = `?${\n      plugin.altIsSentryApp ? '' : 'tab=configurations&'\n    }referrer=directory_upgrade_now`;\n    return (\n      <div>\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />}>\n          <span>{`This integration is being deprecated on ${plugin.deprecationDate}. Please upgrade to avoid any disruption.`}</span>\n          <UpgradeNowButton\n            href={`${upgradeUrl}${queryParams}`}\n            size=\"xsmall\"\n            onClick={() =>\n              trackIntegrationAnalytics('integrations.resolve_now_clicked', {\n                integration_type: 'plugin',\n                integration: plugin.slug,\n                organization,\n              })\n            }\n          >\n            {t('Upgrade Now')}\n          </UpgradeNowButton>\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst UpgradeNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nexport default PluginDeprecationAlert;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport Switch from 'app/components/switchButton';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AvatarProject, Organization, PluginNoProject, PluginProjectItem} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/analytics/integrationAnalyticsEvents';\nimport withApi from 'app/utils/withApi';\n\nexport type Props = {\n  api: Client;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  organization: Organization;\n  onResetConfiguration: (projectId: string) => void;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  trackIntegrationAnalytics: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationAnalytics('integrations.uninstall_completed');\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationAnalytics('integrations.uninstall_clicked');\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationAnalytics(\n        status ? 'integrations.enabled' : 'integrations.disabled'\n      );\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    // this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container>\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                {\n                  <StyledButton\n                    borderless\n                    icon={<IconSettings />}\n                    disabled={!hasAccess}\n                    to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                    data-test-id=\"integration-configure-button\"\n                  >\n                    {t('Configure')}\n                  </StyledButton>\n                }\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport * as modal from 'app/actionCreators/modal';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ContextPickerModal from 'app/components/contextPickerModal';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\nimport PluginDeprecationAlert from './pluginDeprecationAlert';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, integrationSlug} = this.props.params;\n    return [\n      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${integrationSlug}`],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    // remove from array\n    projectList.splice(index, 1);\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    // update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationAnalytics('integrations.plugin_add_to_project_clicked');\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(path);\n          }}\n        />\n      ),\n      {allowClickClose: false}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    // we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"small\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n\n    if (plugin.projectList.length) {\n      return (\n        <Fragment>\n          <PluginDeprecationAlert organization={organization} plugin={plugin} />\n          <div>\n            {plugin.projectList.map((projectItem: PluginProjectItem) => (\n              <InstalledPlugin\n                key={projectItem.projectId}\n                organization={organization}\n                plugin={plugin}\n                projectItem={projectItem}\n                onResetConfiguration={this.handleResetConfiguration}\n                onPluginEnableStatusChange={this.handlePluginEnableStatus}\n                trackIntegrationAnalytics={this.trackIntegrationAnalytics}\n              />\n            ))}\n          </div>\n        </Fragment>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"names":["PluginDeprecationAlert","Component","render","organization","plugin","this","props","deprecationDate","resource","altIsSentryApp","upgradeUrl","slug","firstPartyAlternative","queryParams","type","icon","size","UpgradeNowButton","href","onClick","trackIntegrationAnalytics","integration_type","integration","t","Button","p","theme","subText","InstalledPlugin","async","data","method","projectItem","api","requestPromise","projectSlug","id","enabled","pluginUpdate","addLoadingMessage","reset","addSuccessMessage","onResetConfiguration","projectId","_err","addErrorMessage","status","updatePluginEnableStatus","onPluginEnableStatusChange","getConfirmMessage","Fragment","platform","projectPlatform","undefined","className","Container","access","hasAccess","IntegrationFlex","IntegrationItemBox","project","projectForBadge","StyledButton","borderless","disabled","to","priority","onConfirming","handleUninstallClick","confirmText","onConfirm","handleReset","message","isActive","toggle","toggleEnablePlugin","isDisabled","withApi","space","border","background","gray300","PluginDetailedView","AbstractIntegrationDetailedView","projectList","slice","index","findIndex","item","splice","setState","plugins","state","enable","router","modal","openModal","modalProps","nextPath","needProject","needOrg","onFinish","path","closeModal","push","allowClickClose","getEndpoints","orgId","integrationSlug","params","description","author","name","resourceLinks","length","isHidden","featureDescriptions","getTabDisplay","tab","renderTopButton","disabledFromFeatures","userHasAccess","AddButton","handleAddToProject","renderRequestIntegrationButton","renderConfigurations","map","handleResetConfiguration","handlePluginEnableStatus","renderEmptyConfigurations","withOrganization"],"sourceRoot":""}