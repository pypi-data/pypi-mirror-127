{"version":3,"file":"chunks/app_actions_navigationActions_tsx-app_actions_organizationActions_tsx-app_components_acl_acce-4994a6.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uRAEA,Q,MAAeA,GAAAA,cAAqB,CAAC,kB,+HCArC,Q,MAAeA,GAAAA,cAAqB,CAAC,QAAS,gBAAiB,Y,6dCQ/D,MAAMC,GACJ,QAAC,IAAD,CAAOC,KAAK,QAAQC,MAAM,QAAC,KAAD,CAAUC,KAAK,OAAzC,UACGC,EAAAA,EAAAA,GAAE,4DA8DP,MAAMC,UAAeC,EAAAA,UAGnBC,SACE,MAAM,aACJC,EADI,OAEJC,EAFI,OAGJC,EAHI,WAIJC,EAJI,YAKJC,EALI,sBAMJC,EANI,SAOJC,GACEC,KAAKC,OAEFN,OAAQO,GAAaT,GAAgB,CAACE,OAAQ,IAG/CQ,GAAaR,GAAUA,EAFdC,EAAa,QAAU,SAEMQ,GAAOF,EAAUG,SAASD,KAChEE,KAAkBZ,EAAOa,OAAQb,EAAOa,KAAKV,aAE7CW,EAAgC,CACpCL,UAAAA,EACAG,aAAAA,GAGId,EAASW,KAAeN,GAAeS,GAE7C,OAAKd,GAA2C,mBAA1BM,GAGjBN,GAAUM,EACNb,GAGLwB,EAAAA,EAAAA,GAA4BV,GACvBA,EAASS,GAGXhB,EAASO,EAAW,KAVlBD,EAAsBU,IA5B7BlB,EAAAA,YAAAA,U,OAAAA,EAAAA,eA3B6B,CACjCQ,uBAAuB,EACvBD,aAAa,EACbD,YAAY,EACZD,OAAQ,KAiEV,SAAee,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,GAAWrB,K,2XCjF3C,SAASsB,GAAyB,KAACC,KAASZ,IAC1C,MAAMa,UAAsBvB,EAAAA,UAAkC,mDAGpD,CACNwB,MAAOC,EAAAA,EAAAA,IAAcH,GAAMI,KAAIC,GAAMA,EAAGjB,QAJkB,0BAoB9Ce,EAAAA,EAAAA,QACZ,CAACG,EAAoBJ,IAA2Bf,KAAKoB,YAAYD,EAAUJ,SAC3EM,IAfFC,uBACEtB,KAAKuB,cAGPH,YAAYD,EAAoBJ,GAE1BI,IAAaN,GAIjBb,KAAKwB,SAAS,CAACT,MAAOA,EAAME,KAAIC,GAAMA,EAAGjB,OAQ3CT,SACE,MAAM,SAACO,GAAYE,EAEnB,OAAKD,KAAKyB,MAAMV,OAAUf,KAAKyB,MAAMV,MAAMW,OAInB,mBAAb3B,EACFA,EAAS,CAACgB,MAAOf,KAAKyB,MAAMV,QAG9Bf,KAAKyB,MAAMV,MAPT,MAWb,OAxCMD,EADsD,oCACtDA,EADsD,6BAE7BD,EAF6B,OAyCrD,QAACC,EAAD,IAzCAF,EAAAA,YAAAA,OA4CT,W,i9BC5De,SAASe,GAAe,IAACC,EAAD,WAAMC,EAAN,SAAkBC,IACvD,MAAM,gBAACC,EAAD,iBAAkBC,GAAoBF,EAEtCG,EAA8B,GACpC,IAAIC,EAAQL,EAGZ,OAAa,CACX,MAAMM,EAAYD,EAAME,QAAQL,GAC1BM,EAAeF,EAAYJ,EAAgBL,OACjD,IAAmB,IAAfS,IAAyD,IAArCD,EAAME,QAAQJ,GACpC,MAEFE,EAAQA,EAAMI,MAAM,EAAGH,GAAaD,EAAMI,MAAMD,GAEhD,MAAME,EAAaL,EAAME,QAAQJ,GAC3BQ,EAAgBD,EAAaP,EAAiBN,OACpDQ,EAAQA,EAAMI,MAAM,EAAGC,GAAcL,EAAMI,MAAME,GAEjDP,EAAQQ,KAAK,CAACN,EAAWI,EAAa,IAGxC,MAAO,CAACX,IAAAA,EAAKM,MAAAA,EAAOD,QAAAA,G,6CCHtB,MAAMS,EAAY,CAChBX,gBAAiB,SACjBC,iBAAkB,WAGpB,MAAMW,UAAmBpD,EAAAA,UAA8B,mDACtC,CACbqD,SAAS,EACTC,QAAS,MAH0C,qBAkB5C,IAAIC,EAAAA,mBAAmB,CAAC,OAAQ,cAAe,UAAW,WAlBd,uBAgC1CC,GAAAA,CAAS/C,KAAKgD,gBAAiB,MA1B1CC,yBAC2B5B,IAArBrB,KAAKC,MAAMiD,OACblD,KAAKmD,SAASnD,KAAKC,MAAMiD,OAI7BE,mBAAmBC,GACbA,EAAUH,QAAUlD,KAAKC,MAAMiD,OACjClD,KAAKmD,SAASE,EAAUH,OAMP,sBAACA,GACpBlD,KAAKwB,SAAS,CAACoB,SAAS,IACxB,MAAM,UAACU,EAAY,IAAMtD,KAAKC,MAKxB4C,EAeV,SAA0BA,GACxB,MAAMU,EAAkB,GAiDxB,OA/CAV,EAAQW,SAAQC,IACd,MAAMC,EAAeD,EAAQE,KAAK1C,KAAY2C,IAAO,UACnD,MAAMC,EAAQlC,EAAe,CAC3BC,IAAK,QACLC,WAAU,UAAE+B,EAAIC,aAAN,QAAe,GACzB/B,SAAUY,IAENoB,EAAcnC,EAAe,CACjCC,IAAK,cACLC,WAAU,UAAE+B,EAAIG,YAAN,QAAc,GACxBjC,SAAUY,IAaZ,MAAO,CAACsB,KAViB,IACpBJ,EACHK,WAAY,OACZC,WAAY,QAAF,OAAUN,EAAIO,MACxBN,MAAOO,IAAAA,SAAA,UAAmBR,EAAIC,aAAvB,QAAgC,IACvCQ,MAAOT,EAAIU,QAAQC,SACnBT,YAAaF,EAAIG,KAAOK,IAAAA,SAAmBR,EAAIG,WAAQ1C,EACvDmD,GAAIZ,EAAIa,KAGIC,QAAS,CAACb,EAAOC,GAAca,MAAO,MAItD,GAAIjB,EAAahC,OAAS,EAKxB,OAJAgC,EAAa,GAAGM,KAAKY,eAAiBnB,EAAQ5C,KAC9C6C,EAAa,GAAGM,KAAKa,aAAenB,EAAahC,YAEjD6B,EAAMd,QAAQiB,GAKhB,MAAMoB,EAA8B,CAClCb,WAAY,OACZC,WAAY,QAAF,OAAUT,EAAQU,MAC5BN,MAAO,iBAAF,OAAmBJ,EAAQ5C,MAChC+D,eAAgBnB,EAAQ5C,KACxBkE,OAAO,GAGTxB,EAAMd,KAAK,CAACuB,KAAMc,EAAiBH,MAAO,OAGrCpB,EAjEWyB,OAHYhF,KAAKiF,OAAO/B,MAAMA,EAAO,CACnDI,UAAWA,EAAUrC,KAAIiE,IAAQ,wBAAIC,EAAAA,EAAAA,iBAAgBD,UAApB,aAAI,EAA2BE,WAIlEpF,KAAKwB,SAAS,CAACoB,SAAS,EAAOC,QAAAA,IAKjCrD,SACE,OAAOQ,KAAKC,MAAMF,SAAS,CACzBsF,UAAWrF,KAAKyB,MAAMmB,QACtBC,QAAS7C,KAAKyB,MAAMoB,WArCpBF,EAAAA,YAAAA,aAgGN,SAAe2C,EAAAA,EAAAA,IAAkBC,EAAAA,EAAAA,YAAW5C,I,uLCtH5C,MAAM6C,EAAe,EAAExB,KAAAA,EAAMU,QAAAA,EAASe,UAAAA,EAAWC,YAAAA,MAAkC,MACjF,MAAMd,OACoBvD,IAAxB2C,EAAKY,gBACH,QAACe,EAAD,YACE,QAAC,KAAD,KACCtG,EAAAA,EAAAA,GAAE,UAAW2E,EAAKY,iBACnB,QAACgB,EAAD,WAAQC,EAAAA,EAAAA,IAAG,YAAa,aAAd,UAA4B7B,EAAKa,oBAAjC,QAAiD,QAE3D,KAEN,OAAIb,EAAKe,OAEL,QAAC,WAAD,WACGH,GACD,QAACkB,EAAD,WAAQzG,EAAAA,EAAAA,GAAE,qBAAsB2E,EAAKY,sBAMzC,QAAC,WAAD,WACGA,GACD,QAAC,IAAD,IAAyBa,EAAWC,YAAaA,EAAjD,UACE,QAAC,IAAD,CAAcA,YAAaA,EAAa1B,KAAMA,EAAMU,QAASA,UAvB/Dc,EAAAA,YAAAA,eA8BN,MAAMO,EAAa9F,IACjB,QAAC,IAAD,IACMA,EACJ+F,QAAS,CAACrD,GACVsD,UAAW,EACXC,eAAe,EACfC,WAAYX,IANVO,EAAAA,YAAAA,aAUN,MAAMJ,GAAiB,OAAO,MAAP,sBAAH,4EAGNS,EAAAA,EAAAA,GAAM,GAHA,mCAKJC,GAAKA,EAAEC,MAAMC,qBALT,aAMPH,EAAAA,EAAAA,GAAM,GANC,KAMKA,EAAAA,EAAAA,GAAM,GANX,gDASQC,GAAKA,EAAEC,MAAME,aATrB,MAadZ,GAAQ,OAAO,MAAP,sBAAH,cACIS,GAAKA,EAAEC,MAAMG,eADjB,WAEAJ,GAAKA,EAAEC,MAAMI,SAFb,KAKLZ,GAAQ,OAAO,MAAP,sBAAH,4CAGEM,EAAAA,EAAAA,GAAM,GAHR,WAIAC,GAAKA,EAAEC,MAAMK,SAJb,eAKIN,GAAKA,EAAEC,MAAMM,gBALjB,0BAMeP,GAAKA,EAAEC,MAAME,aAN5B,KASX,I,+ECxEA,SAASK,GAAgB,KACvBC,EADuB,WAEvBC,EAFuB,aAGvBtH,EAHuB,YAIvBuH,GAAc3H,EAAAA,EAAAA,GAAE,oDACbY,IAEH,MAAMqG,GAAQW,EAAAA,EAAAA,KAEd,OACE,QAACH,EAAD,WACE,QAAC,KAAD,UACG,EAAEI,IAAKC,MACN,QAAC,EAAD,IACMlH,EACJmH,WAAW,eACXC,cAAeF,EAAF,qTAOeb,EAAMgB,QAElCC,YAAa,EAAEC,cAAAA,MACb,QAACC,EAAD,WACE,QAACC,EAAD,CACEC,WAAS,KACLH,EAAc,CAACtI,KAAM,OAAQ0I,MAAOZ,EAAaA,YAAAA,QAI3Da,cACE,QAAC,IAAD,CAAMhH,KAAK,oBAAyBpB,aAAAA,EAAcsH,WAAAA,UAlCvDF,EAAAA,YAAAA,kBA2CT,MAAMY,GAAe,OAAO,MAAP,qBAAH,YACLrB,EAAAA,EAAAA,GAAM,KADD,KAIZsB,GAAQ,OAAO,QAAP,qBAAH,uBAEEtB,EAAAA,EAAAA,GAAM,GAFR,sEAYE0B,EAAW,CAAH,uDAMrB,GAAepH,EAAAA,EAAAA,GAAiBmG,I,sGC9EzB,MAAMkB,EAAQ,4BAqBrB,EAnBqC,CACnC,CAEElE,MAAO,uBACPmE,OAAQ,CACN,CACEnH,KAAM,QACN3B,KAAM,SAGN0I,MAAO,mBACPZ,YAAa,6BACbiB,KAAM,kDACNC,kBAAkB,O,2MCC1B,MAAMC,EAAoE,CACxEC,YAAa,C,4CAACC,GAEd5G,MAAO,GACP6G,QAAQ,EAGRC,kBACE,OAAOvI,KAAKyB,OAGd+G,OACExI,KAAKyB,MAAQ,GACbzB,KAAKsI,QAAS,GAGhBG,SAASC,GACP1I,KAAK2I,IAAID,IAGXE,aAAaC,EAAoBC,GAC3BD,EAAKzD,OAAS0D,EAAK1D,OAIvBpF,KAAK+I,OAAOF,EAAKzD,MACjBpF,KAAK2I,IAAIG,KAGXE,gBAAgB5D,GACdpF,KAAK+I,OAAO3D,IAGd6D,IAAI7D,GACF,OAAOpF,KAAKyB,MAAMyH,MAAMlF,GAAuBA,EAAKoB,OAASA,KAG/D+D,SACE,OAAOnJ,KAAKyB,OAGdsH,OAAO3D,GACLpF,KAAKyB,MAAQzB,KAAKyB,MAAM2H,QAAOpF,GAAQoB,IAASpB,EAAKoB,OACrDpF,KAAKqJ,QAAQrJ,KAAKyB,QAGpBkH,IAAI3E,GACF,IAAIsF,GAAQ,EACZtJ,KAAKyB,MAAM+B,SAAQ,CAAC+F,EAAUC,KACxBD,EAASE,KAAOzF,EAAKyF,KACvBzF,EAAO,IAAIuF,KAAavF,GACxBhE,KAAKyB,MAAM+H,GAAOxF,EAClBsF,GAAQ,MAGPA,IACHtJ,KAAKyB,MAAQ,IAAIzB,KAAKyB,MAAOuC,IAE/BhE,KAAKqJ,QAAQrJ,KAAKyB,QAGpBiI,KAAKnG,GACHvD,KAAKyB,MAAQ8B,EACbvD,KAAKsI,QAAS,EACdtI,KAAKqJ,QAAQ9F,KAOjB,EAH2BvE,IAAAA,YAAmBmJ,I,gICxC9C,QApBA,UAAgB,gBAACwB,EAAiBC,IAAKC,GAAwB,IAC7D,MAAMC,GAAWC,EAAAA,EAAAA,eAGQ1I,IAArByI,EAASE,cAAyC3I,IAAhBwI,IACpCC,EAASE,QAAU,IAAIC,EAAAA,IAIzB,MAAML,EAAMC,MAAAA,EAAAA,EAAeC,EAASE,QAEpC,SAASE,KACNP,GAAmBC,EAAIO,QAK1B,OAFAC,EAAAA,EAAAA,YAAU,IAAMF,GAAe,IAExBN,I,0OCzBT,MAeA,EAfgB,CACdS,EACAC,EAAwC,MAExC,MAAMC,EAAqC,EAAEX,IAAKY,KAAavK,MAC7D,MAAM2J,GAAMa,EAAAA,EAAAA,GAAO,CAACb,IAAKY,KAAaF,IAEtC,OAAO,QAACD,EAAD,IAAuBpK,EAAa2J,IAAKA,KAKlD,OAFAW,EAAQG,YAAR,mBAAiCC,EAAAA,EAAAA,GAAeN,GAAhD,KAEOE,I","sources":["webpack:///./app/actions/navigationActions.tsx","webpack:///./app/actions/organizationActions.tsx","webpack:///./app/components/acl/access.tsx","webpack:///./app/components/hook.tsx","webpack:///./app/utils/parseHtmlMarks.tsx","webpack:///./app/components/search/sources/helpSource.tsx","webpack:///./app/components/helpSearch.tsx","webpack:///./app/components/modals/helpSearchModal.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/stores/organizationsStore.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions(['setLastRoute']);\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions(['reset', 'fetchOrgError', 'update']);\n","import * as React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {IconInfo} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Config, Organization, Scope} from 'app/types';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" icon={<IconInfo size=\"md\" />}>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends React.Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import * as React from 'react';\n\nimport HookStore from 'app/stores/hookStore';\nimport {HookName, Hooks} from 'app/types/hooks';\n\ntype Props<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  name: H;\n  /**\n   * If children are provided as a function to the Hook, the hooks will be\n   * passed down as a render prop.\n   */\n  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;\n} & Omit<Parameters<Hooks[H]>[0], 'name'>;\n\ntype HookState<H extends HookName> = {\n  hooks: Array<Hooks[H]>;\n};\n\n/**\n * Instead of accessing the HookStore directly, use this.\n *\n * If the hook slot needs to perform anything w/ the hooks, you can pass a\n * function as a child and you will receive an object with a `hooks` key\n *\n * Example:\n *\n *   <Hook name=\"my-hook\">\n *     {({hooks}) => hooks.map(hook => (\n *       <Wrapper>{hook}</Wrapper>\n *     ))}\n *   </Hook>\n */\nfunction Hook<H extends HookName>({name, ...props}: Props<H>) {\n  class HookComponent extends React.Component<{}, HookState<H>> {\n    static displayName = `Hook(${name})`;\n\n    state = {\n      hooks: HookStore.get(name).map(cb => cb(props)),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {\n      // Make sure that the incoming hook update matches this component's hook name\n      if (hookName !== name) {\n        return;\n      }\n\n      this.setState({hooks: hooks.map(cb => cb(props))});\n    }\n\n    unsubscribe = HookStore.listen(\n      (hookName: HookName, hooks: Array<Hooks[H]>) => this.handleHooks(hookName, hooks),\n      undefined\n    );\n\n    render() {\n      const {children} = props;\n\n      if (!this.state.hooks || !this.state.hooks.length) {\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children({hooks: this.state.hooks});\n      }\n\n      return this.state.hooks;\n    }\n  }\n\n  return <HookComponent />;\n}\n\nexport default Hook;\n","type Options = {\n  key: string;\n  htmlString: string;\n  markTags: {\n    highlightPreTag: string;\n    highlightPostTag: string;\n  };\n};\n\n/**\n * Parses the \"marked\" html strings into a {key, value, indices} (similar to\n * Fuse.js) object, where the indices are a set of zero indexed [start, end]\n * indices for what should be highlighted.\n *\n * @param key The key of the field, this mimics the Fuse match object\n * @param htmlString The html string to parse\n * @param markTags.highlightPreTag The left tag\n * @param markTags.highlightPostTag The right tag\n */\nexport default function parseHtmlMarks({key, htmlString, markTags}: Options) {\n  const {highlightPreTag, highlightPostTag} = markTags;\n\n  const indices: [number, number][] = [];\n  let value = htmlString;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const openIndex = value.indexOf(highlightPreTag);\n    const openIndexEnd = openIndex + highlightPreTag.length;\n    if (openIndex === -1 || value.indexOf(highlightPostTag) === -1) {\n      break;\n    }\n    value = value.slice(0, openIndex) + value.slice(openIndexEnd);\n\n    const closeIndex = value.indexOf(highlightPostTag);\n    const closeIndexEnd = closeIndex + highlightPostTag.length;\n    value = value.slice(0, closeIndex) + value.slice(closeIndexEnd);\n\n    indices.push([openIndex, closeIndex - 1]);\n  }\n\n  return {key, value, indices};\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {\n  Result as SearchResult,\n  SentryGlobalSearch,\n  standardSDKSlug,\n} from '@sentry-internal/global-search';\nimport dompurify from 'dompurify';\nimport debounce from 'lodash/debounce';\n\nimport {Organization, Project} from 'app/types';\nimport parseHtmlMarks from 'app/utils/parseHtmlMarks';\nimport withLatestContext from 'app/utils/withLatestContext';\n\nimport {ChildProps, Result, ResultItem} from './types';\n\ntype Props = WithRouterProps & {\n  organization: Organization;\n  project: Project;\n  /**\n   * Specific platforms to filter reults to\n   */\n  platforms: string[];\n  /**\n   * The string to search the navigation routes for\n   */\n  query: string;\n  /**\n   * Render function that renders the global search result\n   */\n  children: (props: ChildProps) => React.ReactNode;\n};\n\ntype State = {\n  loading: boolean;\n  results: Result[];\n};\n\nconst MARK_TAGS = {\n  highlightPreTag: '<mark>',\n  highlightPostTag: '</mark>',\n};\n\nclass HelpSource extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    results: [],\n  };\n\n  componentDidMount() {\n    if (this.props.query !== undefined) {\n      this.doSearch(this.props.query);\n    }\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.doSearch(nextProps.query);\n    }\n  }\n\n  search = new SentryGlobalSearch(['docs', 'help-center', 'develop', 'blog']);\n\n  async unbouncedSearch(query: string) {\n    this.setState({loading: true});\n    const {platforms = []} = this.props;\n\n    const searchResults = await this.search.query(query, {\n      platforms: platforms.map(platform => standardSDKSlug(platform)?.slug!),\n    });\n    const results = mapSearchResults(searchResults);\n\n    this.setState({loading: false, results});\n  }\n\n  doSearch = debounce(this.unbouncedSearch, 300);\n\n  render() {\n    return this.props.children({\n      isLoading: this.state.loading,\n      results: this.state.results,\n    });\n  }\n}\n\nfunction mapSearchResults(results: SearchResult[]) {\n  const items: Result[] = [];\n\n  results.forEach(section => {\n    const sectionItems = section.hits.map<Result>(hit => {\n      const title = parseHtmlMarks({\n        key: 'title',\n        htmlString: hit.title ?? '',\n        markTags: MARK_TAGS,\n      });\n      const description = parseHtmlMarks({\n        key: 'description',\n        htmlString: hit.text ?? '',\n        markTags: MARK_TAGS,\n      });\n\n      const item: ResultItem = {\n        ...hit,\n        sourceType: 'help',\n        resultType: `help-${hit.site}` as ResultItem['resultType'],\n        title: dompurify.sanitize(hit.title ?? ''),\n        extra: hit.context.context1,\n        description: hit.text ? dompurify.sanitize(hit.text) : undefined,\n        to: hit.url,\n      };\n\n      return {item, matches: [title, description], score: 1};\n    });\n\n    // The first element should indicate the section.\n    if (sectionItems.length > 0) {\n      sectionItems[0].item.sectionHeading = section.name;\n      sectionItems[0].item.sectionCount = sectionItems.length;\n\n      items.push(...sectionItems);\n      return;\n    }\n\n    // If we didn't have any results for this section mark it as empty\n    const emptyHeaderItem: ResultItem = {\n      sourceType: 'help',\n      resultType: `help-${section.site}` as ResultItem['resultType'],\n      title: `No results in ${section.name}`,\n      sectionHeading: section.name,\n      empty: true,\n    };\n\n    items.push({item: emptyHeaderItem, score: 1});\n  });\n\n  return items;\n}\n\nexport {HelpSource};\nexport default withLatestContext(withRouter(HelpSource));\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Search from 'app/components/search';\nimport SearchResult from 'app/components/search/searchResult';\nimport SearchResultWrapper from 'app/components/search/searchResultWrapper';\nimport HelpSource from 'app/components/search/sources/helpSource';\nimport {IconWindow} from 'app/icons';\nimport {t, tn} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype HelpResult = Parameters<\n  React.ComponentProps<typeof HelpSource>['children']\n>[0]['results'][0];\n\ntype ResultItemProps = HelpResult & {\n  highlighted: boolean;\n  // TODO(ts): Improve types when we've typed more of the search components\n  itemProps: any;\n};\n\nconst renderResult = ({item, matches, itemProps, highlighted}: ResultItemProps) => {\n  const sectionHeading =\n    item.sectionHeading !== undefined ? (\n      <SectionHeading>\n        <IconWindow />\n        {t('From %s', item.sectionHeading)}\n        <Count>{tn('%s result', '%s results', item.sectionCount ?? 0)}</Count>\n      </SectionHeading>\n    ) : null;\n\n  if (item.empty) {\n    return (\n      <React.Fragment>\n        {sectionHeading}\n        <Empty>{t('No results from %s', item.sectionHeading)}</Empty>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {sectionHeading}\n      <SearchResultWrapper {...itemProps} highlighted={highlighted}>\n        <SearchResult highlighted={highlighted} item={item} matches={matches} />\n      </SearchResultWrapper>\n    </React.Fragment>\n  );\n};\n\n// TODO(ts): Type based on Search props once that has types\nconst HelpSearch = props => (\n  <Search\n    {...props}\n    sources={[HelpSource]}\n    minSearch={3}\n    closeOnSelect={false}\n    renderItem={renderResult}\n  />\n);\n\nconst SectionHeading = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  grid-gap: ${space(1)};\n  align-items: center;\n  background: ${p => p.theme.backgroundSecondary};\n  padding: ${space(1)} ${space(2)};\n\n  &:not(:first-of-type) {\n    border-top: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst Count = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray300};\n`;\n\nconst Empty = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n`;\n\nexport default HelpSearch;\n","import {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport HelpSearch from 'app/components/helpSearch';\nimport Hook from 'app/components/hook';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = ModalRenderProps & {\n  organization: Organization;\n  placeholder?: string;\n};\n\nfunction HelpSearchModal({\n  Body,\n  closeModal,\n  organization,\n  placeholder = t('Search for documentation, FAQs, blog posts...'),\n  ...props\n}: Props) {\n  const theme = useTheme();\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <HelpSearch\n            {...props}\n            entryPoint=\"sidebar_help\"\n            dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <Input\n                  autoFocus\n                  {...getInputProps({type: 'text', label: placeholder, placeholder})}\n                />\n              </InputWrapper>\n            )}\n            resultFooter={\n              <Hook name=\"help-modal:footer\" {...{organization, closeModal}} />\n            }\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst Input = styled('input')`\n  width: 100%;\n  padding: ${space(1)};\n  border: none;\n  border-radius: 8px;\n  outline: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nexport default withOrganization(HelpSearchModal);\n","import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Reflux from 'reflux';\n\nimport OrganizationsActions from 'app/actions/organizationsActions';\nimport {Organization} from 'app/types';\n\ntype OrganizationsStoreInterface = {\n  state: Organization[];\n  loaded: boolean;\n\n  onUpdate(org: Organization): void;\n  onChangeSlug(prev: Organization, next: Organization): void;\n  onRemoveSuccess(slug: string): void;\n  get(slug: string): Organization | undefined;\n  getAll(): Organization[];\n  remove(slug: string): void;\n  add(item: Organization): void;\n  load(items: Organization[]): void;\n};\n\nconst storeConfig: Reflux.StoreDefinition & OrganizationsStoreInterface = {\n  listenables: [OrganizationsActions],\n\n  state: [],\n  loaded: false,\n\n  // So we can use Reflux.connect in a component mixin\n  getInitialState() {\n    return this.state;\n  },\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  onUpdate(org: Organization) {\n    this.add(org);\n  },\n\n  onChangeSlug(prev: Organization, next: Organization) {\n    if (prev.slug === next.slug) {\n      return;\n    }\n\n    this.remove(prev.slug);\n    this.add(next);\n  },\n\n  onRemoveSuccess(slug: string) {\n    this.remove(slug);\n  },\n\n  get(slug: Organization['slug']) {\n    return this.state.find((item: Organization) => item.slug === slug);\n  },\n\n  getAll() {\n    return this.state;\n  },\n\n  remove(slug: Organization['slug']) {\n    this.state = this.state.filter(item => slug !== item.slug);\n    this.trigger(this.state);\n  },\n\n  add(item: Organization) {\n    let match = false;\n    this.state.forEach((existing, idx) => {\n      if (existing.id === item.id) {\n        item = {...existing, ...item};\n        this.state[idx] = item;\n        match = true;\n      }\n    });\n    if (!match) {\n      this.state = [...this.state, item];\n    }\n    this.trigger(this.state);\n  },\n\n  load(items: Organization[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(items);\n  },\n};\n\nconst OrganizationsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  OrganizationsStoreInterface;\n\nexport default OrganizationsStore;\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'app/api';\n\ntype Options = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport useApi from 'app/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["Reflux","DEFAULT_NO_ACCESS_MESSAGE","type","icon","size","t","Access","React","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","Hook","name","HookComponent","hooks","HookStore","map","cb","hookName","handleHooks","undefined","componentWillUnmount","unsubscribe","setState","state","length","parseHtmlMarks","key","htmlString","markTags","highlightPreTag","highlightPostTag","indices","value","openIndex","indexOf","openIndexEnd","slice","closeIndex","closeIndexEnd","push","MARK_TAGS","HelpSource","loading","results","SentryGlobalSearch","debounce","unbouncedSearch","componentDidMount","query","doSearch","componentDidUpdate","nextProps","platforms","items","forEach","section","sectionItems","hits","hit","title","description","text","item","sourceType","resultType","site","dompurify","extra","context","context1","to","url","matches","score","sectionHeading","sectionCount","emptyHeaderItem","empty","mapSearchResults","search","platform","standardSDKSlug","slug","isLoading","withLatestContext","withRouter","renderResult","itemProps","highlighted","SectionHeading","Count","tn","Empty","HelpSearch","sources","minSearch","closeOnSelect","renderItem","space","p","theme","backgroundSecondary","innerBorder","fontSizeSmall","gray300","subText","fontSizeMedium","HelpSearchModal","Body","closeModal","placeholder","useTheme","css","injectedCss","entryPoint","dropdownStyle","border","renderInput","getInputProps","InputWrapper","Input","autoFocus","label","resultFooter","modalCss","route","fields","help","showReturnButton","storeConfig","listenables","OrganizationsActions","loaded","getInitialState","init","onUpdate","org","add","onChangeSlug","prev","next","remove","onRemoveSuccess","get","find","getAll","filter","trigger","match","existing","idx","id","load","persistInFlight","api","providedApi","localApi","useRef","current","Client","handleCleanup","clear","useEffect","WrappedComponent","options","WithApi","propsApi","useApi","displayName","getDisplayName"],"sourceRoot":""}