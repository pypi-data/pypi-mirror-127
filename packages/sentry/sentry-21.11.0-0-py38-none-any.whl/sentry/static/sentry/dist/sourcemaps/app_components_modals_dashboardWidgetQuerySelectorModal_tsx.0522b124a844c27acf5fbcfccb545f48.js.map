{"version":3,"file":"chunks/app_components_modals_dashboardWidgetQuerySelectorModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/dashboardWidgetQuerySelectorModal.tsx","webpack:///./app/utils/analytics/performanceAnalyticsEvents.tsx","webpack:///./app/utils/analytics/trackAdvancedAnalyticsEvent.tsx","webpack:///./app/utils/analytics/growthAnalyticsEvents.tsx","webpack:///./app/utils/analytics/issueAnalyticsEvents.tsx","webpack:///./app/utils/analytics/dashboardsAnalyticsEvents.tsx","webpack:///./app/utils/analytics/discoverAnalyticsEvents.tsx","webpack:///./app/utils/analytics/workflowAnalyticsEvents.tsx","webpack:///./app/utils/isEqualWithDates.tsx","webpack:///./app/stores/globalSelectionStore.tsx","webpack:///./app/utils/withGlobalSelection.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/dashboardsV2/utils.tsx","webpack:///./app/views/dashboardsV2/widget/utils.tsx","webpack:///../node_modules/lodash/_baseIsDate.js","webpack:///../node_modules/lodash/isDate.js","webpack:///../node_modules/lodash/isEqualWith.js"],"sourcesContent":["import * as React from 'react';\nimport {Link} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {IconChevron, IconSearch} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization} from 'app/types';\nimport trackAdvancedAnalyticsEvent from 'app/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {DisplayModes} from 'app/utils/discover/types';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport {Widget} from 'app/views/dashboardsV2/types';\nimport {eventViewFromWidget} from 'app/views/dashboardsV2/utils';\nimport {DisplayType} from 'app/views/dashboardsV2/widget/utils';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\nexport type DashboardWidgetQuerySelectorModalOptions = {\n  organization: Organization;\n  widget: Widget;\n};\n\ntype Props = ModalRenderProps &\n  DashboardWidgetQuerySelectorModalOptions & {\n    api: Client;\n    organization: Organization;\n    selection: GlobalSelection;\n  };\n\nclass DashboardWidgetQuerySelectorModal extends React.Component<Props> {\n  renderQueries() {\n    const {organization, widget, selection} = this.props;\n    const querySearchBars = widget.queries.map((query, index) => {\n      const eventView = eventViewFromWidget(\n        widget.title,\n        query,\n        selection,\n        widget.displayType\n      );\n      const discoverLocation = eventView.getResultsViewUrlTarget(organization.slug);\n      // Pull a max of 3 valid Y-Axis from the widget\n      const yAxisOptions = eventView.getYAxisOptions().map(({value}) => value);\n      discoverLocation.query.yAxis = query.fields\n        .filter(field => yAxisOptions.includes(field))\n        .slice(0, 3);\n      switch (widget.displayType) {\n        case DisplayType.BAR:\n          discoverLocation.query.display = DisplayModes.BAR;\n          break;\n        default:\n          break;\n      }\n      return (\n        <React.Fragment key={index}>\n          <QueryContainer>\n            <Container>\n              <SearchLabel htmlFor=\"smart-search-input\" aria-label={t('Search events')}>\n                <IconSearch />\n              </SearchLabel>\n              <StyledInput value={query.conditions} disabled />\n            </Container>\n            <Link to={discoverLocation}>\n              <OpenInDiscoverButton\n                priority=\"primary\"\n                icon={<IconChevron size=\"xs\" direction=\"right\" />}\n                onClick={() => {\n                  trackAdvancedAnalyticsEvent(\n                    'dashboards_views.query_selector.selected',\n                    {\n                      organization,\n                      widget_type: widget.displayType,\n                    }\n                  );\n                }}\n              />\n            </Link>\n          </QueryContainer>\n        </React.Fragment>\n      );\n    });\n    return querySearchBars;\n  }\n\n  render() {\n    const {Body, Header, widget} = this.props;\n    return (\n      <React.Fragment>\n        <Header closeButton>\n          <h4>{widget.title}</h4>\n        </Header>\n        <Body>\n          <p>\n            {t(\n              'Multiple queries were used to create this widget visualization. Which query would you like to view in Discover?'\n            )}\n          </p>\n          {this.renderQueries()}\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledInput = styled(Input)`\n  text-overflow: ellipsis;\n  padding: 0px;\n  box-shadow: none;\n  height: auto;\n  &:disabled {\n    border: none;\n    cursor: default;\n  }\n`;\nconst QueryContainer = styled('div')`\n  display: flex;\n  margin-bottom: ${space(1)};\n`;\nconst OpenInDiscoverButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset ${p => p.theme.dropShadowLight};\n  background: ${p => p.theme.backgroundSecondary};\n  padding: 7px ${space(1)};\n  position: relative;\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  grid-gap: ${space(1)};\n  align-items: start;\n  flex-grow: 1;\n  border-radius: ${p => p.theme.borderRadius};\n`;\n\nconst SearchLabel = styled('label')`\n  display: flex;\n  padding: ${space(0.5)} 0;\n  margin: 0;\n  color: ${p => p.theme.gray300};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withGlobalSelection(DashboardWidgetQuerySelectorModal));\n","import {PlatformKey} from 'app/data/platformCategories';\n\ntype SampleTransactionParam = {\n  platform?: PlatformKey;\n};\n\ntype PerformanceTourParams = {\n  step: number;\n  duration: number;\n};\n\nexport type PerformanceEventParameters = {\n  'performance_views.create_sample_transaction': SampleTransactionParam;\n  'performance_views.tour.start': {};\n  'performance_views.tour.advance': PerformanceTourParams;\n  'performance_views.tour.close': PerformanceTourParams;\n  'performance_views.landingv2.transactions.sort': {\n    field?: string;\n    direction?: string;\n  };\n  'performance_views.landingv3.widget.interaction': {\n    widget_type?: string;\n  };\n  'performance_views.landingv3.widget.switch': {\n    from_widget?: string;\n    to_widget?: string;\n    from_default?: boolean;\n  };\n  'performance_views.overview.navigate.summary': {};\n  'performance_views.overview.cellaction': {action?: string};\n};\n\nexport type PerformanceEventKey = keyof PerformanceEventParameters;\n\nexport const performanceEventMap: Record<PerformanceEventKey, string | null> = {\n  'performance_views.create_sample_transaction': 'Growth: Performance Sample Transaction',\n  'performance_views.tour.start': 'Performance Views: Tour Start',\n  'performance_views.tour.advance': 'Performance Views: Tour Advance',\n  'performance_views.tour.close': 'Performance Views: Tour Close',\n  'performance_views.landingv2.transactions.sort':\n    'Performance Views: Landing Transactions Sorted',\n  'performance_views.overview.navigate.summary':\n    'Performance Views: Overview view summary',\n  'performance_views.overview.cellaction': 'Performance Views: Cell Action Clicked',\n  'performance_views.landingv3.widget.interaction':\n    'Performance Views: Landing Widget Interaction',\n  'performance_views.landingv3.widget.switch':\n    'Performance Views: Landing Widget Switched',\n};\n","import {dashboardsEventMap, DashboardsEventParameters} from './dashboardsAnalyticsEvents';\nimport {discoverEventMap, DiscoverEventParameters} from './discoverAnalyticsEvents';\nimport {growthEventMap, GrowthEventParameters} from './growthAnalyticsEvents';\nimport {issueEventMap, IssueEventParameters} from './issueAnalyticsEvents';\nimport makeAnalyticsFunction from './makeAnalyticsFunction';\nimport {\n  performanceEventMap,\n  PerformanceEventParameters,\n} from './performanceAnalyticsEvents';\nimport {TeamInsightsEventParameters, workflowEventMap} from './workflowAnalyticsEvents';\n\ntype EventParameters = GrowthEventParameters &\n  IssueEventParameters &\n  PerformanceEventParameters &\n  DashboardsEventParameters &\n  DiscoverEventParameters &\n  TeamInsightsEventParameters;\n\nconst allEventMap = {\n  ...growthEventMap,\n  ...issueEventMap,\n  ...performanceEventMap,\n  ...dashboardsEventMap,\n  ...discoverEventMap,\n  ...workflowEventMap,\n};\n\n/**\n * Generic typed analytics function for growth, issue, and performance events.\n * Can split up analytics functions to a smaller set of events like we do for trackIntegrationAnalytics\n */\nconst trackAdvancedAnalyticsEvent = makeAnalyticsFunction<EventParameters>(allEventMap);\n\nexport default trackAdvancedAnalyticsEvent;\n","import {PlatformKey} from 'app/data/platformCategories';\n\ntype MobilePromptBannerParams = {\n  matchedUserAgentString: string;\n};\n\ntype ShowParams = MobilePromptBannerParams & {\n  matchedUserAgentString: string;\n  mobileEventBrowserName: string;\n  mobileEventClientOsName: string;\n};\n\ntype PlatformParam = {\n  platform: PlatformKey;\n};\n\ntype PlatformCategory = {\n  category: string;\n  source?: string;\n};\n\ntype PlatformPickerParam = {\n  platform_id: string;\n  source?: string;\n};\n\ntype PlatformSearchParam = {\n  search: string;\n  num_results: number;\n  source?: string;\n};\n\ntype SampleEventParam = {\n  platform?: PlatformKey;\n};\n\ntype InviteRequestParam = {\n  member_id: number;\n  invite_status: string;\n};\n\n// define the event key to payload mappings\nexport type GrowthEventParameters = {\n  'growth.show_mobile_prompt_banner': ShowParams;\n  'growth.dismissed_mobile_prompt_banner': MobilePromptBannerParams;\n  'growth.opened_mobile_project_suggest_modal': MobilePromptBannerParams;\n  'growth.clicked_mobile_prompt_setup_project': MobilePromptBannerParams;\n  'growth.clicked_mobile_prompt_ask_teammate': MobilePromptBannerParams;\n  'growth.submitted_mobile_prompt_ask_teammate': MobilePromptBannerParams;\n  'growth.demo_click_get_started': {is_upgrade: boolean};\n  'growth.demo_click_docs': {};\n  'growth.demo_click_request_demo': {};\n  'growth.onboarding_load_choose_platform': {};\n  'growth.onboarding_set_up_your_project': PlatformParam;\n  'growth.select_platform': PlatformPickerParam;\n  'growth.platformpicker_category': PlatformCategory;\n  'growth.platformpicker_search': PlatformSearchParam;\n  'growth.onboarding_start_onboarding': {};\n  'growth.onboarding_take_to_error': {};\n  'growth.onboarding_view_full_docs': {};\n  'growth.onboarding_view_sample_event': SampleEventParam;\n  'invite_request.approved': InviteRequestParam;\n  'invite_request.denied': InviteRequestParam;\n  'growth.demo_modal_clicked_signup': {};\n  'growth.demo_modal_clicked_continue': {};\n  'growth.sample_transaction_docs_link_clicked': {\n    project_id: string;\n  };\n  'growth.sample_error_onboarding_link_clicked': {\n    project_id: string;\n    platform?: string;\n  };\n  'growth.issue_open_in_discover_btn_clicked': {};\n};\n\ntype GrowthAnalyticsKey = keyof GrowthEventParameters;\n\nexport const growthEventMap: Record<GrowthAnalyticsKey, string> = {\n  'growth.show_mobile_prompt_banner': 'Growth: Show Mobile Prompt Banner',\n  'growth.dismissed_mobile_prompt_banner': 'Growth: Dismissed Mobile Prompt Banner',\n  'growth.opened_mobile_project_suggest_modal':\n    'Growth: Open Mobile Project Suggest Modal',\n  'growth.clicked_mobile_prompt_setup_project':\n    'Growth: Clicked Mobile Prompt Setup Project',\n  'growth.clicked_mobile_prompt_ask_teammate':\n    'Growth: Clicked Mobile Prompt Ask Teammate',\n  'growth.submitted_mobile_prompt_ask_teammate':\n    'Growth: Submitted Mobile Prompt Ask Teammate',\n  'growth.demo_click_get_started': 'Growth: Demo Click Get Started',\n  'growth.demo_click_docs': 'Growth: Demo Click Docs',\n  'growth.demo_click_request_demo': 'Growth: Demo Click Request Demo',\n  'growth.onboarding_load_choose_platform':\n    'Growth: Onboarding Load Choose Platform Page',\n  'growth.onboarding_set_up_your_project': 'Growth: Onboarding Click Set Up Your Project',\n  'growth.select_platform': 'Growth: Onboarding Choose Platform',\n  'growth.platformpicker_category': 'Growth: Onboarding Platform Category',\n  'growth.platformpicker_search': 'Growth: Onboarding Platform Search',\n  'growth.onboarding_start_onboarding': 'Growth: Onboarding Start Onboarding',\n  'growth.onboarding_take_to_error': 'Growth: Onboarding Take to Error',\n  'growth.onboarding_view_full_docs': 'Growth: Onboarding View Full Docs',\n  'growth.onboarding_view_sample_event': 'Growth: Onboarding View Sample Event',\n  'invite_request.approved': 'Invite Request Approved',\n  'invite_request.denied': 'Invite Request Denied',\n  'growth.demo_modal_clicked_signup': 'Growth: Demo Modal Clicked Signup',\n  'growth.demo_modal_clicked_continue': 'Growth: Demo Modal Clicked Continue',\n  'growth.sample_transaction_docs_link_clicked':\n    'Growth: Sample Transacton Docs Link Clicked',\n  'growth.sample_error_onboarding_link_clicked':\n    'Growth: Sample Transacton Onboarding Link Clicked',\n  'growth.issue_open_in_discover_btn_clicked':\n    'Growth: Open in Discover Button in Issue Details clicked',\n};\n","export type IssueEventParameters = {\n  'event_cause.viewed': {\n    project_id?: string;\n    platform?: string;\n  };\n  'event_cause.docs_clicked': {};\n  'event_cause.snoozed': {};\n  'event_cause.dismissed': {};\n  'issue_error_banner.viewed': {\n    error_type: string[];\n    error_message: string[];\n    group?: string;\n    platform?: string;\n  };\n  'issues_tab.viewed': {\n    tab: string;\n    num_issues: number;\n  };\n  'issue_search.failed': {\n    search_type: string;\n    search_source: string;\n    error: string;\n  };\n  'search.searched': {\n    query: string;\n    search_type: string;\n    search_source: string;\n  };\n  'organization_saved_search.selected': {\n    search_type: string;\n    id: number;\n  };\n  'issue.search_sidebar_clicked': {};\n};\n\nexport type IssueEventKey = keyof IssueEventParameters;\n\nexport const issueEventMap: Record<IssueEventKey, string | null> = {\n  'event_cause.viewed': null, // send to main event store only due to high event volume\n  'event_cause.docs_clicked': 'Event Cause Docs Clicked',\n  'event_cause.snoozed': 'Event Cause Snoozed',\n  'event_cause.dismissed': 'Event Cause Dismissed',\n  'issue_error_banner.viewed': 'Issue Error Banner Viewed',\n  'issues_tab.viewed': 'Viewed Issues Tab', // high volume but send to our secondary event store anyways\n  'issue_search.failed': 'Issue Search: Failed',\n  'search.searched': 'Search: Performed search',\n  'organization_saved_search.selected':\n    'Organization Saved Search: Selected saved search',\n  'issue.search_sidebar_clicked': 'Issue Search Sidebar Clicked',\n};\n","export type DashboardsEventParameters = {\n  'dashboards_views.add_widget_modal.opened': {};\n  'dashboards_views.add_widget_modal.change': {\n    from: string;\n    field: string;\n    value: string;\n  };\n  'dashboards_views.edit_widget_modal.opened': {};\n  'dashboards_views.query_selector.opened': {\n    widget_type: string;\n  };\n  'dashboards_views.query_selector.selected': {\n    widget_type: string;\n  };\n  'dashboards_views.open_in_discover.opened': {\n    widget_type: string;\n  };\n};\n\nexport type DashboardsEventKey = keyof DashboardsEventParameters;\n\nexport const dashboardsEventMap: Record<DashboardsEventKey, string | null> = {\n  'dashboards_views.add_widget_modal.opened': 'Dashboards2: Add Widget Modal opened',\n  'dashboards_views.add_widget_modal.change':\n    'Dashboards2: Field changed in Add Widget Modal',\n  'dashboards_views.edit_widget_modal.opened': 'Dashboards2: Edit Widget Modal Opened',\n  'dashboards_views.query_selector.opened':\n    'Dashboards2: Query Selector opened for Widget',\n  'dashboards_views.query_selector.selected':\n    'Dashboards2: Query selected in Query Selector',\n  'dashboards_views.open_in_discover.opened': 'Dashboards2: Widget Opened In Discover',\n};\n","export type DiscoverEventParameters = {\n  'discover_views.add_to_dashboard.modal_open': {saved_query: boolean};\n  'discover_views.add_to_dashboard.confirm': {};\n};\n\nexport type DiscoverEventKey = keyof DiscoverEventParameters;\n\nexport const discoverEventMap: Record<DiscoverEventKey, string | null> = {\n  'discover_views.add_to_dashboard.modal_open':\n    'Discover2: Add to Dashboard modal opened',\n  'discover_views.add_to_dashboard.confirm':\n    'Discover2: Add to Dashboard modal form submitted',\n};\n","export type TeamInsightsEventParameters = {\n  'team_insights.viewed': {};\n};\n\nexport type TeamInsightsEventKey = keyof TeamInsightsEventParameters;\n\nexport const workflowEventMap: Record<TeamInsightsEventKey, string | null> = {\n  'team_insights.viewed': 'Team Insights: Viewed',\n};\n","import isDate from 'lodash/isDate';\nimport isEqualWith from 'lodash/isEqualWith';\n\n// `lodash.isEqual` does not compare date objects\nfunction dateComparator(value: any, other: any): boolean | undefined {\n  if (isDate(value) && isDate(other)) {\n    return +value === +other;\n  }\n\n  // Loose checking\n  if (!value && !other) {\n    return true;\n  }\n\n  // returning undefined will use default comparator\n  return undefined;\n}\n\nexport const isEqualWithDates = (a: any, b: any) => isEqualWith(a, b, dateComparator);\n","import isEqual from 'lodash/isEqual';\nimport Reflux from 'reflux';\n\nimport GlobalSelectionActions from 'app/actions/globalSelectionActions';\nimport {getDefaultSelection} from 'app/components/organizations/globalSelectionHeader/utils';\nimport {LOCAL_STORAGE_KEY} from 'app/constants/globalSelectionHeader';\nimport OrganizationsStore from 'app/stores/organizationsStore';\nimport {GlobalSelection, Organization} from 'app/types';\nimport {isEqualWithDates} from 'app/utils/isEqualWithDates';\nimport localStorage from 'app/utils/localStorage';\n\nimport {CommonStoreInterface} from './types';\n\ntype UpdateData = {\n  project: number[];\n  environment: string[];\n};\n\ntype State = {\n  selection: GlobalSelection;\n  isReady: boolean;\n};\n\ntype GlobalSelectionStoreInterface = CommonStoreInterface<State> & {\n  state: GlobalSelection;\n\n  reset(state?: GlobalSelection): void;\n  onReset(): void;\n  isReady(): boolean;\n  onSetOrganization(organization: Organization): void;\n  onInitializeUrlState(newSelection: GlobalSelection): void;\n  updateProjects(\n    projects: GlobalSelection['projects'],\n    environments: null | string[]\n  ): void;\n  updateDateTime(datetime: GlobalSelection['datetime']): void;\n  updateEnvironments(environments: string[]): void;\n  onSave(data: UpdateData): void;\n};\n\nconst storeConfig: Reflux.StoreDefinition & GlobalSelectionStoreInterface = {\n  state: getDefaultSelection(),\n\n  init() {\n    this.reset(this.state);\n    this.listenTo(GlobalSelectionActions.reset, this.onReset);\n    this.listenTo(GlobalSelectionActions.initializeUrlState, this.onInitializeUrlState);\n    this.listenTo(GlobalSelectionActions.setOrganization, this.onSetOrganization);\n    this.listenTo(GlobalSelectionActions.save, this.onSave);\n    this.listenTo(GlobalSelectionActions.updateProjects, this.updateProjects);\n    this.listenTo(GlobalSelectionActions.updateDateTime, this.updateDateTime);\n    this.listenTo(GlobalSelectionActions.updateEnvironments, this.updateEnvironments);\n  },\n\n  reset(state) {\n    // Has passed the enforcement state\n    this._hasEnforcedProject = false;\n    this._hasInitialState = false;\n    this.state = state || getDefaultSelection();\n  },\n\n  isReady() {\n    return this._hasInitialState;\n  },\n\n  onSetOrganization(organization) {\n    this.organization = organization;\n  },\n\n  /**\n   * Initializes the global selection store data\n   */\n  onInitializeUrlState(newSelection) {\n    this._hasInitialState = true;\n    this.state = newSelection;\n    this.trigger(this.getState());\n  },\n\n  getState() {\n    return {\n      selection: this.state,\n      isReady: this.isReady(),\n    };\n  },\n\n  onReset() {\n    this.reset();\n    this.trigger(this.getState());\n  },\n\n  updateProjects(projects = [], environments = null) {\n    if (isEqual(this.state.projects, projects)) {\n      return;\n    }\n\n    this.state = {\n      ...this.state,\n      projects,\n      environments: environments === null ? this.state.environments : environments,\n    };\n    this.trigger(this.getState());\n  },\n\n  updateDateTime(datetime) {\n    if (isEqualWithDates(this.state.datetime, datetime)) {\n      return;\n    }\n\n    this.state = {\n      ...this.state,\n      datetime,\n    };\n    this.trigger(this.getState());\n  },\n\n  updateEnvironments(environments) {\n    if (isEqual(this.state.environments, environments)) {\n      return;\n    }\n\n    this.state = {\n      ...this.state,\n      environments: environments ?? [],\n    };\n    this.trigger(this.getState());\n  },\n\n  /**\n   * Save to local storage when user explicitly changes header values.\n   *\n   * e.g. if localstorage is empty, user loads issue details for project \"foo\"\n   * this should not consider \"foo\" as last used and should not save to local storage.\n   *\n   * However, if user then changes environment, it should...? Currently it will\n   * save the current project alongside environment to local storage. It's debatable if\n   * this is the desired behavior.\n   */\n  onSave(updateObj: UpdateData) {\n    // Do nothing if no org is loaded or user is not an org member. Only\n    // organizations that a user has membership in will be available via the\n    // organizations store\n    if (!this.organization || !OrganizationsStore.get(this.organization.slug)) {\n      return;\n    }\n\n    const {project, environment} = updateObj;\n    const validatedProject = typeof project === 'string' ? [Number(project)] : project;\n    const validatedEnvironment =\n      typeof environment === 'string' ? [environment] : environment;\n\n    try {\n      const localStorageKey = `${LOCAL_STORAGE_KEY}:${this.organization.slug}`;\n      const dataToSave = {\n        projects: validatedProject || this.selection.projects,\n        environments: validatedEnvironment || this.selection.environments,\n      };\n      localStorage.setItem(localStorageKey, JSON.stringify(dataToSave));\n    } catch (ex) {\n      // Do nothing\n    }\n  },\n};\n\nconst GlobalSelectionStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  GlobalSelectionStoreInterface;\n\nexport default GlobalSelectionStore;\n","import * as React from 'react';\n\nimport GlobalSelectionStore from 'app/stores/globalSelectionStore';\nimport {GlobalSelection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedGlobalSelectionProps = {\n  selection?: GlobalSelection;\n  isGlobalSelectionReady?: boolean;\n};\n\ntype State = {\n  selection: GlobalSelection;\n  isReady?: boolean;\n};\n\n/**\n * Higher order component that uses GlobalSelectionStore and provides the\n * active project\n */\nfunction withGlobalSelection<P extends InjectedGlobalSelectionProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithGlobalSelection extends React.Component<\n    Omit<P, keyof InjectedGlobalSelectionProps> & Partial<InjectedGlobalSelectionProps>,\n    State\n  > {\n    static displayName = `withGlobalSelection(${getDisplayName(WrappedComponent)})`;\n\n    state = GlobalSelectionStore.getState();\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = GlobalSelectionStore.listen((selection: State) => {\n      if (this.state !== selection) {\n        this.setState(selection);\n      }\n    }, undefined);\n\n    render() {\n      const {isReady, selection} = this.state;\n\n      return (\n        <WrappedComponent\n          selection={selection as GlobalSelection}\n          isGlobalSelectionReady={isReady}\n          {...(this.props as P)}\n        />\n      );\n    }\n  }\n\n  return WithGlobalSelection;\n}\n\nexport default withGlobalSelection;\n","import {User} from 'app/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n}\n","import {Query} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pick from 'lodash/pick';\n\nimport WidgetArea from 'sentry-images/dashboard/widget-area.svg';\nimport WidgetBar from 'sentry-images/dashboard/widget-bar.svg';\nimport WidgetBigNumber from 'sentry-images/dashboard/widget-big-number.svg';\nimport WidgetLine from 'sentry-images/dashboard/widget-line-1.svg';\nimport WidgetTable from 'sentry-images/dashboard/widget-table.svg';\nimport WidgetWorldMap from 'sentry-images/dashboard/widget-world-map.svg';\n\nimport {GlobalSelection} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\n\nimport {DashboardDetails, DisplayType, Widget, WidgetQuery} from './types';\n\nexport function cloneDashboard(dashboard: DashboardDetails): DashboardDetails {\n  return cloneDeep(dashboard);\n}\n\nexport function eventViewFromWidget(\n  title: string,\n  query: WidgetQuery,\n  selection: GlobalSelection,\n  widgetType?: DisplayType\n): EventView {\n  const {start, end, period: statsPeriod} = selection.datetime;\n  const {projects, environments} = selection;\n\n  // World Map requires an additional column (geo.country_code) to display in discover when navigating from the widget\n  const fields =\n    widgetType === DisplayType.WORLD_MAP\n      ? ['geo.country_code', ...query.fields]\n      : query.fields;\n  const conditions =\n    widgetType === DisplayType.WORLD_MAP\n      ? `${query.conditions} has:geo.country_code`\n      : query.conditions;\n\n  return EventView.fromSavedQuery({\n    id: undefined,\n    name: title,\n    version: 2,\n    fields,\n    query: conditions,\n    orderby: query.orderby,\n    projects,\n    range: statsPeriod,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n}\n\nfunction coerceStringToArray(value?: string | string[] | null) {\n  return typeof value === 'string' ? [value] : value;\n}\n\nexport function constructWidgetFromQuery(query?: Query): Widget | undefined {\n  if (query) {\n    const queryNames = coerceStringToArray(query.queryNames);\n    const queryConditions = coerceStringToArray(query.queryConditions);\n    const queryFields = coerceStringToArray(query.queryFields);\n    const queries: WidgetQuery[] = [];\n    if (\n      queryConditions &&\n      queryNames &&\n      queryFields &&\n      typeof query.queryOrderby === 'string'\n    ) {\n      queryConditions.forEach((condition, index) => {\n        queries.push({\n          name: queryNames[index],\n          conditions: condition,\n          fields: queryFields,\n          orderby: query.queryOrderby as string,\n        });\n      });\n    }\n    if (query.title && query.displayType && query.interval && queries.length > 0) {\n      const newWidget: Widget = {\n        ...(pick(query, ['title', 'displayType', 'interval']) as {\n          title: string;\n          displayType: DisplayType;\n          interval: string;\n        }),\n        queries,\n      };\n      return newWidget;\n    }\n  }\n  return undefined;\n}\n\nexport function miniWidget(displayType: DisplayType): string {\n  switch (displayType) {\n    case DisplayType.BAR:\n      return WidgetBar;\n    case DisplayType.AREA:\n    case DisplayType.TOP_N:\n      return WidgetArea;\n    case DisplayType.BIG_NUMBER:\n      return WidgetBigNumber;\n    case DisplayType.TABLE:\n      return WidgetTable;\n    case DisplayType.WORLD_MAP:\n      return WidgetWorldMap;\n    case DisplayType.LINE:\n    default:\n      return WidgetLine;\n  }\n}\n","import {t} from 'app/locale';\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport enum DataSet {\n  EVENTS = 'events',\n  METRICS = 'metrics',\n}\n\nexport const displayTypes = {\n  [DisplayType.AREA]: t('Area Chart'),\n  [DisplayType.BAR]: t('Bar Chart'),\n  [DisplayType.LINE]: t('Line Chart'),\n  [DisplayType.TABLE]: t('Table'),\n  [DisplayType.WORLD_MAP]: t('World Map'),\n  [DisplayType.BIG_NUMBER]: t('Big Number'),\n  [DisplayType.TOP_N]: t('Top 5 Events'),\n};\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nmodule.exports = baseIsDate;\n","var baseIsDate = require('./_baseIsDate'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nmodule.exports = isDate;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nmodule.exports = isEqualWith;\n"],"names":["DashboardWidgetQuerySelectorModal","React","renderQueries","organization","widget","selection","this","props","queries","map","query","index","eventView","eventViewFromWidget","title","displayType","discoverLocation","getResultsViewUrlTarget","slug","yAxisOptions","getYAxisOptions","value","yAxis","fields","filter","field","includes","slice","DisplayType","display","DisplayModes","QueryContainer","Container","SearchLabel","htmlFor","t","StyledInput","conditions","disabled","Link","to","OpenInDiscoverButton","priority","icon","size","direction","onClick","trackAdvancedAnalyticsEvent","widget_type","render","Body","Header","closeButton","Input","space","Button","p","theme","border","dropShadowLight","backgroundSecondary","borderRadius","gray300","modalCss","withApi","withGlobalSelection","makeAnalyticsFunction","dateComparator","other","isDate","storeConfig","state","getDefaultSelection","init","reset","listenTo","GlobalSelectionActions","onReset","onInitializeUrlState","onSetOrganization","onSave","updateProjects","updateDateTime","updateEnvironments","_hasEnforcedProject","_hasInitialState","isReady","newSelection","trigger","getState","projects","environments","isEqual","datetime","a","b","isEqualWith","updateObj","OrganizationsStore","project","environment","validatedProject","Number","validatedEnvironment","localStorageKey","LOCAL_STORAGE_KEY","dataToSave","localStorage","JSON","stringify","ex","Reflux","WrappedComponent","WithGlobalSelection","GlobalSelectionStore","setState","undefined","componentWillUnmount","unsubscribe","isGlobalSelectionReady","getDisplayName","MAX_WIDGETS","DashboardState","cloneDashboard","dashboard","cloneDeep","widgetType","start","end","period","statsPeriod","EventView","id","name","version","orderby","range","getUtcDateString","coerceStringToArray","constructWidgetFromQuery","queryNames","queryConditions","queryFields","queryOrderby","forEach","condition","push","interval","length","pick","miniWidget","WidgetBar","WidgetArea","WidgetBigNumber","WidgetTable","WidgetWorldMap","WidgetLine","DataSet","displayTypes","AREA","BAR","LINE","TABLE","WORLD_MAP","BIG_NUMBER","TOP_N","baseGetTag","isObjectLike","module","exports","baseIsDate","baseUnary","nodeUtil","nodeIsDate","baseIsEqual","customizer","result"],"sourceRoot":""}