{"version":3,"file":"chunks/app_views_performance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"whBAeA,MAAMA,UAA6BC,EAAAA,UACjCC,iBACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,6CAK/BC,SACE,MAAM,aAACC,EAAD,SAAeC,GAAYC,KAAKC,MAEtC,OACE,QAAC,IAAD,CACEC,SAAS,oCACTC,SAAU,CAAC,oBACXL,aAAcA,EACdM,eAAgBJ,KAAKN,eAJvB,UAME,QAAC,KAAD,UAAgCK,OAnBlCP,EAAAA,YAAAA,uBAyBN,SAAea,EAAAA,EAAAA,GAAiBb,I,ilBC9BhC,MAAMc,EAAe,yBAMrB,SAASC,IACP,MAAMT,GAAeU,EAAAA,EAAAA,MACf,cAACC,EAAD,iBAAgBC,GAAoBC,IAE1C,OACE,QAAC,IAAD,CAASR,SAAU,CAACG,GAAeR,aAAcA,EAAjD,UACE,QAACc,EAAD,YACGhB,EAAAA,EAAAA,GAAE,iBACH,QAAC,IAAD,CACEiB,SAAUJ,EACVK,OAAQ,IAAMJ,GAAkBD,GAChCM,KAAK,YAXNR,EAAAA,YAAAA,gBAkBT,MAAMK,GAAQ,OAAO,QAAP,qBAAH,+EAKFI,EAAAA,EAAAA,GAAM,GALJ,wBASLC,GAAuBC,EAAAA,EAAAA,eAAc,CACzCT,eAAe,EACfC,iBAAmBS,QAGrB,SAASC,GAA8B,SAACrB,IACtC,MAAMD,GAAeU,EAAAA,EAAAA,KACfa,EAAkB,uBAAH,OAA0BvB,EAAawB,OACrDb,EAAeC,IAAoBa,EAAAA,EAAAA,UACE,SAA1CC,EAAAA,EAAAA,QAAqBH,IAQvB,OACE,QAACJ,EAAqBQ,SAAtB,CACEC,MAAO,CACLjB,cAAeA,GAAiBX,EAAaK,SAASwB,SAASrB,GAC/DI,iBATN,SAAgCgB,GAC9BF,EAAAA,EAAAA,QAAqBH,EAAiBK,EAAME,YAC5ClB,EAAiBgB,KAIjB,SAMG3B,IAKP,SAASY,IAGP,OAFqBkB,EAAAA,EAAAA,YAAWZ,GAzBzBG,EAAAA,YAAAA","sources":["webpack:///./app/views/performance/index.tsx","webpack:///./app/views/performance/metricsSwitch.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport {MetricsSwitchContextContainer} from './metricsSwitch';\n\ntype Props = {\n  organization: Organization;\n};\n\nclass PerformanceContainer extends Component<Props> {\n  renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  render() {\n    const {organization, children} = this.props;\n\n    return (\n      <Feature\n        hookName=\"feature-disabled:performance-page\"\n        features={['performance-view']}\n        organization={organization}\n        renderDisabled={this.renderNoAccess}\n      >\n        <MetricsSwitchContextContainer>{children}</MetricsSwitchContextContainer>\n      </Feature>\n    );\n  }\n}\n\nexport default withOrganization(PerformanceContainer);\n","import {createContext, ReactNode, useContext, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport Switch from 'app/components/switchButton';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport localStorage from 'app/utils/localStorage';\nimport useOrganization from 'app/utils/useOrganization';\n\nconst FEATURE_FLAG = 'metrics-performance-ui';\n\n/**\n * This is a temporary component used for debugging metrics data on performance pages.\n * Visible only to small amount of internal users.\n */\nfunction MetricsSwitch() {\n  const organization = useOrganization();\n  const {isMetricsData, setIsMetricsData} = useMetricsSwitch();\n\n  return (\n    <Feature features={[FEATURE_FLAG]} organization={organization}>\n      <Label>\n        {t('Metrics Data')}\n        <Switch\n          isActive={isMetricsData}\n          toggle={() => setIsMetricsData(!isMetricsData)}\n          size=\"lg\"\n        />\n      </Label>\n    </Feature>\n  );\n}\n\nconst Label = styled('label')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 0;\n  gap: ${space(1)};\n  font-weight: normal;\n`;\n\nconst MetricsSwitchContext = createContext({\n  isMetricsData: false,\n  setIsMetricsData: (_isMetricsData: boolean) => {},\n});\n\nfunction MetricsSwitchContextContainer({children}: {children: ReactNode}) {\n  const organization = useOrganization();\n  const localStorageKey = `metrics-performance:${organization.slug}`;\n  const [isMetricsData, setIsMetricsData] = useState(\n    localStorage.getItem(localStorageKey) === 'true'\n  );\n\n  function handleSetIsMetricsData(value: boolean) {\n    localStorage.setItem(localStorageKey, value.toString());\n    setIsMetricsData(value);\n  }\n\n  return (\n    <MetricsSwitchContext.Provider\n      value={{\n        isMetricsData: isMetricsData && organization.features.includes(FEATURE_FLAG),\n        setIsMetricsData: handleSetIsMetricsData,\n      }}\n    >\n      {children}\n    </MetricsSwitchContext.Provider>\n  );\n}\n\nfunction useMetricsSwitch() {\n  const contextValue = useContext(MetricsSwitchContext);\n\n  return contextValue;\n}\n\nexport {MetricsSwitch, MetricsSwitchContextContainer, useMetricsSwitch};\n"],"names":["PerformanceContainer","Component","renderNoAccess","type","t","render","organization","children","this","props","hookName","features","renderDisabled","withOrganization","FEATURE_FLAG","MetricsSwitch","useOrganization","isMetricsData","setIsMetricsData","useMetricsSwitch","Label","isActive","toggle","size","space","MetricsSwitchContext","createContext","_isMetricsData","MetricsSwitchContextContainer","localStorageKey","slug","useState","localStorage","Provider","value","includes","toString","useContext"],"sourceRoot":""}