{"version":3,"file":"chunks/app_components_modals_sudoModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/modals/sudoModal.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'app/api';\nimport {Authenticator} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\nimport U2fSign from './u2fsign';\n\ntype Props = {\n  api: Client;\n  onTap: U2fSign['props']['onTap'];\n  displayMode?: U2fSign['props']['displayMode'];\n  className?: string;\n};\ntype State = {\n  authenticators: Array<Authenticator>;\n};\n\nclass U2fContainer extends Component<Props, State> {\n  state: State = {\n    authenticators: [],\n  };\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  render() {\n    const {className} = this.props;\n    const {authenticators} = this.state;\n\n    if (!authenticators.length) {\n      return null;\n    }\n\n    return (\n      <div className={className}>\n        {authenticators.map(auth =>\n          auth.id === 'u2f' && auth.challenge ? (\n            <U2fSign key={auth.id} {...this.props} challengeData={auth.challenge} />\n          ) : null\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withApi(U2fContainer);\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport U2fContainer from 'app/components/u2f/u2fContainer';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport Form from 'app/views/settings/components/forms/form';\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    closeModal: () => void;\n    /**\n     * User is a superuser without an active su session\n     */\n    superuser?: boolean;\n    /**\n     * expects a function that returns a Promise\n     */\n    retryRequest?: () => Promise<any>;\n  };\n\ntype State = {\n  error: boolean;\n  busy: boolean;\n};\n\nclass SudoModal extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    busy: false,\n  };\n\n  handleSuccess = () => {\n    const {closeModal, superuser, location, router, retryRequest} = this.props;\n\n    if (!retryRequest) {\n      closeModal();\n      return;\n    }\n\n    if (superuser) {\n      router.replace({pathname: location.pathname, state: {forceUpdate: new Date()}});\n      return;\n    }\n\n    this.setState({busy: true}, () => {\n      retryRequest().then(() => {\n        this.setState({busy: false}, closeModal);\n      });\n    });\n  };\n\n  handleError = () => {\n    this.setState({busy: false, error: true});\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    this.setState({busy: true});\n\n    const {api} = this.props;\n\n    try {\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({busy: false});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  renderBodyContent() {\n    const {superuser} = this.props;\n    const {error} = this.state;\n    const user = ConfigStore.get('user');\n\n    if (!user.hasPasswordAuth) {\n      return (\n        <React.Fragment>\n          <TextBlock>{t('You will need to reauthenticate to continue.')}</TextBlock>\n          <Button\n            priority=\"primary\"\n            href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}\n          >\n            {t('Continue')}\n          </Button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <StyledTextBlock>\n          {superuser\n            ? t(\n                'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n              )\n            : t('Help us keep your account safe by confirming your identity.')}\n        </StyledTextBlock>\n\n        {error && (\n          <StyledAlert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            {t('Incorrect password')}\n          </StyledAlert>\n        )}\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={t('Confirm Password')}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          hideFooter={!user.hasPasswordAuth}\n          resetOnError\n        >\n          <StyledInputField\n            type=\"password\"\n            inline={false}\n            label={t('Password')}\n            name=\"password\"\n            autoFocus\n            flexibleControlStateSize\n          />\n          <U2fContainer displayMode=\"sudo\" onTap={this.handleU2fTap} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton>{t('Confirm Password to Continue')}</Header>\n        <Body>{this.renderBodyContent()}</Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(withApi(SudoModal));\nexport {SudoModal};\n\nconst StyledTextBlock = styled(TextBlock)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledInputField = styled(InputField)`\n  padding-left: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ChallengeData} from 'app/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = JSON.stringify(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      promise = u2f.sign(this.props.challengeData.authenticateRequests);\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, registeredKeys} = this.props.challengeData;\n      promise = u2f.register(registerRequests as any, registeredKeys as any);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n    this.submitU2fResponse(promise);\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'app/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'app/api';\n\ntype Options = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport useApi from 'app/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["U2fContainer","Component","authenticators","componentDidMount","this","getAuthenticators","api","props","requestPromise","setState","render","className","state","length","map","auth","id","challenge","challengeData","withApi","SudoModal","React","error","busy","closeModal","superuser","location","router","retryRequest","replace","pathname","forceUpdate","Date","then","async","method","data","handleSuccess","err","renderBodyContent","user","ConfigStore","hasPasswordAuth","StyledTextBlock","t","StyledAlert","type","icon","size","apiMethod","apiEndpoint","submitLabel","onSubmitSuccess","onSubmitError","handleError","hideFooter","resetOnError","StyledInputField","inline","label","name","autoFocus","flexibleControlStateSize","displayMode","onTap","handleU2fTap","priority","href","encodeURIComponent","Header","Body","closeButton","withRouter","TextBlock","space","InputField","Alert","U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","invokeU2fFlow","ref","form","value","JSON","stringify","supportMail","support","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","supported","u2f","submitU2fResponse","promise","u2fResponse","response","catch","submit","failure","metaData","flowMode","Sentry","authenticateRequests","Error","registerRequests","registeredKeys","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","bindChallengeElement","bindResponseElement","MESSAGES","signin","sudo","enroll","U2fSign","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","handleCleanup","clear","useEffect","WrappedComponent","options","WithApi","propsApi","useApi","displayName","getDisplayName"],"sourceRoot":""}