{"version":3,"file":"chunks/app_views_dashboardsV2_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"k0BAoBA,SAASA,EAAgBC,GACvB,MAAM,aAACC,EAAD,SAAeC,GAAYF,GAC1BG,EAAWC,IAAgBC,EAAAA,EAAAA,YAS5BC,GAAYC,EAAAA,EAAAA,IAAeC,EAAAA,IAQjC,OAPAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,GAAoBC,EAAAA,EAAAA,IAAyBT,EAASU,OAC5DR,EAAaM,GACTA,GACFG,EAAAA,eAAAA,QAAuBX,EAASY,YAEjC,CAACb,EAAac,QAEf,QAAC,IAAD,CACEC,SAAU,CAAC,mBACXf,aAAcD,EAAMC,aACpBgB,eApBJ,WACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,8CAc7B,UAKE,QAAC,IAAD,IACMnB,EACJoB,aAAcC,EAAAA,GAAAA,OACdf,UAAWA,EACXgB,WAAY,GACZnB,UAAWA,MA9BVJ,EAAAA,YAAAA,kBAoCT,SAAewB,EAAAA,EAAAA,GAAiBxB","sources":["webpack:///./app/views/dashboardsV2/create.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport {EMPTY_DASHBOARD} from './data';\nimport DashboardDetail from './detail';\nimport {DashboardState, Widget} from './types';\nimport {cloneDashboard, constructWidgetFromQuery} from './utils';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction CreateDashboard(props: Props) {\n  const {organization, location} = props;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  function renderDisabled() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  const dashboard = cloneDashboard(EMPTY_DASHBOARD);\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    if (constructedWidget) {\n      browserHistory.replace(location.pathname);\n    }\n  }, [organization.slug]);\n  return (\n    <Feature\n      features={['dashboards-edit']}\n      organization={props.organization}\n      renderDisabled={renderDisabled}\n    >\n      <DashboardDetail\n        {...props}\n        initialState={DashboardState.CREATE}\n        dashboard={dashboard}\n        dashboards={[]}\n        newWidget={newWidget}\n      />\n    </Feature>\n  );\n}\n\nexport default withOrganization(CreateDashboard);\n"],"names":["CreateDashboard","props","organization","location","newWidget","setNewWidget","useState","dashboard","cloneDashboard","EMPTY_DASHBOARD","useEffect","constructedWidget","constructWidgetFromQuery","query","browserHistory","pathname","slug","features","renderDisabled","type","t","initialState","DashboardState","dashboards","withOrganization"],"sourceRoot":""}