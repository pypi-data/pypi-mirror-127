{"version":3,"file":"chunks/app_components_forms_teamSelector_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/forms/teamSelector.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/useTeams.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamActions.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {useRef} from 'react';\nimport {StylesConfig} from 'react-select';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addTeamToProject} from 'app/actionCreators/projects';\nimport Button from 'app/components/button';\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport Tooltip from 'app/components/tooltip';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'app/constants';\nimport {IconAdd, IconUser} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport useApi from 'app/utils/useApi';\nimport useTeams from 'app/utils/useTeams';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst UnassignedWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledIconUser = styled(IconUser)`\n  margin-left: ${space(0.25)};\n  margin-right: ${space(1)};\n  color: ${p => p.theme.gray400};\n`;\n\n// An option to be unassigned on the team dropdown\nconst unassignedOption = {\n  value: null,\n  label: (\n    <UnassignedWrapper>\n      <StyledIconUser size=\"20px\" />\n      {t('Unassigned')}\n    </UnassignedWrapper>\n  ),\n  searchKey: 'unassigned',\n  actor: null,\n  disabled: false,\n};\n\n// Ensures that the svg icon is white when selected\nconst unassignedSelectStyles: StylesConfig = {\n  option: (provided, state) => ({\n    ...provided,\n    svg: {\n      color: state.isSelected && state.theme.white,\n    },\n  }),\n};\n\nconst placeholderSelectStyles: StylesConfig = {\n  input: (provided, state) => ({\n    ...provided,\n    display: 'grid',\n    gridTemplateColumns: 'max-content 1fr',\n    alignItems: 'center',\n    gridGap: space(1),\n    ':before': {\n      backgroundColor: state.theme.backgroundSecondary,\n      height: 24,\n      width: 24,\n      borderRadius: 3,\n      content: '\"\"',\n      display: 'block',\n    },\n  }),\n  placeholder: provided => ({\n    ...provided,\n    paddingLeft: 32,\n  }),\n};\n\ntype Props = {\n  organization: Organization;\n  onChange: (value: any) => any;\n  /**\n   * Function to control whether a team should be shown in the dropdown\n   */\n  teamFilter?: (team: Team) => boolean;\n  /**\n   * Can be used to restrict teams to a certain project and allow for new teams to be add to that project\n   */\n  project?: Project;\n  /**\n   * Controls whether the value in the dropdown is a team id or team slug\n   */\n  useId?: boolean;\n  includeUnassigned?: boolean;\n} & ControlProps;\n\ntype TeamActor = {\n  type: 'team';\n  id: string;\n  name: string;\n};\n\ntype TeamOption = {\n  value: string | null;\n  label: React.ReactNode;\n  searchKey: string;\n  actor: TeamActor | null;\n  disabled?: boolean;\n};\n\nfunction TeamSelector(props: Props) {\n  const {includeUnassigned, styles, ...extraProps} = props;\n  const {teamFilter, organization, project, multiple, value, useId, onChange} = props;\n\n  const api = useApi();\n  const {teams, fetching, onSearch} = useTeams();\n\n  // TODO(ts) This type could be improved when react-select types are better.\n  const selectRef = useRef<any>(null);\n\n  const createTeamOption = (team: Team): TeamOption => ({\n    value: useId ? team.id : team.slug,\n    label: multiple ? `#${team.slug}` : <IdBadge team={team} />,\n    searchKey: team.slug,\n    actor: {\n      type: 'team',\n      id: team.id,\n      name: team.slug,\n    },\n  });\n\n  /**\n   * Closes the select menu by blurring input if possible since that seems to\n   * be the only way to close it.\n   */\n  function closeSelectMenu() {\n    if (!selectRef.current) {\n      return;\n    }\n\n    const select = selectRef.current.select;\n    const input: HTMLInputElement = select.inputRef;\n\n    if (input) {\n      // I don't think there's another way to close `react-select`\n      input.blur();\n    }\n  }\n\n  async function handleAddTeamToProject(team: Team) {\n    if (!project) {\n      closeSelectMenu();\n      return;\n    }\n\n    // Copy old value\n    const oldValue = multiple ? [...(value ?? [])] : {value};\n    // Optimistic update\n    onChange?.(createTeamOption(team));\n\n    try {\n      await addTeamToProject(api, organization.slug, project.slug, team);\n    } catch (err) {\n      // Unable to add team to project, revert select menu value\n      onChange?.(oldValue);\n    }\n\n    closeSelectMenu();\n  }\n\n  function createTeamOutsideProjectOption(team: Team): TeamOption {\n    // If the option/team is currently selected, optimistically assume it is now a part of the project\n    if (value === (useId ? team.id : team.slug)) {\n      return createTeamOption(team);\n    }\n    const canAddTeam = organization.access.includes('project:write');\n\n    return {\n      ...createTeamOption(team),\n      disabled: true,\n      label: (\n        <TeamOutsideProject>\n          <DisabledLabel>\n            <Tooltip\n              position=\"left\"\n              title={t('%s is not a member of project', `#${team.slug}`)}\n            >\n              <IdBadge team={team} />\n            </Tooltip>\n          </DisabledLabel>\n          <Tooltip\n            title={\n              canAddTeam\n                ? t('Add %s to project', `#${team.slug}`)\n                : t('You do not have permission to add team to project.')\n            }\n          >\n            <AddToProjectButton\n              type=\"button\"\n              size=\"zero\"\n              borderless\n              disabled={!canAddTeam}\n              onClick={() => handleAddTeamToProject(team)}\n              icon={<IconAdd isCircled />}\n            />\n          </Tooltip>\n        </TeamOutsideProject>\n      ),\n    };\n  }\n\n  function getOptions() {\n    const filteredTeams = teamFilter ? teams.filter(teamFilter) : teams;\n\n    if (project) {\n      const teamsInProjectIdSet = new Set(project.teams.map(team => team.id));\n      const teamsInProject = filteredTeams.filter(team =>\n        teamsInProjectIdSet.has(team.id)\n      );\n      const teamsNotInProject = filteredTeams.filter(\n        team => !teamsInProjectIdSet.has(team.id)\n      );\n\n      return [\n        ...teamsInProject.map(createTeamOption),\n        ...teamsNotInProject.map(createTeamOutsideProjectOption),\n        ...(includeUnassigned ? [unassignedOption] : []),\n      ];\n    }\n\n    return [\n      ...filteredTeams.map(createTeamOption),\n      ...(includeUnassigned ? [unassignedOption] : []),\n    ];\n  }\n\n  return (\n    <SelectControl\n      ref={selectRef}\n      options={getOptions()}\n      onInputChange={debounce(val => void onSearch(val), DEFAULT_DEBOUNCE_DURATION)}\n      isOptionDisabled={option => !!option.disabled}\n      getOptionValue={option => option.searchKey}\n      styles={{\n        ...(includeUnassigned ? unassignedSelectStyles : {}),\n        ...(multiple ? {} : placeholderSelectStyles),\n        ...(styles ?? {}),\n      }}\n      isLoading={fetching}\n      {...extraProps}\n    />\n  );\n}\n\nconst TeamOutsideProject = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n`;\n\nconst DisabledLabel = styled('div')`\n  display: flex;\n  opacity: 0.5;\n  overflow: hidden; /* Needed so that \"Add to team\" button can fit */\n`;\n\nconst AddToProjectButton = styled(Button)`\n  flex-shrink: 0;\n`;\n\nexport {TeamSelector};\n\n// TODO(davidenwang): this is broken due to incorrect types on react-select\nexport default withOrganization(TeamSelector) as unknown as (\n  p: Omit<Props, 'organization'>\n) => JSX.Element;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {useEffect, useRef, useState} from 'react';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {fetchUserTeams} from 'app/actionCreators/teams';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport OrganizationStore from 'app/stores/organizationStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {useLegacyStore} from 'app/stores/useLegacyStore';\nimport {Team} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport parseLinkHeader from 'app/utils/parseLinkHeader';\nimport RequestError from 'app/utils/requestError/requestError';\nimport useApi from 'app/utils/useApi';\n\ntype State = {\n  /**\n   * Reflects whether or not the initial fetch for the requested teams was\n   * fulfilled\n   */\n  initiallyLoaded: boolean;\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n  /**\n   * Indicates that Team results (from API) are paginated and there are more\n   * Teams that are not in the initial response.\n   */\n  hasMore: null | boolean;\n  /**\n   * The last query we searched. Used to validate the cursor\n   */\n  lastSearch: null | string;\n  /**\n   * Pagination\n   */\n  nextCursor?: null | string;\n};\n\nexport type Result = {\n  /**\n   * The loaded teams list\n   */\n  teams: Team[];\n  /**\n   * This is an action provided to consumers for them to update the current\n   * teams result set using a simple search query.\n   *\n   * Will always add new options into the store.\n   */\n  onSearch: (searchTerm: string) => Promise<void>;\n} & Pick<State, 'fetching' | 'hasMore' | 'fetchError' | 'initiallyLoaded'>;\n\ntype Options = {\n  /**\n   * Number of teams to return when not using `props.slugs`\n   */\n  limit?: number;\n  /**\n   * When provided, fetches specified teams by slug if necessary and only provides those teams.\n   */\n  slugs?: string[];\n  /**\n   * When true, fetches user's teams if necessary and only provides user's\n   * teams (isMember = true).\n   */\n  provideUserTeams?: boolean;\n};\n\ntype FetchTeamOptions = {\n  slugs?: string[];\n  limit?: Options['limit'];\n  cursor?: State['nextCursor'];\n  search?: State['lastSearch'];\n  lastSearch?: State['lastSearch'];\n};\n\n/**\n * Helper function to actually load teams\n */\nasync function fetchTeams(\n  api: Client,\n  orgId: string,\n  {slugs, search, limit, lastSearch, cursor}: FetchTeamOptions = {}\n) {\n  const query: {\n    query?: string;\n    cursor?: typeof cursor;\n    per_page?: number;\n  } = {};\n\n  if (slugs !== undefined && slugs.length > 0) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ?? ''} ${search}`.trim();\n  }\n\n  const isSameSearch = lastSearch === search || (!lastSearch && !search);\n\n  if (isSameSearch && cursor) {\n    query.cursor = cursor;\n  }\n\n  if (limit !== undefined) {\n    query.per_page = limit;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/teams/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore = paginationObject?.next?.results || paginationObject?.previous?.results;\n    nextCursor = paginationObject?.next?.cursor;\n  }\n\n  return {results: data, hasMore, nextCursor};\n}\n\n// TODO: Paging for items which have already exist in the store is not\n// correctly implemented.\n\n/**\n * Provides teams from the TeamStore\n *\n * This hook also provides a way to select specific slugs to ensure they are\n * loaded, as well as search (type-ahead) for more slugs that may not be in the\n * TeamsStore.\n *\n * NOTE: It is NOT guaranteed that all teams for an organization will be\n * loaded, so you should use this hook with the intention of providing specific\n * slugs, or loading more through search.\n *\n */\nfunction useTeams({limit, slugs, provideUserTeams}: Options = {}) {\n  const api = useApi();\n  const {organization} = useLegacyStore(OrganizationStore);\n  const store = useLegacyStore(TeamStore);\n\n  const orgId = organization?.slug;\n\n  const storeSlugs = new Set(store.teams.map(t => t.slug));\n  const slugsToLoad = slugs?.filter(slug => !storeSlugs.has(slug)) ?? [];\n  const shouldLoadSlugs = slugsToLoad.length > 0;\n  const shouldLoadTeams = provideUserTeams && !store.loadedUserTeams;\n\n  // If we don't need to make a request either for slugs or user teams, set\n  // initiallyLoaded to true\n  const initiallyLoaded = !shouldLoadSlugs && !shouldLoadTeams;\n\n  const [state, setState] = useState<State>({\n    initiallyLoaded,\n    fetching: false,\n    hasMore: null,\n    lastSearch: null,\n    nextCursor: null,\n    fetchError: null,\n  });\n\n  const slugsRef = useRef<Set<string> | null>(null);\n\n  // Only initialize slugsRef.current once and modify it when we receive new\n  // slugs determined through set equality\n  if (slugs !== undefined) {\n    if (slugsRef.current === null) {\n      slugsRef.current = new Set(slugs);\n    }\n\n    if (\n      slugs.length !== slugsRef.current.size ||\n      slugs.some(slug => !slugsRef.current?.has(slug))\n    ) {\n      slugsRef.current = new Set(slugs);\n    }\n  }\n\n  async function loadUserTeams() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      await fetchUserTeams(api, {orgId});\n\n      setState({...state, fetching: false, initiallyLoaded: true});\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function loadTeamsBySlug() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        slugs: slugsToLoad,\n        limit,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n      TeamActions.loadTeams(fetchedTeams);\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        initiallyLoaded: true,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function handleSearch(search: string) {\n    const {lastSearch} = state;\n    const cursor = state.nextCursor;\n\n    if (search === '') {\n      return;\n    }\n\n    if (orgId === undefined) {\n      // eslint-disable-next-line no-console\n      console.error('Cannot use useTeam.onSearch without an organization in context');\n      return;\n    }\n\n    setState({...state, fetching: true});\n\n    try {\n      api.clear();\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        search,\n        limit,\n        lastSearch,\n        cursor,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n\n      // Only update the store if we have more items\n      if (fetchedTeams.length > store.teams.length) {\n        TeamActions.loadTeams(fetchedTeams);\n      }\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        lastSearch: search,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, fetchError: err});\n    }\n  }\n\n  useEffect(() => {\n    // Load specified team slugs\n    if (shouldLoadSlugs) {\n      loadTeamsBySlug();\n      return;\n    }\n\n    // Load user teams\n    if (shouldLoadTeams) {\n      loadUserTeams();\n    }\n  }, [slugsRef.current, provideUserTeams]);\n\n  const isSuperuser = isActiveSuperuser();\n\n  const filteredTeams = slugs\n    ? store.teams.filter(t => slugs.includes(t.slug))\n    : provideUserTeams && !isSuperuser\n    ? store.teams.filter(t => t.isMember)\n    : store.teams;\n\n  const result: Result = {\n    teams: filteredTeams,\n    fetching: state.fetching || store.loading,\n    initiallyLoaded: state.initiallyLoaded,\n    fetchError: state.fetchError,\n    hasMore: state.hasMore,\n    onSearch: handleSearch,\n  };\n\n  return result;\n}\n\nexport default useTeams;\n"],"names":["doCallback","params","name","args","callIfFunction","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamActions","fetchTeamDetails","options","teamId","request","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","UnassignedWrapper","StyledIconUser","IconUser","space","p","theme","gray400","unassignedOption","value","label","size","t","searchKey","actor","disabled","unassignedSelectStyles","option","provided","state","svg","color","isSelected","white","placeholderSelectStyles","input","display","gridTemplateColumns","alignItems","gridGap","backgroundColor","backgroundSecondary","height","width","borderRadius","content","placeholder","paddingLeft","TeamSelector","props","includeUnassigned","styles","extraProps","teamFilter","project","multiple","useId","onChange","useApi","fetching","onSearch","useTeams","selectRef","useRef","createTeamOption","type","closeSelectMenu","current","select","inputRef","blur","createTeamOutsideProjectOption","canAddTeam","access","includes","TeamOutsideProject","DisabledLabel","position","title","AddToProjectButton","borderless","onClick","oldValue","addTeamToProject","handleAddTeamToProject","icon","isCircled","ref","filteredTeams","filter","teamsInProjectIdSet","Set","map","teamsInProject","has","teamsNotInProject","getOptions","onInputChange","debounce","val","DEFAULT_DEBOUNCE_DURATION","isOptionDisabled","getOptionValue","isLoading","Button","withOrganization","isActiveSuperuser","isSuperuser","ConfigStore","Cookies","undefined","fetchTeams","slugs","search","limit","lastSearch","cursor","query","length","join","trim","per_page","hasMore","nextCursor","resp","includeAllArgs","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","results","previous","provideUserTeams","useLegacyStore","OrganizationStore","store","TeamStore","storeSlugs","slugsToLoad","shouldLoadSlugs","shouldLoadTeams","loadedUserTeams","initiallyLoaded","setState","useState","fetchError","slugsRef","some","useEffect","fetchedTeams","uniqBy","console","loadTeamsBySlug","loadUserTeams","isMember","loading","clear"],"sourceRoot":""}