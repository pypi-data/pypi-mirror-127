{"version":3,"file":"chunks/app_views_alerts_rules_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/teams.tsx","webpack:///./app/views/alerts/alertBadge.tsx","webpack:///./app/views/alerts/rules/row.tsx","webpack:///./app/views/alerts/rules/index.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport useTeams from 'app/utils/useTeams';\n\ntype RenderProps = ReturnType<typeof useTeams>;\n\ntype Props = Parameters<typeof useTeams>[0] & {\n  children: (props: RenderProps) => React.ReactNode;\n};\n\n/**\n * This is a utility component to leverage the useTeams hook to provide\n * a render props component which returns teams through a variety of inputs\n * such as a list of slugs or user teams.\n */\nfunction Teams({children, ...props}: Props) {\n  const renderProps = useTeams(props);\n\n  return <Fragment>{children(renderProps)}</Fragment>;\n}\n\nexport default Teams;\n","import styled from '@emotion/styled';\n\nimport {IconCheckmark, IconFire, IconIssues, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Color} from 'app/utils/theme';\n\nimport {IncidentStatus} from './types';\n\ntype Props = {\n  status?: IncidentStatus;\n  hideText?: boolean;\n  isIssue?: boolean;\n};\n\nfunction AlertBadge({status, hideText = false, isIssue}: Props) {\n  let statusText = t('Resolved');\n  let Icon = IconCheckmark;\n  let color: Color = 'green300';\n  if (isIssue) {\n    statusText = t('Issue');\n    Icon = IconIssues;\n    color = 'gray300';\n  } else if (status === IncidentStatus.CRITICAL) {\n    statusText = t('Critical');\n    Icon = IconFire;\n    color = 'red300';\n  } else if (status === IncidentStatus.WARNING) {\n    statusText = t('Warning');\n    Icon = IconWarning;\n    color = 'yellow300';\n  }\n\n  return (\n    <Wrapper data-test-id=\"alert-badge\" displayFlex={!hideText}>\n      <AlertIconWrapper color={color} icon={Icon}>\n        <Icon color=\"white\" />\n      </AlertIconWrapper>\n\n      {!hideText && <IncidentStatusValue color={color}>{statusText}</IncidentStatusValue>}\n    </Wrapper>\n  );\n}\n\nexport default AlertBadge;\n\nconst Wrapper = styled('div')<{displayFlex: boolean}>`\n  display: ${p => (p.displayFlex ? `flex` : `block`)};\n  align-items: center;\n`;\n\nconst AlertIconWrapper = styled('div')<{color: Color; icon: React.ReactNode}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  /* icon warning needs to be treated differently to look visually centered */\n  line-height: ${p => (p.icon === IconWarning ? undefined : 1)};\n  left: 3px;\n  min-width: 30px;\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 22px;\n    height: 22px;\n    border-radius: ${p => p.theme.borderRadius};\n    background-color: ${p => p.theme[p.color]};\n    transform: rotate(45deg);\n  }\n\n  svg {\n    width: ${p => (p.icon === IconIssues ? '11px' : '13px')};\n    z-index: 1;\n  }\n`;\n\nconst IncidentStatusValue = styled('div')<{color: Color}>`\n  margin-left: ${space(1)};\n  color: ${p => p.theme[p.color]};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\n\nimport Access from 'app/components/acl/access';\nimport MenuItemActionLink from 'app/components/actions/menuItemActionLink';\nimport ActorAvatar from 'app/components/avatar/actorAvatar';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport Confirm from 'app/components/confirm';\nimport DateTime from 'app/components/dateTime';\nimport DropdownLink from 'app/components/dropdownLink';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconArrow, IconDelete, IconEllipsis, IconSettings} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Actor, Organization, Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport type {Color} from 'app/utils/theme';\nimport {AlertRuleThresholdType} from 'app/views/alerts/incidentRules/types';\n\nimport AlertBadge from '../alertBadge';\nimport {CombinedMetricIssueAlerts, IncidentStatus} from '../types';\nimport {isIssueAlert} from '../utils';\n\ntype Props = {\n  rule: CombinedMetricIssueAlerts;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  organization: Organization;\n  onDelete: (projectId: string, rule: CombinedMetricIssueAlerts) => void;\n  // Set of team ids that the user belongs to\n  userTeams: Set<string>;\n};\n\n/**\n * Memoized function to find a project from a list of projects\n */\nconst getProject = memoize((slug: string, projects: Project[]) =>\n  projects.find(project => project.slug === slug)\n);\n\nfunction RuleListRow({\n  rule,\n  projectsLoaded,\n  projects,\n  orgId,\n  onDelete,\n  userTeams,\n}: Props) {\n  const activeIncident =\n    rule.latestIncident?.status !== undefined &&\n    [IncidentStatus.CRITICAL, IncidentStatus.WARNING].includes(\n      rule.latestIncident.status\n    );\n\n  function renderLastIncidentDate(): React.ReactNode {\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    if (!rule.latestIncident) {\n      return '-';\n    }\n\n    if (activeIncident) {\n      return (\n        <div>\n          {t('Triggered ')}\n          <TimeSince date={rule.latestIncident.dateCreated} />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {t('Resolved ')}\n        <TimeSince date={rule.latestIncident.dateClosed!} />\n      </div>\n    );\n  }\n\n  function renderAlertRuleStatus(): React.ReactNode {\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    const criticalTrigger = rule.triggers.find(({label}) => label === 'critical');\n    const warningTrigger = rule.triggers.find(({label}) => label === 'warning');\n    const resolvedTrigger = rule.resolveThreshold;\n    const trigger =\n      activeIncident && rule.latestIncident?.status === IncidentStatus.CRITICAL\n        ? criticalTrigger\n        : warningTrigger ?? criticalTrigger;\n\n    let iconColor: Color = 'green300';\n    let iconDirection: 'up' | 'down' | undefined;\n    let thresholdTypeText =\n      activeIncident && rule.thresholdType === AlertRuleThresholdType.ABOVE\n        ? t('Above')\n        : t('Below');\n\n    if (activeIncident) {\n      iconColor =\n        trigger?.label === 'critical'\n          ? 'red300'\n          : trigger?.label === 'warning'\n          ? 'yellow300'\n          : 'green300';\n      iconDirection = rule.thresholdType === AlertRuleThresholdType.ABOVE ? 'up' : 'down';\n    } else {\n      // Use the Resolved threshold type, which is opposite of Critical\n      iconDirection = rule.thresholdType === AlertRuleThresholdType.ABOVE ? 'down' : 'up';\n      thresholdTypeText =\n        rule.thresholdType === AlertRuleThresholdType.ABOVE ? t('Below') : t('Above');\n    }\n\n    return (\n      <FlexCenter>\n        <IconArrow color={iconColor} direction={iconDirection} />\n        <TriggerText>\n          {`${thresholdTypeText} ${\n            rule.latestIncident || (!rule.latestIncident && !resolvedTrigger)\n              ? trigger?.alertThreshold?.toLocaleString()\n              : resolvedTrigger?.toLocaleString()\n          }`}\n        </TriggerText>\n      </FlexCenter>\n    );\n  }\n\n  const slug = rule.projects[0];\n  const editLink = `/organizations/${orgId}/alerts/${\n    isIssueAlert(rule) ? 'rules' : 'metric-rules'\n  }/${slug}/${rule.id}/`;\n\n  const detailsLink = `/organizations/${orgId}/alerts/rules/details/${rule.id}/`;\n\n  const ownerId = rule.owner?.split(':')[1];\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: ''}\n    : null;\n\n  const canEdit = ownerId ? userTeams.has(ownerId) : true;\n  const alertLink = isIssueAlert(rule) ? (\n    rule.name\n  ) : (\n    <TitleLink to={isIssueAlert(rule) ? editLink : detailsLink}>{rule.name}</TitleLink>\n  );\n\n  const IssueStatusText: Record<IncidentStatus, string> = {\n    [IncidentStatus.CRITICAL]: t('Critical'),\n    [IncidentStatus.WARNING]: t('Warning'),\n    [IncidentStatus.CLOSED]: t('Resolved'),\n    [IncidentStatus.OPENED]: t('Resolved'),\n  };\n\n  return (\n    <ErrorBoundary>\n      <AlertNameWrapper isIssueAlert={isIssueAlert(rule)}>\n        <FlexCenter>\n          <Tooltip\n            title={\n              isIssueAlert(rule)\n                ? t('Issue Alert')\n                : tct('Metric Alert Status: [status]', {\n                    status:\n                      IssueStatusText[\n                        rule?.latestIncident?.status ?? IncidentStatus.CLOSED\n                      ],\n                  })\n            }\n          >\n            <AlertBadge\n              status={rule?.latestIncident?.status}\n              isIssue={isIssueAlert(rule)}\n              hideText\n            />\n          </Tooltip>\n        </FlexCenter>\n        <AlertNameAndStatus>\n          <AlertName>{alertLink}</AlertName>\n          {!isIssueAlert(rule) && renderLastIncidentDate()}\n        </AlertNameAndStatus>\n      </AlertNameWrapper>\n      <FlexCenter>{renderAlertRuleStatus()}</FlexCenter>\n\n      <FlexCenter>\n        <ProjectBadgeContainer>\n          <ProjectBadge\n            avatarSize={18}\n            project={!projectsLoaded ? {slug} : getProject(slug, projects)}\n          />\n        </ProjectBadgeContainer>\n      </FlexCenter>\n\n      <FlexCenter>\n        {teamActor ? <ActorAvatar actor={teamActor} size={24} /> : '-'}\n      </FlexCenter>\n\n      <FlexCenter>\n        <StyledDateTime\n          date={getDynamicText({\n            value: rule.dateCreated,\n            fixed: new Date('2021-04-20'),\n          })}\n          format=\"ll\"\n        />\n      </FlexCenter>\n      <ActionsRow>\n        <Access access={['alerts:write']}>\n          {({hasAccess}) => (\n            <React.Fragment>\n              <StyledDropdownLink>\n                <DropdownLink\n                  anchorRight\n                  caret={false}\n                  title={\n                    <Button\n                      tooltipProps={{\n                        containerDisplayMode: 'flex',\n                      }}\n                      size=\"small\"\n                      type=\"button\"\n                      aria-label={t('Show more')}\n                      icon={<IconEllipsis size=\"xs\" />}\n                    />\n                  }\n                >\n                  <li>\n                    <Link to={editLink}>{t('Edit')}</Link>\n                  </li>\n                  <Confirm\n                    disabled={!hasAccess || !canEdit}\n                    message={tct(\n                      \"Are you sure you want to delete [name]? You won't be able to view the history of this alert once it's deleted.\",\n                      {\n                        name: rule.name,\n                      }\n                    )}\n                    header={t('Delete Alert Rule?')}\n                    priority=\"danger\"\n                    confirmText={t('Delete Rule')}\n                    onConfirm={() => onDelete(slug, rule)}\n                  >\n                    <MenuItemActionLink title={t('Delete')}>\n                      {t('Delete')}\n                    </MenuItemActionLink>\n                  </Confirm>\n                </DropdownLink>\n              </StyledDropdownLink>\n\n              {/* Small screen actions */}\n              <StyledButtonBar gap={1}>\n                <Confirm\n                  disabled={!hasAccess || !canEdit}\n                  message={tct(\n                    \"Are you sure you want to delete [name]? You won't be able to view the history of this alert once it's deleted.\",\n                    {\n                      name: rule.name,\n                    }\n                  )}\n                  header={t('Delete Alert Rule?')}\n                  priority=\"danger\"\n                  confirmText={t('Delete Rule')}\n                  onConfirm={() => onDelete(slug, rule)}\n                >\n                  <Button\n                    type=\"button\"\n                    icon={<IconDelete />}\n                    size=\"small\"\n                    title={t('Delete')}\n                  />\n                </Confirm>\n                <Tooltip title={t('Edit')}>\n                  <Button\n                    size=\"small\"\n                    type=\"button\"\n                    icon={<IconSettings />}\n                    to={editLink}\n                  />\n                </Tooltip>\n              </StyledButtonBar>\n            </React.Fragment>\n          )}\n        </Access>\n      </ActionsRow>\n    </ErrorBoundary>\n  );\n}\n\nconst TitleLink = styled(Link)`\n  ${overflowEllipsis}\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertNameWrapper = styled(FlexCenter)<{isIssueAlert?: boolean}>`\n  ${p => p.isIssueAlert && `padding: ${space(3)} ${space(2)}; line-height: 2.4;`}\n`;\n\nconst AlertNameAndStatus = styled('div')`\n  ${overflowEllipsis}\n  margin-left: ${space(1.5)};\n  line-height: 1.35;\n`;\n\nconst AlertName = styled('div')`\n  ${overflowEllipsis}\n  font-size: ${p => p.theme.fontSizeLarge};\n\n  @media (max-width: ${p => p.theme.breakpoints[3]}) {\n    max-width: 300px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints[2]}) {\n    max-width: 165px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    max-width: 100px;\n  }\n`;\n\nconst ProjectBadgeContainer = styled('div')`\n  width: 100%;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst TriggerText = styled('div')`\n  margin-left: ${space(1)};\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  display: none;\n  justify-content: flex-start;\n  align-items: center;\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    display: flex;\n  }\n`;\n\nconst StyledDropdownLink = styled('div')`\n  display: none;\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    display: block;\n  }\n`;\n\nconst ActionsRow = styled(FlexCenter)`\n  justify-content: center;\n  padding: ${space(1)};\n`;\n\nexport default RuleListRow;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {PanelTable} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconArrow} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport Teams from 'app/utils/teams';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\n\nimport AlertHeader from '../list/header';\nimport {CombinedMetricIssueAlerts} from '../types';\nimport {isIssueAlert} from '../utils';\n\nimport RuleListRow from './row';\nimport TeamFilter, {getTeamParams} from './teamFilter';\n\nconst DOCS_URL = 'https://docs.sentry.io/product/alerts-notifications/metric-alerts/';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  selection: GlobalSelection;\n};\n\ntype State = {\n  ruleList?: CombinedMetricIssueAlerts[];\n  teamFilterSearch?: string;\n};\n\nclass AlertRulesList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n\n    query.expand = ['latestIncident'];\n    query.team = getTeamParams(query.team);\n\n    if (!query.sort) {\n      query.sort = ['incident_status', 'date_triggered'];\n    }\n\n    return [\n      [\n        'ruleList',\n        `/organizations/${params && params.orgId}/combined-rules/`,\n        {\n          query,\n        },\n      ],\n    ];\n  }\n\n  handleChangeFilter = (_sectionId: string, activeFilters: Set<string>) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    const teams = [...activeFilters];\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        team: teams.length ? teams : '',\n      },\n    });\n  };\n\n  handleChangeSearch = (name: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        name,\n      },\n    });\n  };\n\n  handleDeleteRule = async (projectId: string, rule: CombinedMetricIssueAlerts) => {\n    const {params} = this.props;\n    const {orgId} = params;\n    const alertPath = isIssueAlert(rule) ? 'rules' : 'alert-rules';\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/${alertPath}/${rule.id}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      this.reloadData();\n    } catch (_err) {\n      addErrorMessage(t('Error deleting rule'));\n    }\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderFilterBar() {\n    const {location} = this.props;\n    const selectedTeams = new Set(getTeamParams(location.query.team));\n\n    return (\n      <FilterWrapper>\n        <TeamFilter\n          selectedTeams={selectedTeams}\n          handleChangeFilter={this.handleChangeFilter}\n        />\n        <StyledSearchBar\n          placeholder={t('Search by name')}\n          query={location.query?.name}\n          onSearch={this.handleChangeSearch}\n        />\n      </FilterWrapper>\n    );\n  }\n\n  renderList() {\n    const {\n      params: {orgId},\n      location: {query},\n      organization,\n      router,\n    } = this.props;\n    const {loading, ruleList = [], ruleListPageLinks} = this.state;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(ruleList?.map(({projects}) => projects))\n    );\n\n    const sort: {\n      asc: boolean;\n      field: 'date_added' | 'name' | ['incident_status', 'date_triggered'];\n    } = {\n      asc: query.asc === '1',\n      field: query.sort || 'date_added',\n    };\n    const {cursor: _cursor, page: _page, ...currentQuery} = query;\n    const isAlertRuleSort =\n      sort.field.includes('incident_status') || sort.field.includes('date_triggered');\n    const sortArrow = (\n      <IconArrow color=\"gray300\" size=\"xs\" direction={sort.asc ? 'up' : 'down'} />\n    );\n\n    return (\n      <StyledLayoutBody>\n        <Layout.Main fullWidth>\n          {this.renderFilterBar()}\n          <Teams provideUserTeams>\n            {({initiallyLoaded: loadedTeams, teams}) => (\n              <StyledPanelTable\n                headers={[\n                  <StyledSortLink\n                    key=\"name\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      sort.field !== 'name'\n                        ? 'none'\n                        : sort.asc\n                        ? 'ascending'\n                        : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        // sort by name should start by ascending on first click\n                        asc: sort.field === 'name' && sort.asc ? undefined : '1',\n                        sort: 'name',\n                      },\n                    }}\n                  >\n                    {t('Alert Rule')} {sort.field === 'name' && sortArrow}\n                  </StyledSortLink>,\n\n                  <StyledSortLink\n                    key=\"status\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      !isAlertRuleSort ? 'none' : sort.asc ? 'ascending' : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        asc: isAlertRuleSort && !sort.asc ? '1' : undefined,\n                        sort: ['incident_status', 'date_triggered'],\n                      },\n                    }}\n                  >\n                    {t('Status')} {isAlertRuleSort && sortArrow}\n                  </StyledSortLink>,\n\n                  t('Project'),\n                  t('Team'),\n                  <StyledSortLink\n                    key=\"dateAdded\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      sort.field !== 'date_added'\n                        ? 'none'\n                        : sort.asc\n                        ? 'ascending'\n                        : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        asc: sort.field === 'date_added' && !sort.asc ? '1' : undefined,\n                        sort: 'date_added',\n                      },\n                    }}\n                  >\n                    {t('Created')} {sort.field === 'date_added' && sortArrow}\n                  </StyledSortLink>,\n                  t('Actions'),\n                ]}\n                isLoading={loading || !loadedTeams}\n                isEmpty={ruleList?.length === 0}\n                emptyMessage={t('No alert rules found for the current query.')}\n                emptyAction={\n                  <EmptyStateAction>\n                    {tct('Learn more about [link:Alerts]', {\n                      link: <ExternalLink href={DOCS_URL} />,\n                    })}\n                  </EmptyStateAction>\n                }\n              >\n                <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                  {({initiallyLoaded, projects}) =>\n                    ruleList.map(rule => (\n                      <RuleListRow\n                        // Metric and issue alerts can have the same id\n                        key={`${isIssueAlert(rule) ? 'metric' : 'issue'}-${rule.id}`}\n                        projectsLoaded={initiallyLoaded}\n                        projects={projects as Project[]}\n                        rule={rule}\n                        orgId={orgId}\n                        onDelete={this.handleDeleteRule}\n                        organization={organization}\n                        userTeams={new Set(teams.map(team => team.id))}\n                      />\n                    ))\n                  }\n                </Projects>\n              </StyledPanelTable>\n            )}\n          </Teams>\n          <Pagination\n            pageLinks={ruleListPageLinks}\n            onCursor={(cursor, path, _direction) => {\n              let team = currentQuery.team;\n              // Keep team parameter, but empty to remove parameters\n              if (!team || team.length === 0) {\n                team = '';\n              }\n\n              router.push({\n                pathname: path,\n                query: {...currentQuery, team, cursor},\n              });\n            }}\n          />\n        </Layout.Main>\n      </StyledLayoutBody>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader\n          organization={organization}\n          showDateSelector={false}\n          showEnvironmentSelector={false}\n        >\n          <AlertHeader organization={organization} router={router} activeTab=\"rules\" />\n          {this.renderList()}\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass AlertRulesListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {location} = this.props;\n    if (prevProps.location.query?.sort !== location.query?.sort) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {organization, location} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_rules.viewed',\n      eventName: 'Alert Rules: Viewed',\n      organization_id: organization.id,\n      sort: Array.isArray(location.query.sort)\n        ? location.query.sort.join(',')\n        : location.query.sort,\n    });\n  }\n\n  render() {\n    return <AlertRulesList {...this.props} />;\n  }\n}\n\nexport default withGlobalSelection(AlertRulesListContainer);\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -20px;\n`;\n\nconst StyledSortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n`;\n\nconst FilterWrapper = styled('div')`\n  display: flex;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n  margin-left: ${space(1.5)};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  overflow: auto;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    overflow: initial;\n  }\n\n  grid-template-columns: auto 1.5fr 1fr 1fr 1fr auto;\n  white-space: nowrap;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n"],"names":["Teams","children","props","renderProps","useTeams","Fragment","AlertBadge","status","hideText","isIssue","statusText","t","Icon","IconCheckmark","color","IconIssues","IncidentStatus","IconFire","IconWarning","Wrapper","displayFlex","AlertIconWrapper","icon","IncidentStatusValue","p","undefined","theme","borderRadius","space","getProject","memoize","slug","projects","find","project","RuleListRow","rule","projectsLoaded","orgId","onDelete","userTeams","activeIncident","latestIncident","includes","editLink","isIssueAlert","id","detailsLink","ownerId","owner","split","teamActor","type","name","canEdit","has","alertLink","TitleLink","to","IssueStatusText","AlertNameWrapper","FlexCenter","title","tct","AlertNameAndStatus","AlertName","date","dateCreated","dateClosed","criticalTrigger","triggers","label","warningTrigger","resolvedTrigger","resolveThreshold","trigger","iconDirection","iconColor","thresholdTypeText","thresholdType","AlertRuleThresholdType","direction","TriggerText","alertThreshold","toLocaleString","renderAlertRuleStatus","ProjectBadgeContainer","ProjectBadge","avatarSize","actor","size","StyledDateTime","getDynamicText","value","fixed","Date","format","ActionsRow","access","hasAccess","StyledDropdownLink","anchorRight","caret","tooltipProps","containerDisplayMode","disabled","message","header","priority","confirmText","onConfirm","StyledButtonBar","gap","Link","overflowEllipsis","fontSizeLarge","breakpoints","IdBadge","DateTime","ButtonBar","AlertRulesList","AsyncComponent","_sectionId","activeFilters","router","location","this","cursor","_cursor","page","_page","currentQuery","query","teams","push","pathname","team","length","async","projectId","params","alertPath","api","requestPromise","method","reloadData","_err","addErrorMessage","getEndpoints","expand","getTeamParams","sort","renderLoading","renderBody","renderFilterBar","selectedTeams","Set","FilterWrapper","handleChangeFilter","StyledSearchBar","placeholder","onSearch","handleChangeSearch","renderList","organization","loading","ruleList","ruleListPageLinks","state","allProjectsFromIncidents","flatten","map","asc","field","isAlertRuleSort","sortArrow","StyledLayoutBody","fullWidth","provideUserTeams","initiallyLoaded","loadedTeams","StyledPanelTable","headers","StyledSortLink","role","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","link","href","slugs","Array","from","handleDeleteRule","pageLinks","onCursor","path","_direction","orgSlug","showDateSelector","showEnvironmentSelector","activeTab","AlertRulesListContainer","Component","componentDidMount","trackView","componentDidUpdate","prevProps","trackAnalyticsEvent","eventKey","eventName","organization_id","isArray","join","render","withGlobalSelection","Layout","SearchBar","PanelTable","fontSizeMedium"],"sourceRoot":""}