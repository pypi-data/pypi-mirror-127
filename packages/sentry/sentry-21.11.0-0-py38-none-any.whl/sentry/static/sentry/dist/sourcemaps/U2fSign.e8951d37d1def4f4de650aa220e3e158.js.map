{"version":3,"file":"chunks/U2fSign.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ChallengeData} from 'app/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = JSON.stringify(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      promise = u2f.sign(this.props.challengeData.authenticateRequests);\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, registeredKeys} = this.props.challengeData;\n      promise = u2f.register(registerRequests as any, registeredKeys as any);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n    this.submitU2fResponse(promise);\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'app/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n"],"names":["U2fInterface","React","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","this","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","state","supportMail","ConfigStore","support","href","t","className","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","supported","u2f","submitU2fResponse","promise","then","data","u2fResponse","challenge","onTap","response","catch","submit","err","failure","metaData","type","flowMode","Sentry","authenticateRequests","Error","registerRequests","registeredKeys","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","name","bindChallengeElement","bindResponseElement","render","MESSAGES","signin","sudo","enroll","U2fSign","Component","displayMode"],"sourceRoot":""}