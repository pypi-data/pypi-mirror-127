{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/useTeams.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/settings/organizationTeams/teamDetails.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamActions.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import * as React from 'react';\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  index: boolean;\n  activeClassName: string;\n  disabled: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    query?: string;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  };\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {useEffect, useRef, useState} from 'react';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {fetchUserTeams} from 'app/actionCreators/teams';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport OrganizationStore from 'app/stores/organizationStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {useLegacyStore} from 'app/stores/useLegacyStore';\nimport {Team} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport parseLinkHeader from 'app/utils/parseLinkHeader';\nimport RequestError from 'app/utils/requestError/requestError';\nimport useApi from 'app/utils/useApi';\n\ntype State = {\n  /**\n   * Reflects whether or not the initial fetch for the requested teams was\n   * fulfilled\n   */\n  initiallyLoaded: boolean;\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n  /**\n   * Indicates that Team results (from API) are paginated and there are more\n   * Teams that are not in the initial response.\n   */\n  hasMore: null | boolean;\n  /**\n   * The last query we searched. Used to validate the cursor\n   */\n  lastSearch: null | string;\n  /**\n   * Pagination\n   */\n  nextCursor?: null | string;\n};\n\nexport type Result = {\n  /**\n   * The loaded teams list\n   */\n  teams: Team[];\n  /**\n   * This is an action provided to consumers for them to update the current\n   * teams result set using a simple search query.\n   *\n   * Will always add new options into the store.\n   */\n  onSearch: (searchTerm: string) => Promise<void>;\n} & Pick<State, 'fetching' | 'hasMore' | 'fetchError' | 'initiallyLoaded'>;\n\ntype Options = {\n  /**\n   * Number of teams to return when not using `props.slugs`\n   */\n  limit?: number;\n  /**\n   * When provided, fetches specified teams by slug if necessary and only provides those teams.\n   */\n  slugs?: string[];\n  /**\n   * When true, fetches user's teams if necessary and only provides user's\n   * teams (isMember = true).\n   */\n  provideUserTeams?: boolean;\n};\n\ntype FetchTeamOptions = {\n  slugs?: string[];\n  limit?: Options['limit'];\n  cursor?: State['nextCursor'];\n  search?: State['lastSearch'];\n  lastSearch?: State['lastSearch'];\n};\n\n/**\n * Helper function to actually load teams\n */\nasync function fetchTeams(\n  api: Client,\n  orgId: string,\n  {slugs, search, limit, lastSearch, cursor}: FetchTeamOptions = {}\n) {\n  const query: {\n    query?: string;\n    cursor?: typeof cursor;\n    per_page?: number;\n  } = {};\n\n  if (slugs !== undefined && slugs.length > 0) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ?? ''} ${search}`.trim();\n  }\n\n  const isSameSearch = lastSearch === search || (!lastSearch && !search);\n\n  if (isSameSearch && cursor) {\n    query.cursor = cursor;\n  }\n\n  if (limit !== undefined) {\n    query.per_page = limit;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/teams/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore = paginationObject?.next?.results || paginationObject?.previous?.results;\n    nextCursor = paginationObject?.next?.cursor;\n  }\n\n  return {results: data, hasMore, nextCursor};\n}\n\n// TODO: Paging for items which have already exist in the store is not\n// correctly implemented.\n\n/**\n * Provides teams from the TeamStore\n *\n * This hook also provides a way to select specific slugs to ensure they are\n * loaded, as well as search (type-ahead) for more slugs that may not be in the\n * TeamsStore.\n *\n * NOTE: It is NOT guaranteed that all teams for an organization will be\n * loaded, so you should use this hook with the intention of providing specific\n * slugs, or loading more through search.\n *\n */\nfunction useTeams({limit, slugs, provideUserTeams}: Options = {}) {\n  const api = useApi();\n  const {organization} = useLegacyStore(OrganizationStore);\n  const store = useLegacyStore(TeamStore);\n\n  const orgId = organization?.slug;\n\n  const storeSlugs = new Set(store.teams.map(t => t.slug));\n  const slugsToLoad = slugs?.filter(slug => !storeSlugs.has(slug)) ?? [];\n  const shouldLoadSlugs = slugsToLoad.length > 0;\n  const shouldLoadTeams = provideUserTeams && !store.loadedUserTeams;\n\n  // If we don't need to make a request either for slugs or user teams, set\n  // initiallyLoaded to true\n  const initiallyLoaded = !shouldLoadSlugs && !shouldLoadTeams;\n\n  const [state, setState] = useState<State>({\n    initiallyLoaded,\n    fetching: false,\n    hasMore: null,\n    lastSearch: null,\n    nextCursor: null,\n    fetchError: null,\n  });\n\n  const slugsRef = useRef<Set<string> | null>(null);\n\n  // Only initialize slugsRef.current once and modify it when we receive new\n  // slugs determined through set equality\n  if (slugs !== undefined) {\n    if (slugsRef.current === null) {\n      slugsRef.current = new Set(slugs);\n    }\n\n    if (\n      slugs.length !== slugsRef.current.size ||\n      slugs.some(slug => !slugsRef.current?.has(slug))\n    ) {\n      slugsRef.current = new Set(slugs);\n    }\n  }\n\n  async function loadUserTeams() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      await fetchUserTeams(api, {orgId});\n\n      setState({...state, fetching: false, initiallyLoaded: true});\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function loadTeamsBySlug() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        slugs: slugsToLoad,\n        limit,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n      TeamActions.loadTeams(fetchedTeams);\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        initiallyLoaded: true,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function handleSearch(search: string) {\n    const {lastSearch} = state;\n    const cursor = state.nextCursor;\n\n    if (search === '') {\n      return;\n    }\n\n    if (orgId === undefined) {\n      // eslint-disable-next-line no-console\n      console.error('Cannot use useTeam.onSearch without an organization in context');\n      return;\n    }\n\n    setState({...state, fetching: true});\n\n    try {\n      api.clear();\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        search,\n        limit,\n        lastSearch,\n        cursor,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n\n      // Only update the store if we have more items\n      if (fetchedTeams.length > store.teams.length) {\n        TeamActions.loadTeams(fetchedTeams);\n      }\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        lastSearch: search,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, fetchError: err});\n    }\n  }\n\n  useEffect(() => {\n    // Load specified team slugs\n    if (shouldLoadSlugs) {\n      loadTeamsBySlug();\n      return;\n    }\n\n    // Load user teams\n    if (shouldLoadTeams) {\n      loadUserTeams();\n    }\n  }, [slugsRef.current, provideUserTeams]);\n\n  const isSuperuser = isActiveSuperuser();\n\n  const filteredTeams = slugs\n    ? store.teams.filter(t => slugs.includes(t.slug))\n    : provideUserTeams && !isSuperuser\n    ? store.teams.filter(t => t.isMember)\n    : store.teams;\n\n  const result: Result = {\n    teams: filteredTeams,\n    fetching: state.fetching || store.loading,\n    initiallyLoaded: state.initiallyLoaded,\n    fetchError: state.fetchError,\n    hasMore: state.hasMore,\n    onSearch: handleSearch,\n  };\n\n  return result;\n}\n\nexport default useTeams;\n","import * as React from 'react';\n\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport useTeams from 'app/utils/useTeams';\n\ntype InjectedTeamsProps = {\n  teams?: Team[];\n};\n\n/**\n * Higher order component that provides a list of teams\n *\n * @deprecated Prefer `useTeams` or `<Teams />`.\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) => {\n  const WithTeams: React.FC<Omit<P, keyof InjectedTeamsProps> & InjectedTeamsProps> =\n    props => {\n      const {teams} = useTeams();\n      return <WrappedComponent teams={teams} {...(props as P)} />;\n    };\n\n  WithTeams.displayName = `withTeams(${getDisplayName(WrappedComponent)})`;\n\n  return WithTeams;\n};\n\nexport default withTeams;\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {fetchTeamDetails, joinTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport IdBadge from 'app/components/idBadge';\nimport ListLink from 'app/components/links/listLink';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t, tct} from 'app/locale';\nimport TeamStore from 'app/stores/teamStore';\nimport {Organization, Team} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\n\ntype Props = {\n  api: Client;\n  teams: Team[];\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  requesting: boolean;\n  team: Team | null;\n};\n\nclass TeamDetails extends React.Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const team = TeamStore.getBySlug(this.props.params.teamId);\n\n    return {\n      loading: !TeamStore.initialized,\n      error: false,\n      requesting: false,\n      team,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {params} = this.props;\n\n    if (\n      prevProps.params.teamId !== params.teamId ||\n      prevProps.params.orgId !== params.orgId\n    ) {\n      this.fetchData();\n    }\n    if (!isEqual(this.props.teams, prevProps.teams)) {\n      this.setActiveTeam();\n    }\n  }\n\n  setActiveTeam() {\n    const team = TeamStore.getBySlug(this.props.params.teamId);\n    const loading = !TeamStore.initialized;\n    const error = !loading && !team;\n\n    this.setState({team, loading, error});\n  }\n\n  handleRequestAccess = () => {\n    const {api, params} = this.props;\n    const {team} = this.state;\n    if (!team) {\n      return;\n    }\n\n    this.setState({\n      requesting: true,\n    });\n\n    joinTeam(\n      api,\n      {\n        orgId: params.orgId,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          addSuccessMessage(\n            tct('You have requested access to [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n          this.setState({\n            requesting: false,\n          });\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to request access to [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n          this.setState({\n            requesting: false,\n          });\n        },\n      }\n    );\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n    fetchTeamDetails(this.props.api, this.props.params);\n  };\n\n  onTeamChange = (data: Team) => {\n    const team = this.state.team;\n    if (data.slug !== team?.slug) {\n      const orgId = this.props.params.orgId;\n      browserHistory.replace(`/organizations/${orgId}/teams/${data.slug}/settings/`);\n    } else {\n      this.setState({\n        team: {\n          ...team,\n          ...data,\n        },\n      });\n    }\n  };\n\n  render() {\n    const {children, params, routes} = this.props;\n    const {team, loading, requesting, error} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (!team || !team.hasAccess) {\n      return (\n        <Alert type=\"warning\">\n          {team ? (\n            <RequestAccessWrapper>\n              {tct('You do not have access to the [teamSlug] team.', {\n                teamSlug: <strong>{`#${team.slug}`}</strong>,\n              })}\n              <Button\n                disabled={requesting || team.isPending}\n                size=\"small\"\n                onClick={this.handleRequestAccess}\n              >\n                {team.isPending ? t('Request Pending') : t('Request Access')}\n              </Button>\n            </RequestAccessWrapper>\n          ) : (\n            <div>{t('You do not have access to this team.')}</div>\n          )}\n        </Alert>\n      );\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    // `/organizations/${orgId}/teams/${teamId}`;\n    const routePrefix = recreateRoute('', {routes, params, stepBack: -1});\n\n    const navigationTabs = [\n      <ListLink key={0} to={`${routePrefix}members/`}>\n        {t('Members')}\n      </ListLink>,\n      <ListLink key={1} to={`${routePrefix}projects/`}>\n        {t('Projects')}\n      </ListLink>,\n      <ListLink key={2} to={`${routePrefix}notifications/`}>\n        {t('Notifications')}\n      </ListLink>,\n      <ListLink key={3} to={`${routePrefix}settings/`}>\n        {t('Settings')}\n      </ListLink>,\n    ];\n\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Team Details')} orgSlug={params.orgId} />\n        <h3>\n          <IdBadge hideAvatar team={team} avatarSize={36} />\n        </h3>\n\n        <NavTabs underlined>{navigationTabs}</NavTabs>\n\n        {React.isValidElement(children) &&\n          React.cloneElement(children, {\n            team,\n            onTeamChange: this.onTeamChange,\n          })}\n      </div>\n    );\n  }\n}\n\n// TODO(davidenwang): change to functional component and replace withTeams with useTeams\nexport default withApi(withOrganization(withTeams(TeamDetails)));\n\nconst RequestAccessWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n"],"names":["doCallback","params","name","args","callIfFunction","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamActions","fetchTeamDetails","options","teamId","request","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","ListLink","React","_classNames","className","activeClassName","this","props","isActive","classNames","to","query","index","router","queryData","qs","undefined","target","pathname","render","children","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","SentryDocumentTitle","title","orgSlug","projectSlug","docTitle","isActiveSuperuser","isSuperuser","ConfigStore","Cookies","recreateRoute","routes","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","fetchTeams","slugs","limit","lastSearch","cursor","length","trim","per_page","hasMore","nextCursor","resp","includeAllArgs","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","results","previous","provideUserTeams","useApi","useLegacyStore","OrganizationStore","store","TeamStore","storeSlugs","Set","t","slugsToLoad","filter","has","shouldLoadSlugs","shouldLoadTeams","loadedUserTeams","initiallyLoaded","state","setState","useState","fetching","fetchError","slugsRef","useRef","current","size","some","useEffect","fetchedTeams","uniqBy","console","loadTeamsBySlug","loadUserTeams","includes","isMember","loading","onSearch","clear","WrappedComponent","WithTeams","useTeams","displayName","getDisplayName","TeamDetails","getInitialState","requesting","browserHistory","componentDidUpdate","prevProps","fetchData","isEqual","setActiveTeam","hasAccess","type","RequestAccessWrapper","teamSlug","isPending","onClick","handleRequestAccess","onRetry","routePrefix","navigationTabs","hideAvatar","avatarSize","underlined","onTeamChange","withApi","withOrganization","withTeams"],"sourceRoot":""}