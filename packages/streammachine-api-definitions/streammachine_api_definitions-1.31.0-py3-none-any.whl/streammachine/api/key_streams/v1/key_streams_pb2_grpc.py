# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from streammachine.api.key_streams.v1 import key_streams_pb2 as streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2


class KeyStreamsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListKeyStreams = channel.unary_unary(
                '/streammachine.api.key_streams.v1.KeyStreamsService/ListKeyStreams',
                request_serializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.ListKeyStreamsRequest.SerializeToString,
                response_deserializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.ListKeyStreamsResponse.FromString,
                )
        self.GetKeyStream = channel.unary_unary(
                '/streammachine.api.key_streams.v1.KeyStreamsService/GetKeyStream',
                request_serializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.GetKeyStreamRequest.SerializeToString,
                response_deserializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.GetKeyStreamResponse.FromString,
                )


class KeyStreamsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListKeyStreams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeyStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyStreamsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListKeyStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKeyStreams,
                    request_deserializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.ListKeyStreamsRequest.FromString,
                    response_serializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.ListKeyStreamsResponse.SerializeToString,
            ),
            'GetKeyStream': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeyStream,
                    request_deserializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.GetKeyStreamRequest.FromString,
                    response_serializer=streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.GetKeyStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streammachine.api.key_streams.v1.KeyStreamsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyStreamsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListKeyStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streammachine.api.key_streams.v1.KeyStreamsService/ListKeyStreams',
            streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.ListKeyStreamsRequest.SerializeToString,
            streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.ListKeyStreamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKeyStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streammachine.api.key_streams.v1.KeyStreamsService/GetKeyStream',
            streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.GetKeyStreamRequest.SerializeToString,
            streammachine_dot_api_dot_key__streams_dot_v1_dot_key__streams__pb2.GetKeyStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
