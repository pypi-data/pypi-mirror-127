# AUTOGENERATED! DO NOT EDIT! File to edit: 03_cli.ipynb (unless otherwise specified).

__all__ = ['dfset_writer', 'hecss_sampler']

# Cell
#export
from fastcore.script import *
from pathlib import Path
import os
import ase
from ase.calculators.vasp import Vasp
from ase import units as un
from .core import *

# Cell
def dfset_writer(s, sl, workdir=''):
    '''
    Just write samples to the DFSET.dat file in the workdir directory.
    '''
    wd = Path(workdir)
    write_dfset(f'{wd.joinpath("DFSET.dat")}', s)
    # Important! Return False to keep iteration going
    return False

# Cell
@call_parse
def hecss_sampler(fname:Param("Basic structure file. Any type recognized by ASE is accepted.", str)="CONTCAR",
                  work_dir:Param("Work directory", str)="WORK",
                  label:Param("Label for the calculations. This got appended to work directory")="hecss",
                  T:Param("Target temperature in Kelvin", float)=300,
                  calc:Param("ASE calculator to be used for the job.\n"+
                             "Supported calculators: VASP (default)"
                             , str)="VASP",
                  N:Param("Number of samples to be generated", int)=10,
                  DF:Param("Write DFSET file for ALAMODE", bool)=False,
                  com:Param("Command to run calculator", str)="./run-calc",
                  ):
    '''
    Run HECSS sampler on the structure in the directory.
    '''
    print(f'Running HECSS on {fname} at {T}K in {work_dir} directory using {calc}.')

    src_path = Path(fname)

    print(src_path.parent, src_path.name)

    if calc=="VASP":
        calculator = Vasp(label=label, directory=src_path.parent, restart=True)
        cryst = ase.Atoms(calculator.atoms)
        cryst.set_calculator(calculator)
        calculator.set(directory=work_dir)
        com = Path(com)
        calculator.set(command=f'{com.absolute()} {label}')
    sentinel = None
    if DF :
        sentinel = dfset_writer
    sampler = HECSS(cryst, calculator, T, directory=work_dir)
    samples = sampler.generate(N, sentinel=sentinel, workdir=work_dir)
    return samples