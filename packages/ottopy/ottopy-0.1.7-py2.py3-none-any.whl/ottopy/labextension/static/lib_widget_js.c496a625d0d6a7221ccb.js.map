{"version":3,"file":"lib_widget_js.c496a625d0d6a7221ccb.js","mappings":";;;;;;;;;AAAa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,wBAAwB;AAC7C,gCAAgC,mBAAO,CAAC,0DAAO;AAC/C,sBAAsB,mBAAO,CAAC,kDAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC,MAAM;AACzC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;;AC7Ma;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,qBAAqB,GAAG,sBAAsB;AACnE,gCAAgC,mBAAO,CAAC,0DAAO;AAC/C,sBAAsB,mBAAO,CAAC,kDAAe;AAC7C,iCAAiC,mBAAO,CAAC,oDAAQ;AACjD,mCAAmC,mBAAO,CAAC,0DAAiB;AAC5D,iCAAiC,mBAAO,CAAC,sDAAe;AACxD,mCAAmC,mBAAO,CAAC,0DAAiB;AAC5D,oCAAoC,mBAAO,CAAC,oDAAoB;AAChE;AACA;AACA;AACA;AACA,sBAAsB;AACtB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uFAAuF,cAAc,2BAA2B,YAAY;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C,wBAAwB;AACpE,SAAS;AACT;AACA;AACA,4CAA4C,wBAAwB;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sDAAsD,sCAAsC;AAC5F;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,6BAA6B,KAAK;AAClC;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,EAAE,GAAG,EAAE;AAC3D;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,GAAG,EAAE;AAChC,SAAS;AACT;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA,yBAAyB,EAAE,GAAG,EAAE;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE,GAAG,EAAE;AAC7D,oDAAoD,EAAE,GAAG,EAAE;AAC3D,mDAAmD,EAAE,GAAG,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,GAAG,EAAE;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2DAA2D;AAC3D;AACA,yBAAyB,IAAI;AAC7B;AACA,6BAA6B,EAAE,GAAG,EAAE;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,GAAG,EAAE;AACpC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,GAAG,EAAE;AACpC,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA,aAAa;AACb;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA,aAAa;AACb;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,aAAa,eAAe,EAAE,GAAG,EAAE,2DAA2D;AAC1K;AACA;AACA,4EAA4E,eAAe,EAAE,GAAG,EAAE,GAAG,aAAa,wDAAwD;AAC1K;AACA;AACA;AACA;AACA;AACA,iCAAiC,IAAI;AACrC;AACA;AACA;AACA;AACA,gDAAgD,oCAAoC,GAAG,EAAE,GAAG,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;;ACzhBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;;ACrCa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;ACpBa;AACb;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,iBAAiB;AACpC,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA,mBAAO,CAAC,2CAAmB;AAC3B,sBAAsB,mBAAO,CAAC,yDAAsB;AACpD,iCAAiC,mBAAO,CAAC,oDAAQ;AACjD,kCAAkC,mBAAO,CAAC,gEAAS;AACnD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,6QAA6Q,qBAAqB,oBAAoB;AAC1X;AACA;AACA,iBAAiB;AACjB,wCAAwC;AACxC;AACA;AACA;AACA,kCAAkC;AAClC,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB,+BAA+B,yBAAyB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,mGAAmG,cAAc,2BAA2B,YAAY;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iBAAiB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;AC1KA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F;AACA;AACA,iCAAiC,kCAAkC,GAAG,cAAc,uBAAuB,qBAAqB,gCAAgC,+BAA+B,iBAAiB,4CAA4C,sCAAsC,GAAG,eAAe,uBAAuB,iBAAiB,GAAG,aAAa,cAAc,GAAG,aAAa,cAAc,GAAG,aAAa,cAAc,GAAG,aAAa,cAAc,GAAG,aAAa,cAAc,GAAG,oCAAoC,kCAAkC,GAAG,+BAA+B,kCAAkC,kBAAkB,iBAAiB,IAAI,sBAAsB,2BAA2B,iBAAiB,kBAAkB,wBAAwB,uBAAuB,GAAG,wBAAwB,kBAAkB,eAAe,gBAAgB,uBAAuB,GAAG,sBAAsB,gBAAgB,gBAAgB,mBAAmB,GAAG,uBAAuB,2BAA2B,2BAA2B,iBAAiB,gBAAgB,sBAAsB,sBAAsB,2BAA2B,gBAAgB,uBAAuB,oBAAoB,GAAG,wCAAwC,wBAAwB,kDAAkD,GAAG,6BAA6B,8BAA8B,GAAG,qBAAqB,kBAAkB,YAAY,8BAA8B,GAAG,kBAAkB,mBAAmB,2BAA2B,GAAG,WAAW,kBAAkB,GAAG,WAAW,qBAAqB,GAAG,WAAW,kBAAkB,mCAAmC,2BAA2B,iBAAiB,4CAA4C,GAAG,YAAY,gBAAgB,iBAAiB,8BAA8B,oCAAoC,kBAAkB,sBAAsB,kBAAkB,2BAA2B,GAAG,iBAAiB,qBAAqB,wBAAwB,GAAG,iBAAiB,gBAAgB,iBAAiB,GAAG,kBAAkB,8BAA8B,uBAAuB,oBAAoB,qBAAqB,GAAG,kBAAkB,mBAAmB,oBAAoB,GAAG,iBAAiB,YAAY,GAAG,YAAY,uBAAuB,wBAAwB,yBAAyB,6BAA6B,kCAAkC,2BAA2B,eAAe,wBAAwB,qBAAqB,4BAA4B,qBAAqB,GAAG,kBAAkB,mBAAmB,8BAA8B,GAAG,eAAe,mBAAmB,uBAAuB,8BAA8B,GAAG,iBAAiB,mBAAmB,8BAA8B,GAAG;AACrwF;AACA;;;;;;;;;;;ACNA,UAAU,mBAAO,CAAC,oJAAwE;AAC1F,0BAA0B,mBAAO,CAAC,qHAAuD;;AAEzF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA","sources":["webpack://ottopy/./lib/models/robot_model.js","webpack://ottopy/./lib/models/world_model.js","webpack://ottopy/./lib/utils/draggable.js","webpack://ottopy/./lib/version.js","webpack://ottopy/./lib/widget.js","webpack://ottopy/./css/widget.css","webpack://ottopy/./css/widget.css?a195"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RobotModel = exports.orientation_hash = void 0;\nconst konva_1 = __importDefault(require(\"konva\"));\nconst world_model_1 = require(\"./world_model\");\nconst mod = (n, m) => {\n    return ((n % m) + m) % m;\n};\nconst _directions = [\n    [1, -1],\n    [1, 1],\n    [-1, 1],\n    [-1, -1],\n];\n// const rotationFix = [\n//   [0, 0],\n//   [0, -1],\n//   [1, -1],\n//   [1, 0],\n// ];\nexports.orientation_hash = {\n    EAST: 0,\n    NORTH: 1,\n    WEST: 2,\n    SOUTH: 3,\n};\nconst robot_svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" class=\"svg-triangle\" width='100' height='100' fill=\"#008080\">\n<path d=\"M 95,50 5,95 5,5 z\"/>\n</svg>`;\nclass RobotModel {\n    constructor(index, world, x, y, orientation, image) {\n        this.points = [];\n        this.traceColor = 'red';\n        this.speed = 1;\n        this.move_to = (x, y) => {\n            if (!this.node) {\n                return Promise.resolve('bot is not created.');\n            }\n            return new Promise((resolve) => {\n                let [cx, cy] = this.cr2xy(x, y);\n                let tween = new konva_1.default.Tween({\n                    node: this.node,\n                    x: cx + world_model_1.IMAGE_PADDING + this.node.width() / 2,\n                    y: cy + world_model_1.IMAGE_PADDING + this.node.height() / 2,\n                    offsetX: this.node.width() / 2,\n                    offsetY: this.node.height() / 2,\n                    duration: this.speed,\n                    onFinish: () => {\n                        this.x = x;\n                        this.y = y;\n                        console.log('finished', x, y);\n                        this.add_point(x, y);\n                        resolve('done');\n                    },\n                });\n                tween.play();\n            });\n        };\n        this.rotate_node = (node, rotation) => {\n            const degToRad = Math.PI / 180;\n            const rotatePoint = ({ x, y }, deg) => {\n                const rcos = Math.cos(deg * degToRad), rsin = Math.sin(deg * degToRad);\n                return { x: x * rcos - y * rsin, y: y * rcos + x * rsin };\n            };\n            //current rotation origin (0, 0) relative to desired origin - center (node.width()/2, node.height()/2)\n            const displayedWidth = node.width() * node.scaleX();\n            const displayedHeight = node.height() * node.scaleY();\n            const topLeft = { x: -displayedWidth / 2, y: -displayedHeight / 2 };\n            const current = rotatePoint(topLeft, node.rotation());\n            const rotated = rotatePoint(topLeft, rotation);\n            const dx = rotated.x - current.x, dy = rotated.y - current.y;\n            return {\n                x: dx,\n                y: dy,\n                rotation,\n            };\n        };\n        this.turn_left = () => {\n            if (!this.node) {\n                return Promise.resolve('bot is not created.');\n            }\n            return new Promise((resolve) => {\n                this.orientation = mod(this.orientation + 1, 4);\n                // let [cx, cy] = this.cr2xy(this.x, this.y);\n                this.rotation_diff = this.rotate_node(this.node, mod(-90 * this.orientation, 360));\n                let tween = new konva_1.default.Tween({\n                    node: this.node,\n                    rotation: this.rotation_diff.rotation,\n                    duration: this.speed,\n                    // x: this.node.x() + this.rotation_diff.x,\n                    // y: this.node.y() + this.rotation_diff.y,\n                    onFinish: () => {\n                        this.add_point(this.x, this.y);\n                        console.log('finished', this.x, this.y);\n                        resolve('done');\n                    },\n                });\n                tween.play();\n            });\n        };\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.orientation = orientation;\n        this.image = image;\n        this.world = world;\n        this.speed = 0.1;\n        this.rotation_diff = { x: 0, y: 0 };\n        this.bs = this.world.bs;\n    }\n    init_canvas() {\n        this.canvas = this.world.ui.layers.main;\n    }\n    cr2xy(x, y) {\n        let [cx, cy] = this.world.point2cxy(x, y + 1);\n        return [cx, cy];\n    }\n    trace_point(x, y) {\n        let [cx, cy] = this.cr2xy(x, y - 1);\n        let direction_vector = _directions[this.orientation];\n        let scale = this.world.bs * 0.1;\n        let xx = cx + (this.world.bs / 2.0 + scale * direction_vector[0]);\n        let yy = cy - (this.world.bs / 2.0 + scale * direction_vector[1]);\n        return [xx, yy];\n    }\n    draw_trace() {\n        let trace = new konva_1.default.Line({\n            points: this.points.slice(Math.max(this.points.length - 4, 0)),\n            stroke: this.traceColor,\n            offsetX: -world_model_1.NUMBER_PADDING,\n        });\n        if (this.world &&\n            this.world.ui &&\n            this.world.ui.layers &&\n            this.world.ui.layers.line) {\n            this.world.ui.layers.line.add(trace);\n            this.world.ui.layers.line.draw();\n        }\n    }\n    add_point(x, y) {\n        const [tx, ty] = this.trace_point(x, y);\n        this.points = this.points.concat([tx, ty]);\n        this.draw_trace();\n    }\n    set_trace(color) {\n        this.traceColor = color;\n        this.add_point(this.x, this.y);\n    }\n    set_speed(speed) {\n        this.speed = speed;\n    }\n    clear_trace() {\n        this.points = [];\n        if (this.world &&\n            this.world.ui &&\n            this.world.ui.layers &&\n            this.world.ui.layers.line) {\n            this.world.ui.layers.line.destroyChildren();\n            this.world.ui.layers.line.draw();\n        }\n    }\n    draw() {\n        let [cx, cy] = this.cr2xy(this.x, this.y);\n        if (this.image) {\n            konva_1.default.Image.fromURL(this.image, (node) => {\n                this.rotation_diff = this.rotate_node(node, -(this.orientation * 90));\n                node.setAttrs({\n                    x: cx,\n                    y: cy,\n                    width: this.world.image_area,\n                    height: this.world.image_area,\n                    rotation: -(this.orientation * 90),\n                });\n                this.node = node;\n                this.canvas.add(this.node);\n                this.canvas.batchDraw();\n            });\n        }\n        else {\n            let svg64 = btoa(robot_svg);\n            var b64Start = 'data:image/svg+xml;base64,';\n            var image64 = b64Start + svg64;\n            konva_1.default.Image.fromURL(image64, (node) => {\n                node.setAttrs({\n                    x: cx + world_model_1.IMAGE_PADDING,\n                    y: cy + world_model_1.IMAGE_PADDING,\n                    width: this.world.image_area,\n                    height: this.world.image_area,\n                    rotation: -(this.orientation * 90),\n                });\n                node.offsetX(node.width() / 2);\n                node.offsetY(node.height() / 2);\n                node.x(node.x() + node.width() / 2);\n                node.y(node.y() + node.height() / 2);\n                this.node = node;\n                this.canvas.add(this.node);\n                this.canvas.batchDraw();\n            });\n        }\n    }\n}\nexports.RobotModel = RobotModel;\n//# sourceMappingURL=robot_model.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorldModel = exports.IMAGE_PADDING = exports.NUMBER_PADDING = void 0;\nconst konva_1 = __importDefault(require(\"konva\"));\nconst robot_model_1 = require(\"./robot_model\");\nconst jquery_1 = __importDefault(require(\"jquery\"));\nconst isNumber_1 = __importDefault(require(\"lodash/isNumber\"));\nconst random_1 = __importDefault(require(\"lodash/random\"));\nconst padStart_1 = __importDefault(require(\"lodash/padStart\"));\nconst draggable_1 = __importDefault(require(\"../utils/draggable\"));\nconst MIN_BOX_SIZE = 23;\nconst MAX_ROWS = 15;\nconst MAX_COLS = 15;\nconst LEFT_PADDING = 50;\nexports.NUMBER_PADDING = 30;\nexports.IMAGE_PADDING = 3;\nconst MARGIN_NUMBER_CIRCLE = 2;\nconst DEFAULT_HEIGHT = 500;\nconst MIN_HEIGHT = 450;\nconst MAX_BOX_SIZE = 50;\nconst walls_config = {\n    normal: {\n        stroke: 'darkred',\n        strokeWidth: 5,\n    },\n    removable: {\n        stroke: '#de1738',\n        strokeWidth: 5,\n    },\n    goal: {\n        stroke: 'darkred',\n        strokeWidth: 7,\n        dash: [5, 5],\n    },\n};\nclass WorldModel {\n    init(config, ui_id, rows, cols, vwalls = [], hwalls = [], robots = [], objects = {}, tileMap = {}, tiles = [], messages = {}, flags = {}, pending_goals = [], drop_goals = []) {\n        this.robots = robots.map((robot, i) => new robot_model_1.RobotModel(i, this, robot.x, robot.y, robot.orientation, robot.image));\n        this.draggable = false;\n        this.rows = Math.min(MAX_ROWS, rows);\n        this.cols = Math.min(MAX_COLS, cols);\n        this.vwalls = vwalls;\n        this.hwalls = hwalls;\n        this.config = config;\n        this.ui_id = ui_id;\n        let screen_height = jquery_1.default(window).height() || DEFAULT_HEIGHT;\n        let grid_height = Math.max(screen_height * 0.6, MIN_HEIGHT);\n        this.currentZoom = 1;\n        this.bs = Math.ceil(Math.max(Math.min(grid_height / Math.max(this.rows, this.cols), MAX_BOX_SIZE), MIN_BOX_SIZE));\n        this.image_area = this.bs - 2 * exports.IMAGE_PADDING;\n        this.height = rows * this.bs;\n        this.width = cols * this.bs;\n        this.objects = objects;\n        this.tileMap = tileMap;\n        this.tiles = tiles;\n        this.pending_goals = pending_goals;\n        this.drop_goals = drop_goals;\n        this.messages = messages;\n        this.flags = flags;\n        this.init_with_id(this.ui_id);\n    }\n    init_output_window() {\n        let $outputArea = jquery_1.default('#outputArea');\n        let $currentRun = this.current_run;\n        $currentRun.append(this.skeleton());\n        let that = this;\n        //button actions\n        jquery_1.default('.output-action-toggle', $currentRun).on('click', function () {\n            console.log('clicked button');\n            if (jquery_1.default(this).html() == 'ᐁ') {\n                jquery_1.default(this).html('ᐅ');\n            }\n            else {\n                jquery_1.default(this).html('ᐁ');\n            }\n            jquery_1.default('.grid-slider', $currentRun).slideToggle();\n        });\n        jquery_1.default('.output-action-zoom-in', $currentRun).on('click', function () {\n            that.currentZoom += 0.1;\n            $currentRun.find('.grid').css({ zoom: that.currentZoom });\n        });\n        jquery_1.default('.output-action-zoom-out', $currentRun).on('click', function () {\n            that.currentZoom -= 0.1;\n            $currentRun.find('.grid').css({ zoom: that.currentZoom });\n        });\n        //Draggble $current_run\n        if (this.config.floating && !this.draggable) {\n            draggable_1.default($outputArea[0]);\n            this.draggable = true;\n        }\n        if (!this.config.floating) {\n            $outputArea[0].onmousedown = null;\n        }\n    }\n    init_with_id(ui_id) {\n        let $outputArea = jquery_1.default('#outputArea');\n        this.current_run = jquery_1.default(`#${this.ui_id}`, $outputArea);\n        //clean up\n        jquery_1.default('.run_output', $outputArea).not(this.current_run).remove();\n        if (this.current_run.length === 0) {\n            console.log('in the run');\n            this.current_run = jquery_1.default(`<div id=${this.ui_id} class='run_output'> </div>`);\n            $outputArea.append(this.current_run);\n            this.init_output_window();\n            this.draw_canvas();\n        }\n    }\n    skeleton() {\n        return `\n      <div class=\"output-header clr-info\">\n        <div class=\"output-header-msg\"></div>\n        <div class=\"output-actions btn-group\">\n          <button class=\"output-action-zoom-in\">&plus;</button>\n          <button class=\"output-action-zoom-out\">&minus;</button>\n          <button class=\"output-action-toggle\">ᐁ</button>\n        </div>\n      </div>   \n      <div class=\"grid-slider\">\n        <div class=\"grid\">\n          <div class=\"stats\">\n            <div class=\"stats-item\">\n              <div class=\"stats-title\">Taken Moves</div>\n              <div class=\"no_of_steps stats-value\">0</div> \n            </div>\n            <div class=\"stats-item\">\n              <div class=\"stats-title\">current load</div>\n              <div class=\"current_load stats-value\">0</div> \n            </div>\n            <div class=\"stats-item\">\n              <div class=\"stats-title\">capacity</div>\n              <div class=\"capacity stats-value\">Unlimited</div> \n            </div>\n          </div>\n          <div class=\"konva-body\">\n            <div class=\"konva-grid\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n    }\n    draw_canvas() {\n        try {\n            let stage = new konva_1.default.Stage({\n                container: '.konva-grid',\n                width: this.width + exports.NUMBER_PADDING,\n                height: this.height + exports.NUMBER_PADDING,\n            });\n            this.ui = {\n                stage: stage,\n                layers: {\n                    bg: new konva_1.default.Layer(),\n                    main: new konva_1.default.Layer({ offsetX: -1 * exports.NUMBER_PADDING }),\n                    line: new konva_1.default.Layer(),\n                },\n            };\n            this.robots[0].init_canvas();\n            this.robots[0].draw();\n            stage.add(this.ui.layers.bg);\n            stage.add(this.ui.layers.main);\n            stage.add(this.ui.layers.line);\n            this.draw_border();\n            this.draw_grid();\n            this.draw_objects();\n            this.draw_stats();\n            this.draw_envelops();\n            this.draw_flags();\n            this.draw_drop_goals(this.drop_goals);\n            return this.ui.layers.main.draw();\n        }\n        catch (error) {\n            console.log('🚀 ~ file: world_model.ts ~ line 238 ~ WorldModel ~ draw_canvas ~ error', error);\n            return Promise.resolve(error);\n        }\n    }\n    draw_stats() {\n        let vals = [\n            this.stats.total_moves,\n            this.stats.current_load,\n            this.stats.max_capacity || 'Unlimited',\n        ];\n        //@ts-ignore\n        jquery_1.default('.stats-value').text(function (i) {\n            return vals[i];\n        });\n    }\n    alert(msg, type = 'info', waitFor = 3000) {\n        const classToRemove = ['info', 'success', 'danger']\n            .filter((x) => x !== type)\n            .map((x) => `clr-${x}`)\n            .join(' ');\n        jquery_1.default('.output-header', this.current_run)\n            .removeClass(classToRemove)\n            .addClass(`clr-${type}`);\n        return jquery_1.default('.output-header-msg', this.current_run)\n            .text(msg)\n            .css({ opacity: 1 })\n            .animate({\n            width: 'show',\n            duration: waitFor,\n        });\n    }\n    success_msg(msg) {\n        let arr = [];\n        return this.alert(arr.concat(msg).join(','), 'success');\n    }\n    draw_objects() {\n        for (const key in this.objects) {\n            const [x, y] = key.split(',').map((zz) => parseInt(zz));\n            this.draw_object(x, y, this.objects[key]);\n        }\n    }\n    draw_flags() {\n        for (const key in this.flags) {\n            const [x, y] = key.split(',').map((zz) => parseInt(zz));\n            this.draw_flag(x, y);\n        }\n    }\n    draw_flag(x, y) {\n        this.draw_custom('racing_flag_small', x, y, 0);\n    }\n    draw_object(x, y, obj) {\n        for (const obj_name in obj) {\n            let val = this.parse_value(obj[obj_name]);\n            if (obj_name === 'beeper') {\n                this.draw_beeper(x, y, val);\n            }\n            else {\n                this.draw_custom(obj_name, x, y, val);\n            }\n        }\n    }\n    draw_envelops() {\n        for (const key in this.messages) {\n            const [x, y] = key.split(',').map((zz) => parseInt(zz));\n            this.draw_envelop(x, y, this.messages[key]);\n        }\n    }\n    draw_envelop(x, y, message) {\n        this.draw_custom('envelope', x, y);\n    }\n    update_object(x, y, val) {\n        let text = this.ui.layers.main.find(`.obj-${x}-${y}-text`)[0];\n        if (text) {\n            //@ts-ignore\n            text.text(`${val}`);\n            this.ui.layers.main.draw();\n        }\n    }\n    draw_beeper(x, y, val) {\n        let radius = (0.6 * this.bs) / 2;\n        let [cx, cy] = this.point2cxy(x, y);\n        cx = cx + this.bs / 2;\n        cy = cy - this.bs / 2;\n        let fontSize = Math.ceil((this.bs * 18) / 50);\n        let circle = new konva_1.default.Circle({\n            radius: radius,\n            x: cx,\n            y: cy,\n            fill: 'yellow',\n            stroke: 'orange',\n            strokeWidth: 5,\n            name: `obj-${x}-${y}-circle`,\n        });\n        let num = new konva_1.default.Text({\n            text: `${val}`,\n            x: cx - circle.radius() / 2,\n            y: cy - circle.radius() / 2,\n            fontSize: fontSize,\n            name: `obj-${x}-${y}-text`,\n        });\n        this.ui.layers.main.add(circle, num);\n    }\n    remove_object(x, y) {\n        if (!this.ui) {\n            return;\n        }\n        let circle = this.ui.layers.main.find(`.obj-${x}-${y}-circle`)[0];\n        let text = this.ui.layers.main.find(`.obj-${x}-${y}-text`)[0];\n        let img = this.ui.layers.main.find(`.obj-${x}-${y}-img`)[0];\n        if (circle) {\n            //@ts-ignore\n            circle.destroy();\n        }\n        if (text) {\n            //@ts-ignore\n            text.destroy();\n        }\n        if (img) {\n            //@ts-ignore\n            img.destroy();\n        }\n        this.ui.layers.main.draw();\n    }\n    //not touched yet to fix\n    draw_sprite(sprite_name, x, y, frameRate = 1) {\n        let spritePath = this.tileMap[sprite_name];\n        let [cx, cy] = this.point2cxy(x, y);\n        let sprite = new Image();\n        sprite.src = spritePath;\n        const animations = {\n            motion: [0, 0, 40, 40, 40, 0, 40, 40],\n        };\n        let that = this;\n        sprite.onload = function () {\n            let imageSprite = new konva_1.default.Sprite({\n                x: cx + LEFT_PADDING,\n                y: cy - that.bs / 2,\n                name: `sprite-${x}-${y}-img`,\n                image: sprite,\n                animation: 'motion',\n                animations: animations,\n                frameRate: frameRate,\n            });\n            that.ui.layers.main.add(imageSprite);\n            that.ui.layers.main.batchDraw();\n            imageSprite.start();\n        };\n    }\n    draw_custom(obj_name, x, y, val = null, isGoal = false) {\n        let imagePath = this.tileMap[obj_name];\n        let [cx, cy] = this.point2cxy(x, y + 1);\n        let radius = (0.4 * this.bs) / 2;\n        let group = new konva_1.default.Group({\n            x: cx + (this.bs - radius) - MARGIN_NUMBER_CIRCLE,\n            y: cy + (this.bs - radius) - MARGIN_NUMBER_CIRCLE,\n        });\n        if (!isGoal && !!val) {\n            let circle = new konva_1.default.Circle({\n                radius: radius,\n                fill: 'white',\n                stroke: '#aaa',\n                opacity: 0.9,\n            });\n            let TEXT_MARGIN = val > 9 ? MARGIN_NUMBER_CIRCLE : 2 * MARGIN_NUMBER_CIRCLE;\n            let fontSize = Math.ceil((this.bs * 14) / 50); // when bs = 50 fontSize=14\n            let num = new konva_1.default.Text({\n                text: `${val}`,\n                fontSize: fontSize,\n                name: `obj-${x}-${y}-text`,\n                offsetX: circle.x() + radius - TEXT_MARGIN,\n                offsetY: circle.y() + radius - TEXT_MARGIN,\n            });\n            group.add(circle, num);\n        }\n        konva_1.default.Image.fromURL(imagePath, (node) => {\n            node.setAttrs({\n                x: cx + exports.IMAGE_PADDING,\n                y: cy + exports.IMAGE_PADDING,\n                width: this.image_area,\n                height: this.image_area,\n                name: `obj-${x}-${y}-img`,\n            });\n            if (isGoal) {\n                node.cache();\n                node.filters([konva_1.default.Filters.Grayscale]);\n                this.ui.layers.main.add(node);\n            }\n            else {\n                this.ui.layers.main.add(node);\n                this.ui.layers.main.add(group);\n            }\n            this.ui.layers.main.batchDraw();\n        });\n    }\n    draw_drop_goals(goals = []) {\n        goals.map((goal) => {\n            //@ts-ignore\n            this.draw_custom(goal.obj_name, goal.x, goal.y, goal.val, true);\n        });\n    }\n    update_stats(stats = {}) {\n        this.stats = stats;\n        this.draw_stats();\n    }\n    parse_value(val) {\n        if (!val)\n            return 0;\n        if (isNumber_1.default(val))\n            return val;\n        else {\n            const [min_val, max_val] = val.split('-').map((zz) => parseInt(zz));\n            return random_1.default(min_val, max_val);\n        }\n    }\n    draw_border() {\n        let box = new konva_1.default.Rect({\n            stroke: this.config.border_color,\n            strokeWidth: 5,\n            closed: true,\n            width: this.width,\n            height: this.height,\n        });\n        console.log('🚀 ~ file: world_model.ts ~ line 585 ~ WorldModel ~ draw_border ~ this.height', this.height);\n        this.ui.layers.main.add(box);\n    }\n    draw_grid() {\n        this.draw_cols();\n        this.draw_rows();\n        this.draw_walls();\n        this.draw_tiles();\n    }\n    _draw_tile(x, y, tile) {\n        let [cx, cy] = this.point2cxy(x, y + 1);\n        let imagePath = this.tileMap[tile];\n        konva_1.default.Image.fromURL(imagePath, (node) => {\n            node.setAttrs({\n                x: cx + exports.NUMBER_PADDING,\n                y: cy,\n                width: this.bs,\n                height: this.bs,\n                name: `obj-${x}-${y}-tilebg`,\n            });\n            this.ui.layers.bg.add(node);\n            this.ui.layers.bg.batchDraw();\n        });\n    }\n    draw_tiles() {\n        this.tiles.forEach((list, row) => {\n            list.forEach((tile, col) => {\n                if (!!tile) {\n                    this._draw_tile(row + 1, col + 1, tile);\n                }\n            });\n        });\n    }\n    draw_cols() {\n        const BOX_TO_NUM_PADDING = 10;\n        for (let col = 1; col < this.cols; col++) {\n            let line = new konva_1.default.Line({\n                stroke: this.config.grid_line_color,\n                points: [col * this.bs, 2.5, col * this.bs, this.height - 2.5],\n            });\n            let count = new konva_1.default.Text({\n                text: `${col}`,\n                y: this.height + BOX_TO_NUM_PADDING,\n                x: (col - 1) * this.bs + this.bs / 4,\n            });\n            this.ui.layers.main.add(line, count);\n        }\n        let last_count = new konva_1.default.Text({\n            text: `${this.cols}`,\n            y: this.height + BOX_TO_NUM_PADDING,\n            x: (this.cols - 1) * this.bs + this.bs / 4,\n        });\n        this.ui.layers.main.add(last_count);\n    }\n    draw_rows() {\n        for (let row = 1; row < this.rows; row++) {\n            let line = new konva_1.default.Line({\n                stroke: this.config.grid_line_color,\n                points: [this.width - 2.5, row * this.bs, 2.5, row * this.bs],\n            });\n            let count = new konva_1.default.Text({\n                text: `${this.rows + 1 - row}`,\n                y: row * this.bs,\n                offsetY: this.bs * 0.75,\n                offsetX: 20,\n            });\n            this.ui.layers.main.add(line, count);\n        }\n        let last_count = new konva_1.default.Text({\n            text: `1`,\n            y: this.rows * this.bs,\n            offsetY: this.bs * 0.75,\n            offsetX: 20,\n        });\n        this.ui.layers.main.add(last_count);\n    }\n    point2cxy(x, y) {\n        return [(x - 1) * this.bs, this.height - (y - 1) * this.bs];\n    }\n    draw_wall(x, y, dir, wall_type = 'normal') {\n        let config = walls_config[wall_type];\n        let border = null;\n        let [cx, cy] = this.point2cxy(x, y);\n        if (dir === 'east') {\n            border = new konva_1.default.Line(Object.assign(Object.assign({}, config), { name: `vwall-${x}-${y}`, points: [cx + this.bs, cy - this.bs, cx + this.bs, cy] }));\n        }\n        if (dir === 'north') {\n            border = new konva_1.default.Line(Object.assign(Object.assign({ name: `hwall-${x}-${y}` }, config), { points: [cx, cy - this.bs, cx + this.bs, cy - this.bs] }));\n        }\n        if (border)\n            this.ui.layers.main.add(border);\n    }\n    read_message(msg, waitFor = 3) {\n        return this.alert(`🤖: ${msg}`, 'info', waitFor * 1000);\n    }\n    remove_wall(x, y, dir) {\n        if (dir !== 'north' && dir !== 'east')\n            return;\n        let wall = this.ui.layers.main.find(`.${dir === 'north' ? 'hwall' : 'vwall'}-${x}-${y}`)[0];\n        if (wall) {\n            wall.destroy();\n        }\n        this.ui.layers.main.draw();\n    }\n    draw_typed_wall(x, y, dir, val) {\n        let [isGoal, isRemovable, isWall] = padStart_1.default(Number(val).toString(2), 3, '0');\n        if (parseInt(isWall)) {\n            if (parseInt(isRemovable)) {\n                this.draw_wall(x, y, dir, 'removable');\n            }\n            else {\n                this.draw_wall(x, y, dir, 'normal');\n            }\n        }\n        else if (parseInt(isGoal)) {\n            this.draw_wall(x, y, dir, 'goal');\n        }\n    }\n    draw_walls() {\n        this.hwalls.forEach((hw, i) => {\n            hw.forEach((val, j) => {\n                if (val) {\n                    this.draw_typed_wall(i, j, 'north', val);\n                }\n                else {\n                    this.remove_wall(i, j, 'north');\n                }\n            });\n        });\n        this.vwalls.forEach((vw, i) => {\n            vw.forEach((val, j) => {\n                if (val) {\n                    this.draw_typed_wall(i, j, 'east', val);\n                }\n                else {\n                    this.remove_wall(i, j, 'east');\n                }\n            });\n        });\n    }\n}\nexports.WorldModel = WorldModel;\n//# sourceMappingURL=world_model.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction dragElement(elmnt) {\n    if (!document)\n        return;\n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n    /* otherwise, move the DIV from anywhere inside the DIV:*/\n    elmnt.onmousedown = dragMouseDown;\n    function dragMouseDown(e) {\n        e = e || window.event;\n        e.preventDefault();\n        // get the mouse cursor position at startup:\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        document.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        document.onmousemove = elementDrag;\n    }\n    function elementDrag(e) {\n        e = e || window.event;\n        e.preventDefault();\n        // calculate the new cursor position:\n        pos1 = pos3 - e.clientX;\n        pos2 = pos4 - e.clientY;\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        // set the element's new position:\n        elmnt.style.top = elmnt.offsetTop - pos2 + 'px';\n        elmnt.style.left = elmnt.offsetLeft - pos1 + 'px';\n    }\n    function closeDragElement() {\n        /* stop moving when mouse button is released:*/\n        document.onmouseup = null;\n        document.onmousemove = null;\n    }\n}\nexports.default = dragElement;\n//# sourceMappingURL=draggable.js.map","\"use strict\";\n// Copyright (c) Indresh Vishwakarma\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\n// Copyright (c) Indresh Vishwakarma\n// Distributed under the terms of the Modified BSD License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MazeView = exports.MazeModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst version_1 = require(\"./version\");\n// Import the CSS\nrequire(\"../css/widget.css\");\nconst world_model_1 = require(\"./models/world_model\");\nconst jquery_1 = __importDefault(require(\"jquery\"));\nconst p_queue_1 = __importDefault(require(\"p-queue\"));\nconst queue = new p_queue_1.default({ concurrency: 1 });\n//Allowed method without valid maze\nconst ALLOWED_METHOD = ['halt', 'draw_all'];\nclass MazeModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: MazeModel.model_name, _model_module: MazeModel.model_module, _model_module_version: MazeModel.model_module_version, _view_name: MazeModel.view_name, _view_module: MazeModel.view_module, _view_module_version: MazeModel.view_module_version, current_call: '{}', method_return: '{}', floating: false });\n    }\n}\nexports.MazeModel = MazeModel;\nMazeModel.serializers = Object.assign({}, base_1.DOMWidgetModel.serializers);\nMazeModel.model_name = 'MazeModel';\nMazeModel.model_module = version_1.MODULE_NAME;\nMazeModel.model_module_version = version_1.MODULE_VERSION;\nMazeModel.view_name = 'MazeView'; // Set to null if no view\nMazeModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nMazeModel.view_module_version = version_1.MODULE_VERSION;\nclass MazeView extends base_1.DOMWidgetView {\n    constructor() {\n        super(...arguments);\n        this.method_changed = () => {\n            let current_call = JSON.parse(this.model.get('current_call'));\n            console.log(`#${current_call.ui_id} need to call current_method: ${current_call.method_name}`);\n            if (!current_call.method_name) {\n                console.log('clearing queue');\n                queue.clear();\n            }\n            this.report_stats(current_call.stats);\n            if (current_call.method_name === 'halt') {\n                return this.halt();\n            }\n            else {\n                queue.add(() => {\n                    return new Promise((resolve) => {\n                        let ret = typeof this[current_call.method_name] ===\n                            'function'\n                            ? this[current_call.method_name].apply(this, current_call.params)\n                            : null;\n                        if (!ALLOWED_METHOD.some((e) => e === current_call.method_name) &&\n                            !jquery_1.default(`#${current_call.ui_id}`).length) {\n                            console.log('maze is not loaded or invalid id: ', current_call.ui_id, current_call.method_name, current_call.method_name in ALLOWED_METHOD);\n                            return resolve(null);\n                        }\n                        console.log('current_call in promise -> new code', current_call);\n                        let that = this;\n                        Promise.resolve(ret)\n                            .then(function (x) {\n                            // console.log(\"reached in promise\");\n                            let data = JSON.stringify({\n                                value: x,\n                                cb: +new Date(),\n                                params: current_call.params,\n                                method: current_call.method_name,\n                            });\n                            console.log('setting return', data);\n                            that.model.set('method_return', data);\n                            that.model.save_changes();\n                            return data;\n                        })\n                            .then(resolve)\n                            .catch((err) => {\n                            console.log('error =>', current_call.method_name, 'execution failed', err);\n                        });\n                    });\n                });\n            }\n        };\n        this.draw_all = (world_config, ui_id, rows, cols, vwalls, hwalls, robots = [], objects = {}, tileMap = {}, tiles = [], messages = {}, flags = {}, pending_goals = [], drop_goals = []) => {\n            this.world_model.init(world_config, ui_id, rows, cols, vwalls, hwalls, robots, objects, tileMap, tiles, messages, flags, pending_goals, drop_goals);\n            return Promise.resolve('init done');\n        };\n        this.halt = () => {\n            console.log('halting and clearing queue');\n            return queue.clear();\n        };\n        this.move_to = (index, x, y) => {\n            var _a;\n            return this.world_model && ((_a = this.world_model.robots[index]) === null || _a === void 0 ? void 0 : _a.move_to(x, y));\n        };\n        this.report_stats = (stats) => {\n            return (this.world_model &&\n                this.world_model.update_stats &&\n                this.world_model.update_stats(stats));\n        };\n        this.turn_left = (index) => {\n            var _a;\n            return (this.world_model &&\n                this.world_model.robots &&\n                this.world_model.robots.length > 0 && ((_a = this.world_model.robots[index]) === null || _a === void 0 ? void 0 : _a.turn_left()));\n        };\n        this.set_trace = (index, color) => {\n            var _a;\n            return (this.world_model &&\n                this.world_model.robots &&\n                this.world_model.robots.length > 0 && ((_a = this.world_model.robots[index]) === null || _a === void 0 ? void 0 : _a.set_trace(color)));\n        };\n        this.set_speed = (index, speed) => {\n            var _a;\n            return (this.world_model &&\n                this.world_model.robots &&\n                this.world_model.robots.length > 0 && ((_a = this.world_model.robots[index]) === null || _a === void 0 ? void 0 : _a.set_speed(speed)));\n        };\n        this.add_wall = (x, y, dir) => {\n            return this.world_model.draw_wall(x, y, dir);\n        };\n        this.add_object = (x, y, obj_name, val) => {\n            return this.world_model.draw_object(x, y, { [obj_name]: val });\n        };\n        this.add_goal_object = (x, y, obj_name, val) => {\n            return this.world_model.draw_custom(obj_name, x, y, val, true);\n        };\n        this.update_object = (x, y, val) => {\n            return this.world_model.update_object(x, y, val);\n        };\n        this.remove_object = (x, y) => {\n            return this.world_model.remove_object(x, y);\n        };\n        this.remove_flag = (x, y) => {\n            return this.world_model.remove_object(x, y);\n        };\n        this.remove_wall = (x, y, dir) => {\n            return this.world_model.remove_wall(x, y, dir);\n        };\n        this.set_succes_msg = (msg) => {\n            return this.world_model && this.world_model.success_msg(msg);\n        };\n        this.error = (msg) => {\n            let arr = [];\n            return (this.world_model &&\n                this.world_model.alert(arr.concat(msg).join(', '), 'danger'));\n        };\n        this.show_message = (msg, waitFor = 1, img = 'envelope') => {\n            return this.world_model.read_message(msg, waitFor);\n        };\n    }\n    render() {\n        //set methods\n        this.method_changed();\n        this.listenTo(this.model, 'change:current_call', this.method_changed);\n        if (!this.world_model) {\n            this.world_model = new world_model_1.WorldModel();\n        }\n        this.initOutput();\n    }\n    initOutput() {\n        if (jquery_1.default('#outputArea').length === 0) {\n            const $parent = this.model.get('floating') || false ? jquery_1.default('body') : jquery_1.default(this.el);\n            let $outputArea = jquery_1.default('<div/>', {\n                id: 'outputArea',\n                class: this.model.get('floating') ? 'floating' : 'non-floating',\n            });\n            $parent.append($outputArea);\n        }\n    }\n}\nexports.MazeView = MazeView;\n//# sourceMappingURL=widget.js.map","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root {\\n  --min-container-height: 300px;\\n}\\n.container {\\n  position: relative;\\n  min-width: 700px;\\n  border-left: 1px solid #aaa;\\n  border-top: 1px solid #aaa;\\n  z-index: 105;\\n  min-height: var(--min-container-height);\\n  font-family: 'Roboto', sans-serif;\\n}\\n\\n.floating {\\n  position: absolute;\\n  cursor: move;\\n}\\n\\n.zoom-5 {\\n  zoom: 0.5;\\n}\\n\\n.zoom-6 {\\n  zoom: 0.6;\\n}\\n\\n.zoom-7 {\\n  zoom: 0.7;\\n}\\n\\n.zoom-8 {\\n  zoom: 0.8;\\n}\\n\\n.zoom-9 {\\n  zoom: 0.9;\\n}\\n\\n/* .non-floating .ttgt-wrapper {\\n  position: relative !important;\\n}\\n\\n.non-floating #outputArea {\\n  position: relative !important;\\n  bottom: unset;\\n  right: unset;\\n} */\\n\\n.output-header {\\n  background-color: #aaa;\\n  height: 40px;\\n  display: flex;\\n  align-items: center;\\n  padding-right: 5px;\\n}\\n\\n.output-header-msg {\\n  display: flex;\\n  width: 80%;\\n  margin: 5px;\\n  padding-left: 20px;\\n}\\n\\n.btn-group:after {\\n  content: '';\\n  clear: both;\\n  display: table;\\n}\\n\\n.btn-group button {\\n  justify-self: flex-end;\\n  border: 1px solid #fff;\\n  height: 25px;\\n  width: 15px;\\n  font-size: 1.25em;\\n  font-weight: bold;\\n  background-color: #fff;\\n  color: #888;\\n  text-align: center;\\n  cursor: pointer;\\n}\\n\\n.btn-group button:not(:last-child) {\\n  border-right: none; /* Prevent double borders */\\n  margin-right: 5px;\\n}\\n\\n.btn-group button:hover {\\n  background-color: #f2f2f2;\\n}\\n\\n.output-actions {\\n  display: flex;\\n  flex: 1;\\n  justify-content: flex-end;\\n}\\n\\n.grid-slider {\\n  display: block;\\n  background-color: #fff;\\n}\\n\\n.hide {\\n  display: none;\\n}\\n\\n.show {\\n  display: inherit;\\n}\\n\\n.grid {\\n  display: flex;\\n  justify-content: space-between;\\n  border: 1px solid #aaa;\\n  height: 100%;\\n  min-height: var(--min-container-height);\\n}\\n\\n.stats {\\n  float: left;\\n  width: 200px;\\n  background-color: #f2f2f2;\\n  box-shadow: 5px 0 5px -5px #888;\\n  padding: 20px;\\n  padding-top: 40px;\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.konva-grid {\\n  margin: 10px 0px;\\n  padding-right: 20px;\\n}\\n\\n.stats-item {\\n  float: left;\\n  height: 75px;\\n}\\n\\n.stats-title {\\n  text-transform: uppercase;\\n  margin-bottom: 4px;\\n  font-size: 14px;\\n  color: #00000073;\\n}\\n\\n.stats-value {\\n  color: #828282;\\n  font-size: 24px;\\n}\\n\\n.konva-body {\\n  flex: 1;\\n}\\n\\n.alert {\\n  margin-top: 0.4rem;\\n  margin-left: 0.4rem;\\n\\n  position: relative;\\n  padding: 0.75rem 1.25rem;\\n  border: 1px solid transparent;\\n  border-radius: 0.25rem;\\n  width: 50%;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  min-height: 20px;\\n}\\n\\n.clr-success {\\n  color: #155724;\\n  background-color: #d4edda;\\n}\\n\\n.clr-info {\\n  color: #818182;\\n  border-color: #aaa;\\n  background-color: #d6d8db;\\n}\\n\\n.clr-danger {\\n  color: #721c24;\\n  background-color: #f8d7da;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./widget.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":[],"sourceRoot":""}