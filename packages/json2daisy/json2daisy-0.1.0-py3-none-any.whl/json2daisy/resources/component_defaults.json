{
	"Switch": {
		"map_init": "{name}.Init(driver.GetPin({pin}), driver.AudioCallbackRate(), {type}, {polarity}, {pull});",
		"typename": "daisy::Switch",
		"direction": "in",
		"pin": "a",
		"type": "daisy::Switch::TYPE_MOMENTARY",
		"polarity": "daisy::Switch::POLARITY_INVERTED",
		"pull": "daisy::Switch::PULL_UP",
		"process": "{name}.Debounce();",
		"updaterate": "{name}.SetUpdateRate(driver.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}_press",
				"get": "({name}.Pressed()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}",
				"get": "({name}.RisingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_fall",
				"get": "({name}.FallingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_seconds",
				"get": "({name}.TimeHeldMs()*0.001f)",
				"range": null,
				"bool": false
			}
		]
	},
	"Switch3": {
		"map_init": "{name}.Init(driver.GetPin({pin_a}), driver.GetPin({pin_b}));",
		"typename": "daisy::Switch3",
		"direction": "in",
		"pin": "a,b",
		"mapping": [
			{
				"name": "{name}",
				"get": "({name}.Read()*0.5f+0.5f)",
				"range": [
					0,
					2
				],
				"bool": false
			}
		]
	},
	"Encoder": {
		"map_init": "{name}.Init(driver.GetPin({pin_a}), driver.GetPin({pin_b}), driver.GetPin({pin_click}), driver.AudioCallbackRate());",
		"typename": "daisy::Encoder",
		"direction": "in",
		"pin": "a,b,click",
		"process": "{name}.Debounce();",
		"updaterate": "{name}.SetUpdateRate(driver.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({name}.Increment())",
				"range": [
					-1,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_press",
				"get": "({name}.Pressed()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_rise",
				"get": "({name}.RisingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_fall",
				"get": "({name}.FallingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_seconds",
				"get": "({name}.TimeHeldMs()*0.001f)",
				"range": null,
				"bool": false
			}
		]
	},
	"GateIn": {
		"map_init": "dsy_gpio_pin {name}_pin = driver.GetPin({pin});\n\t\t{name}.Init(&{name}_pin);",
		"typename": "daisy::GateIn",
		"direction": "in",
		"pin": "a",
		"mapping": [
			{
				"name": "{name}",
				"get": "({name}.State()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_trig",
				"get": "({name}.Trig()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			}
		]
	},
	"AnalogControl": {
		"init_single": "cfg[{i}].InitSingle(driver.GetPin({pin}));",
		"map_init": "{name}.Init(driver.adc.GetPtr({i}), driver.AudioCallbackRate(), {flip}, {invert});",
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"pin": "a",
		"flip": "false",
		"invert": "false",
		"slew": "1.0/driver.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(driver.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({name}.Value())",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	},
	"Led": {
		"map_init": "{name}.Init(driver.GetPin({pin}), {invert});\n\t\t{name}.Set(0.0f);",
		"typename": "daisy::Led",
		"direction": "out",
		"pin": "a",
		"invert": "true",
		"postprocess": "{name}.Update();",
		"mapping": [
			{
				"name": "{name}",
				"set": "{name}.Set({value});"
			}
		]
	},
	"RgbLed": {
		"map_init": "{name}.Init(driver.GetPin({pin_r}), driver.GetPin({pin_g}), driver.GetPin({pin_b}), {invert});\n\t\t{name}.Set(0.0f, 0.0f, 0.0f);",
		"typename": "daisy::RgbLed",
		"direction": "out",
		"pin": "r,g,b",
		"invert": "true",
		"postprocess": "{name}.Update();",
		"mapping": [
			{
				"name": "{name}_red",
				"set": "{name}.SetRed({value});"
			},
			{
				"name": "{name}_green",
				"set": "{name}.SetGreen({value});"
			},
			{
				"name": "{name}_blue",
				"set": "{name}.SetBlue({value});"
			},
			{
				"name": "{name}",
				"set": "{name}.Set(clamp(-{value}, 0.f, 1.f), 0.f, clamp({value}, 0.f, 1.f));"
			},
			{
				"name": "{name}_white",
				"set": "{name}.Set({value},{value},{value});"
			}
		]
	},
	"GateOut": {
		"map_init": "{name}.pin  = driver.GetPin({pin});\n\t\t{name}.mode = {mode};\n\t\t{name}.pull = {pull};\n\t\tdsy_gpio_init(&{name});",
		"typename": "dsy_gpio",
		"direction": "out",
		"pin": "a",
		"mode": "DSY_GPIO_MODE_OUTPUT_PP",
		"pull": "DSY_GPIO_NOPULL",
		"mapping": [
			{
				"name": "{name}",
				"set": "dsy_gpio_write(&{name}, {value});"
			}
		]
	},
	"CVOuts": {
		"map_init": "{name}.bitdepth = {bitdepth};\n\t\t{name}.buff_state = {buff_state};\n\t\t{name}.mode = {mode};\n\t\t{name}.chn = {channel};\n\t\tdriver.dac.Init({name});\n\t\tdriver.dac.WriteValue({channel}, 0);",
		"typename": "daisy::DacHandle::Config",
		"direction": "out",
		"pin": "",
		"bitdepth": "daisy::DacHandle::BitDepth::BITS_12",
		"buff_state": "daisy::DacHandle::BufferState::ENABLED",
		"mode": "daisy::DacHandle::Mode::POLLING",
		"channel": "daisy::DacHandle::Channel::BOTH",
		"mapping": [
			{
				"name": "{name}1",
				"set": "driver.dac.WriteValue(daisy::DacHandle::Channel::ONE, {value} * 4095);",
				"where": "main"
			},
			{
				"name": "{name}2",
				"set": "driver.dac.WriteValue(daisy::DacHandle::Channel::TWO, {value} * 4095);",
				"where": "main"
			}
		]
	},
	"i2c": {
		"map_init": "{name}.Init({{{peripheral}, {{driver.GetPin({pin_scl}), driver.GetPin({pin_sda})}}, {speed}}});",
		"typename": "I2CHandle",
		"pin": "scl,sda",
		"peripheral": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_1MHZ",
		"mapping": []
	},
	"PCA9685": {
		"map_init": "{name}.Init({parent}, {address}, {name}_dma_buffer_a, {name}_dma_buffer_b);",
		"typename": "LedDriverPca9685<{driver_count}, true>",
		"non_class_decl": "LedDriverPca9685<{driver_count}, true>::DmaBuffer DMA_BUFFER_MEM_SECTION {name}_dma_buffer_a, {name}_dma_buffer_b;",
		"driver_count": 1,
		"address": "{0x00}",
		"parent": "",
		"pin": "",
		"postprocess": "{name}.SwapBuffersAndTransmit();",
		"mapping": []
	},
	"PCA9685Led": {
		"map_init": "",
		"pin": "",
		"typename": "",
		"parent": "",
		"direction": "out",
		"index": 0,
		"mapping": [
			{
				"name": "{name}",
				"set": "{parent}.SetLed({index}, {value});"
			}
		]
	},
	"PCA9685RgbLed": {
		"map_init": "",
		"typename": "",
		"direction": "out",
		"parent": "",
		"pin": "",
		"index": {
			"red": 0,
			"green": 1,
			"blue": 2
		},
		"mapping": [
			{
				"name": "{name}_red",
				"set": "{parent}.SetLed({index_red}, {value});"
			},
			{
				"name": "{name}_green",
				"set": "{parent}.SetLed({index_green}, {value});"
			},
			{
				"name": "{name}_blue",
				"set": "{parent}.SetLed({index_blue}, {value});"
			},
			{
				"name": "{name}",
				"set": "{parent}.SetLed({index_red}, {value});\n\t\t{parent}.SetLed({index_green}, {value});\n\t\t{parent}.SetLed({index_blue}, {value});"
			},
			{
				"name": "{name}_white",
				"set": "{parent}.SetLed({index_red}, {value});\n\t\t{parent}.SetLed({index_green}, {value});\n\t\t{parent}.SetLed({index_blue}, {value});"
			}
		]
	},
	"CD4021": {
		"map_init": "{name}.Init({{ driver.GetPin({pin_clk}), driver.GetPin({pin_cs}), {{ driver.GetPin({pin_data}) }} }});",
		"typename": "ShiftRegister4021<{driver_count}>",
		"non_class_decl": "uint8_t {name}_debounced[8*{driver_count}];",
		"driver_count": 1,
		"pin": "clk,cs,data",
		"postprocess": "{name}.Update();",
		"mapping": []
	},
	"CD4021Switch": {
		"map_init": "",
		"typename": "",
		"direction": "in",
		"parent": "",
		"index": 0,
		"postprocess": "{parent}_debounced[{index}] = {parent}.State({index}) | ({parent}_debounced[{index}] << 1);",
		"mapping": [
			{
				"name": "{name}",
				"get": "({parent}_debounced[{index}] == 1)",
				"bool": true
			},
			{
				"name": "{name}_press",
				"get": "({parent}_debounced[{index}] != 0)",
				"bool": false
			},
			{
				"name": "{name}_fall",
				"get": "({parent}_debounced[{index}] == 0b10000000)",
				"bool": true
			}
		]
	},
	"CD4051": {
		"init_single": "size_t {name}_index = {i};\n\t\tcfg[{name}_index].InitMux(driver.GetPin({pin_adc}), {mux_count}, driver.GetPin({pin_sel0}), driver.GetPin({pin_sel1}), driver.GetPin({pin_sel2}));",
		"typename": "",
		"mux_count": 1,
		"pin": "adc,sel0,sel1,sel2",
		"mapping": []
	},
	"CD4051AnalogControl": {
		"map_init": "{name}.Init(driver.adc.GetMuxPtr({parent}_index, {index}), driver.AudioCallbackRate(), {flip}, {invert});",
		"parent": "",
		"index": 0,
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"flip": "false",
		"invert": "false",
		"slew": "1.0/driver.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(driver.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({name}.Value())",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	},
	"AnalogControlBipolar": {
		"init_single": "cfg[{i}].InitSingle(driver.GetPin({pin}));",
		"map_init": "{name}.InitBipolarCv(driver.adc.GetPtr({i}), driver.AudioCallbackRate());",
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"pin": "a",
		"slew": "1.0/driver.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(driver.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({name}.Value())",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	}
}