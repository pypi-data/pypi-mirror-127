# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mag_manip
else:
    import _mag_manip

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mag_manip.delete_SwigPyIterator

    def value(self):
        return _mag_manip.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mag_manip.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mag_manip.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mag_manip.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mag_manip.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mag_manip.SwigPyIterator_copy(self)

    def next(self):
        return _mag_manip.SwigPyIterator_next(self)

    def __next__(self):
        return _mag_manip.SwigPyIterator___next__(self)

    def previous(self):
        return _mag_manip.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mag_manip.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mag_manip.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mag_manip.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mag_manip.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mag_manip.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mag_manip.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mag_manip.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mag_manip:
_mag_manip.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _mag_manip.SHARED_PTR_DISOWN
class vectorMatrixXd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorMatrixXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorMatrixXd___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorMatrixXd___bool__(self)

    def __len__(self):
        return _mag_manip.vectorMatrixXd___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorMatrixXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorMatrixXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorMatrixXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorMatrixXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorMatrixXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorMatrixXd___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorMatrixXd_pop(self)

    def append(self, x):
        return _mag_manip.vectorMatrixXd_append(self, x)

    def empty(self):
        return _mag_manip.vectorMatrixXd_empty(self)

    def size(self):
        return _mag_manip.vectorMatrixXd_size(self)

    def swap(self, v):
        return _mag_manip.vectorMatrixXd_swap(self, v)

    def begin(self):
        return _mag_manip.vectorMatrixXd_begin(self)

    def end(self):
        return _mag_manip.vectorMatrixXd_end(self)

    def rbegin(self):
        return _mag_manip.vectorMatrixXd_rbegin(self)

    def rend(self):
        return _mag_manip.vectorMatrixXd_rend(self)

    def clear(self):
        return _mag_manip.vectorMatrixXd_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorMatrixXd_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorMatrixXd_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorMatrixXd_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorMatrixXd_swiginit(self, _mag_manip.new_vectorMatrixXd(*args))

    def push_back(self, x):
        return _mag_manip.vectorMatrixXd_push_back(self, x)

    def front(self):
        return _mag_manip.vectorMatrixXd_front(self)

    def back(self):
        return _mag_manip.vectorMatrixXd_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorMatrixXd_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorMatrixXd_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorMatrixXd_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorMatrixXd_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorMatrixXd_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorMatrixXd

# Register vectorMatrixXd in _mag_manip:
_mag_manip.vectorMatrixXd_swigregister(vectorMatrixXd)

class vectorVectorXd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorVectorXd___bool__(self)

    def __len__(self):
        return _mag_manip.vectorVectorXd___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorVectorXd___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorVectorXd_pop(self)

    def append(self, x):
        return _mag_manip.vectorVectorXd_append(self, x)

    def empty(self):
        return _mag_manip.vectorVectorXd_empty(self)

    def size(self):
        return _mag_manip.vectorVectorXd_size(self)

    def swap(self, v):
        return _mag_manip.vectorVectorXd_swap(self, v)

    def begin(self):
        return _mag_manip.vectorVectorXd_begin(self)

    def end(self):
        return _mag_manip.vectorVectorXd_end(self)

    def rbegin(self):
        return _mag_manip.vectorVectorXd_rbegin(self)

    def rend(self):
        return _mag_manip.vectorVectorXd_rend(self)

    def clear(self):
        return _mag_manip.vectorVectorXd_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorVectorXd_swiginit(self, _mag_manip.new_vectorVectorXd(*args))

    def push_back(self, x):
        return _mag_manip.vectorVectorXd_push_back(self, x)

    def front(self):
        return _mag_manip.vectorVectorXd_front(self)

    def back(self):
        return _mag_manip.vectorVectorXd_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorVectorXd_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorVectorXd_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorVectorXd

# Register vectorVectorXd in _mag_manip:
_mag_manip.vectorVectorXd_swigregister(vectorVectorXd)

class vectorSaturationSharedPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorSaturationSharedPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorSaturationSharedPtr___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorSaturationSharedPtr___bool__(self)

    def __len__(self):
        return _mag_manip.vectorSaturationSharedPtr___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorSaturationSharedPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorSaturationSharedPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorSaturationSharedPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorSaturationSharedPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorSaturationSharedPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorSaturationSharedPtr___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorSaturationSharedPtr_pop(self)

    def append(self, x):
        return _mag_manip.vectorSaturationSharedPtr_append(self, x)

    def empty(self):
        return _mag_manip.vectorSaturationSharedPtr_empty(self)

    def size(self):
        return _mag_manip.vectorSaturationSharedPtr_size(self)

    def swap(self, v):
        return _mag_manip.vectorSaturationSharedPtr_swap(self, v)

    def begin(self):
        return _mag_manip.vectorSaturationSharedPtr_begin(self)

    def end(self):
        return _mag_manip.vectorSaturationSharedPtr_end(self)

    def rbegin(self):
        return _mag_manip.vectorSaturationSharedPtr_rbegin(self)

    def rend(self):
        return _mag_manip.vectorSaturationSharedPtr_rend(self)

    def clear(self):
        return _mag_manip.vectorSaturationSharedPtr_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorSaturationSharedPtr_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorSaturationSharedPtr_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorSaturationSharedPtr_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorSaturationSharedPtr_swiginit(self, _mag_manip.new_vectorSaturationSharedPtr(*args))

    def push_back(self, x):
        return _mag_manip.vectorSaturationSharedPtr_push_back(self, x)

    def front(self):
        return _mag_manip.vectorSaturationSharedPtr_front(self)

    def back(self):
        return _mag_manip.vectorSaturationSharedPtr_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorSaturationSharedPtr_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorSaturationSharedPtr_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorSaturationSharedPtr_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorSaturationSharedPtr_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorSaturationSharedPtr_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorSaturationSharedPtr

# Register vectorSaturationSharedPtr in _mag_manip:
_mag_manip.vectorSaturationSharedPtr_swigregister(vectorSaturationSharedPtr)

class vectorSaturationTanhSharedPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorSaturationTanhSharedPtr___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorSaturationTanhSharedPtr___bool__(self)

    def __len__(self):
        return _mag_manip.vectorSaturationTanhSharedPtr___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorSaturationTanhSharedPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorSaturationTanhSharedPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_pop(self)

    def append(self, x):
        return _mag_manip.vectorSaturationTanhSharedPtr_append(self, x)

    def empty(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_empty(self)

    def size(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_size(self)

    def swap(self, v):
        return _mag_manip.vectorSaturationTanhSharedPtr_swap(self, v)

    def begin(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_begin(self)

    def end(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_end(self)

    def rbegin(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_rbegin(self)

    def rend(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_rend(self)

    def clear(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorSaturationTanhSharedPtr_swiginit(self, _mag_manip.new_vectorSaturationTanhSharedPtr(*args))

    def push_back(self, x):
        return _mag_manip.vectorSaturationTanhSharedPtr_push_back(self, x)

    def front(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_front(self)

    def back(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorSaturationTanhSharedPtr_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorSaturationTanhSharedPtr_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorSaturationTanhSharedPtr_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorSaturationTanhSharedPtr_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorSaturationTanhSharedPtr

# Register vectorSaturationTanhSharedPtr in _mag_manip:
_mag_manip.vectorSaturationTanhSharedPtr_swigregister(vectorSaturationTanhSharedPtr)

class vectorSaturationErfSharedPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorSaturationErfSharedPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorSaturationErfSharedPtr___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorSaturationErfSharedPtr___bool__(self)

    def __len__(self):
        return _mag_manip.vectorSaturationErfSharedPtr___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorSaturationErfSharedPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorSaturationErfSharedPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorSaturationErfSharedPtr_pop(self)

    def append(self, x):
        return _mag_manip.vectorSaturationErfSharedPtr_append(self, x)

    def empty(self):
        return _mag_manip.vectorSaturationErfSharedPtr_empty(self)

    def size(self):
        return _mag_manip.vectorSaturationErfSharedPtr_size(self)

    def swap(self, v):
        return _mag_manip.vectorSaturationErfSharedPtr_swap(self, v)

    def begin(self):
        return _mag_manip.vectorSaturationErfSharedPtr_begin(self)

    def end(self):
        return _mag_manip.vectorSaturationErfSharedPtr_end(self)

    def rbegin(self):
        return _mag_manip.vectorSaturationErfSharedPtr_rbegin(self)

    def rend(self):
        return _mag_manip.vectorSaturationErfSharedPtr_rend(self)

    def clear(self):
        return _mag_manip.vectorSaturationErfSharedPtr_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorSaturationErfSharedPtr_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorSaturationErfSharedPtr_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorSaturationErfSharedPtr_swiginit(self, _mag_manip.new_vectorSaturationErfSharedPtr(*args))

    def push_back(self, x):
        return _mag_manip.vectorSaturationErfSharedPtr_push_back(self, x)

    def front(self):
        return _mag_manip.vectorSaturationErfSharedPtr_front(self)

    def back(self):
        return _mag_manip.vectorSaturationErfSharedPtr_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorSaturationErfSharedPtr_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorSaturationErfSharedPtr_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorSaturationErfSharedPtr_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorSaturationErfSharedPtr_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorSaturationErfSharedPtr

# Register vectorSaturationErfSharedPtr in _mag_manip:
_mag_manip.vectorSaturationErfSharedPtr_swigregister(vectorSaturationErfSharedPtr)

class vectorSaturationRationalSharedPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorSaturationRationalSharedPtr___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorSaturationRationalSharedPtr___bool__(self)

    def __len__(self):
        return _mag_manip.vectorSaturationRationalSharedPtr___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorSaturationRationalSharedPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorSaturationRationalSharedPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_pop(self)

    def append(self, x):
        return _mag_manip.vectorSaturationRationalSharedPtr_append(self, x)

    def empty(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_empty(self)

    def size(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_size(self)

    def swap(self, v):
        return _mag_manip.vectorSaturationRationalSharedPtr_swap(self, v)

    def begin(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_begin(self)

    def end(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_end(self)

    def rbegin(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_rbegin(self)

    def rend(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_rend(self)

    def clear(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorSaturationRationalSharedPtr_swiginit(self, _mag_manip.new_vectorSaturationRationalSharedPtr(*args))

    def push_back(self, x):
        return _mag_manip.vectorSaturationRationalSharedPtr_push_back(self, x)

    def front(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_front(self)

    def back(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorSaturationRationalSharedPtr_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorSaturationRationalSharedPtr_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorSaturationRationalSharedPtr_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorSaturationRationalSharedPtr_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorSaturationRationalSharedPtr

# Register vectorSaturationRationalSharedPtr in _mag_manip:
_mag_manip.vectorSaturationRationalSharedPtr_swigregister(vectorSaturationRationalSharedPtr)

class vectorSaturationAtanSharedPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mag_manip.vectorSaturationAtanSharedPtr___nonzero__(self)

    def __bool__(self):
        return _mag_manip.vectorSaturationAtanSharedPtr___bool__(self)

    def __len__(self):
        return _mag_manip.vectorSaturationAtanSharedPtr___len__(self)

    def __getslice__(self, i, j):
        return _mag_manip.vectorSaturationAtanSharedPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mag_manip.vectorSaturationAtanSharedPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr___setitem__(self, *args)

    def pop(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_pop(self)

    def append(self, x):
        return _mag_manip.vectorSaturationAtanSharedPtr_append(self, x)

    def empty(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_empty(self)

    def size(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_size(self)

    def swap(self, v):
        return _mag_manip.vectorSaturationAtanSharedPtr_swap(self, v)

    def begin(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_begin(self)

    def end(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_end(self)

    def rbegin(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_rbegin(self)

    def rend(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_rend(self)

    def clear(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_clear(self)

    def get_allocator(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_get_allocator(self)

    def pop_back(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_pop_back(self)

    def erase(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr_erase(self, *args)

    def __init__(self, *args):
        _mag_manip.vectorSaturationAtanSharedPtr_swiginit(self, _mag_manip.new_vectorSaturationAtanSharedPtr(*args))

    def push_back(self, x):
        return _mag_manip.vectorSaturationAtanSharedPtr_push_back(self, x)

    def front(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_front(self)

    def back(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_back(self)

    def assign(self, n, x):
        return _mag_manip.vectorSaturationAtanSharedPtr_assign(self, n, x)

    def resize(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr_resize(self, *args)

    def insert(self, *args):
        return _mag_manip.vectorSaturationAtanSharedPtr_insert(self, *args)

    def reserve(self, n):
        return _mag_manip.vectorSaturationAtanSharedPtr_reserve(self, n)

    def capacity(self):
        return _mag_manip.vectorSaturationAtanSharedPtr_capacity(self)
    __swig_destroy__ = _mag_manip.delete_vectorSaturationAtanSharedPtr

# Register vectorSaturationAtanSharedPtr in _mag_manip:
_mag_manip.vectorSaturationAtanSharedPtr_swigregister(vectorSaturationAtanSharedPtr)

class RBF3DFieldInterpolator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getField(self, position):
        return _mag_manip.RBF3DFieldInterpolator_getField(self, position)

    def getGradient(self, position):
        return _mag_manip.RBF3DFieldInterpolator_getGradient(self, position)

    @staticmethod
    def create(kernel, nodes, values, shape_param):
        return _mag_manip.RBF3DFieldInterpolator_create(kernel, nodes, values, shape_param)
    __swig_destroy__ = _mag_manip.delete_RBF3DFieldInterpolator

# Register RBF3DFieldInterpolator in _mag_manip:
_mag_manip.RBF3DFieldInterpolator_swigregister(RBF3DFieldInterpolator)

def RBF3DFieldInterpolator_create(kernel, nodes, values, shape_param):
    return _mag_manip.RBF3DFieldInterpolator_create(kernel, nodes, values, shape_param)

class SaturationFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mag_manip.delete_SaturationFunction

    def evaluate(self, x):
        return _mag_manip.SaturationFunction_evaluate(self, x)

    def jacobian(self, x):
        return _mag_manip.SaturationFunction_jacobian(self, x)

    def inverse(self, y):
        return _mag_manip.SaturationFunction_inverse(self, y)

    def max(self):
        return _mag_manip.SaturationFunction_max(self)

# Register SaturationFunction in _mag_manip:
_mag_manip.SaturationFunction_swigregister(SaturationFunction)

class SaturationFunctionFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create(type, params):
        return _mag_manip.SaturationFunctionFactory_create(type, params)

    def __init__(self):
        _mag_manip.SaturationFunctionFactory_swiginit(self, _mag_manip.new_SaturationFunctionFactory())
    __swig_destroy__ = _mag_manip.delete_SaturationFunctionFactory

# Register SaturationFunctionFactory in _mag_manip:
_mag_manip.SaturationFunctionFactory_swigregister(SaturationFunctionFactory)

def SaturationFunctionFactory_create(type, params):
    return _mag_manip.SaturationFunctionFactory_create(type, params)

class SaturationTanh(SaturationFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, params):
        _mag_manip.SaturationTanh_swiginit(self, _mag_manip.new_SaturationTanh(params))

    def evaluate(self, x):
        return _mag_manip.SaturationTanh_evaluate(self, x)

    def jacobian(self, x):
        return _mag_manip.SaturationTanh_jacobian(self, x)

    def inverse(self, y):
        return _mag_manip.SaturationTanh_inverse(self, y)

    def max(self):
        return _mag_manip.SaturationTanh_max(self)
    __swig_destroy__ = _mag_manip.delete_SaturationTanh

# Register SaturationTanh in _mag_manip:
_mag_manip.SaturationTanh_swigregister(SaturationTanh)

class SaturationAtan(SaturationFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, params):
        _mag_manip.SaturationAtan_swiginit(self, _mag_manip.new_SaturationAtan(params))

    def evaluate(self, x):
        return _mag_manip.SaturationAtan_evaluate(self, x)

    def jacobian(self, x):
        return _mag_manip.SaturationAtan_jacobian(self, x)

    def inverse(self, y):
        return _mag_manip.SaturationAtan_inverse(self, y)

    def max(self):
        return _mag_manip.SaturationAtan_max(self)
    __swig_destroy__ = _mag_manip.delete_SaturationAtan

# Register SaturationAtan in _mag_manip:
_mag_manip.SaturationAtan_swigregister(SaturationAtan)

class SaturationRational(SaturationFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, params):
        _mag_manip.SaturationRational_swiginit(self, _mag_manip.new_SaturationRational(params))

    def evaluate(self, x):
        return _mag_manip.SaturationRational_evaluate(self, x)

    def jacobian(self, x):
        return _mag_manip.SaturationRational_jacobian(self, x)

    def inverse(self, y):
        return _mag_manip.SaturationRational_inverse(self, y)

    def max(self):
        return _mag_manip.SaturationRational_max(self)
    __swig_destroy__ = _mag_manip.delete_SaturationRational

# Register SaturationRational in _mag_manip:
_mag_manip.SaturationRational_swigregister(SaturationRational)

class SaturationErf(SaturationFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, params):
        _mag_manip.SaturationErf_swiginit(self, _mag_manip.new_SaturationErf(params))

    def evaluate(self, x):
        return _mag_manip.SaturationErf_evaluate(self, x)

    def jacobian(self, x):
        return _mag_manip.SaturationErf_jacobian(self, x)

    def inverse(self, y):
        return _mag_manip.SaturationErf_inverse(self, y)

    def max(self):
        return _mag_manip.SaturationErf_max(self)
    __swig_destroy__ = _mag_manip.delete_SaturationErf

# Register SaturationErf in _mag_manip:
_mag_manip.SaturationErf_swigregister(SaturationErf)

class BackwardModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mag_manip.delete_BackwardModel

    def setCalibrationFile(self, filename):
        return _mag_manip.BackwardModel_setCalibrationFile(self, filename)

    def isValid(self):
        return _mag_manip.BackwardModel_isValid(self)

    def getNumCoils(self):
        return _mag_manip.BackwardModel_getNumCoils(self)

    def computeCurrentsFromField(self, position, field):
        return _mag_manip.BackwardModel_computeCurrentsFromField(self, position, field)

    def computeCurrentsFromFields(self, positions, fields):
        return _mag_manip.BackwardModel_computeCurrentsFromFields(self, positions, fields)

    def computeCurrentsFromFieldGradient5(self, position, field, gradient):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldGradient5(self, position, field, gradient)

    def computeCurrentsFromFieldGradient5s(self, positions, fields, gradients):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldGradient5s(self, positions, fields, gradients)

    def computeCurrentsFromFieldDipoleGradient3(self, position, field, dipole, gradient):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldDipoleGradient3(self, position, field, dipole, gradient)

    def computeCurrentsFromFieldDipoleGradient3s(self, positions, fields, dipoles, gradients):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldDipoleGradient3s(self, positions, fields, dipoles, gradients)

    def setCachedPosition(self, position):
        return _mag_manip.BackwardModel_setCachedPosition(self, position)

    def setCachedPositionDipole(self, position, dipole):
        return _mag_manip.BackwardModel_setCachedPositionDipole(self, position, dipole)

    def getCachedDipole(self):
        return _mag_manip.BackwardModel_getCachedDipole(self)

    def getCachedPosition(self):
        return _mag_manip.BackwardModel_getCachedPosition(self)

    def computeCurrentsFromFieldCached(self, field):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldCached(self, field)

    def computeCurrentsFromFieldGradient5Cached(self, field, gradient):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldGradient5Cached(self, field, gradient)

    def computeCurrentsFromFieldDipoleGradient3Cached(self, field, gradient):
        return _mag_manip.BackwardModel_computeCurrentsFromFieldDipoleGradient3Cached(self, field, gradient)

# Register BackwardModel in _mag_manip:
_mag_manip.BackwardModel_swigregister(BackwardModel)

class BackwardModelLinearL2(BackwardModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearL2_getActuationMatrix(self, position)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearL2_getFieldActuationMatrix(self, position)

    def getActuationMatrixInverse(self, position):
        return _mag_manip.BackwardModelLinearL2_getActuationMatrixInverse(self, position)

    def getFieldActuationMatrixInverse(self, position):
        return _mag_manip.BackwardModelLinearL2_getFieldActuationMatrixInverse(self, position)

    def computeCurrentsFromField(self, position, field):
        return _mag_manip.BackwardModelLinearL2_computeCurrentsFromField(self, position, field)

    def computeCurrentsFromFieldGradient5(self, position, field, gradient):
        return _mag_manip.BackwardModelLinearL2_computeCurrentsFromFieldGradient5(self, position, field, gradient)

    def computeCurrentsFromFieldDipoleGradient3(self, position, field, dipole, gradient):
        return _mag_manip.BackwardModelLinearL2_computeCurrentsFromFieldDipoleGradient3(self, position, field, dipole, gradient)

    def setCachedPosition(self, position):
        return _mag_manip.BackwardModelLinearL2_setCachedPosition(self, position)

    def setCachedPositionDipole(self, position, dipole):
        return _mag_manip.BackwardModelLinearL2_setCachedPositionDipole(self, position, dipole)

    def getCachedPosition(self):
        return _mag_manip.BackwardModelLinearL2_getCachedPosition(self)

    def getCachedDipole(self):
        return _mag_manip.BackwardModelLinearL2_getCachedDipole(self)

    def computeCurrentsFromFieldCached(self, field):
        return _mag_manip.BackwardModelLinearL2_computeCurrentsFromFieldCached(self, field)

    def computeCurrentsFromFieldGradient5Cached(self, field, gradient):
        return _mag_manip.BackwardModelLinearL2_computeCurrentsFromFieldGradient5Cached(self, field, gradient)

    def computeCurrentsFromFieldDipoleGradient3Cached(self, field, gradient):
        return _mag_manip.BackwardModelLinearL2_computeCurrentsFromFieldDipoleGradient3Cached(self, field, gradient)
    __swig_destroy__ = _mag_manip.delete_BackwardModelLinearL2

# Register BackwardModelLinearL2 in _mag_manip:
_mag_manip.BackwardModelLinearL2_swigregister(BackwardModelLinearL2)

class ForwardModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mag_manip.delete_ForwardModel

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModel_setCalibrationFile(self, filename)

    def isValid(self):
        return _mag_manip.ForwardModel_isValid(self)

    def getNumCoils(self):
        return _mag_manip.ForwardModel_getNumCoils(self)

    def computeFieldFromCurrents(self, position, currents):
        return _mag_manip.ForwardModel_computeFieldFromCurrents(self, position, currents)

    def computeFieldsFromCurrents(self, positions, currents):
        return _mag_manip.ForwardModel_computeFieldsFromCurrents(self, positions, currents)

    def computeGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModel_computeGradient5FromCurrents(self, position, currents)

    def computeGradient5sFromCurrents(self, positions, currents):
        return _mag_manip.ForwardModel_computeGradient5sFromCurrents(self, positions, currents)

    def computeFieldGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModel_computeFieldGradient5FromCurrents(self, position, currents)

    def computeFieldGradient5sFromCurrents(self, positions, currents):
        return _mag_manip.ForwardModel_computeFieldGradient5sFromCurrents(self, positions, currents)

    def setCachedPosition(self, position):
        return _mag_manip.ForwardModel_setCachedPosition(self, position)

    def getCachedPosition(self):
        return _mag_manip.ForwardModel_getCachedPosition(self)

    def computeFieldFromCurrentsCached(self, currents):
        return _mag_manip.ForwardModel_computeFieldFromCurrentsCached(self, currents)

    def computeGradient5FromCurrentsCached(self, currents):
        return _mag_manip.ForwardModel_computeGradient5FromCurrentsCached(self, currents)

    def computeFieldGradient5FromCurrentsCached(self, currents):
        return _mag_manip.ForwardModel_computeFieldGradient5FromCurrentsCached(self, currents)

# Register ForwardModel in _mag_manip:
_mag_manip.ForwardModel_swigregister(ForwardModel)

class ForwardModelLinear(ForwardModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mag_manip.delete_ForwardModelLinear

    def getActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinear_getActuationMatrix(self, position)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinear_getFieldActuationMatrix(self, position)

    def computeFieldFromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinear_computeFieldFromCurrents(self, position, currents)

    def computeGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinear_computeGradient5FromCurrents(self, position, currents)

    def computeFieldGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinear_computeFieldGradient5FromCurrents(self, position, currents)

    def setCachedPosition(self, position):
        return _mag_manip.ForwardModelLinear_setCachedPosition(self, position)

    def getCachedPosition(self):
        return _mag_manip.ForwardModelLinear_getCachedPosition(self)

    def computeFieldFromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelLinear_computeFieldFromCurrentsCached(self, currents)

    def computeGradient5FromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelLinear_computeGradient5FromCurrentsCached(self, currents)

    def computeFieldGradient5FromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelLinear_computeFieldGradient5FromCurrentsCached(self, currents)

# Register ForwardModelLinear in _mag_manip:
_mag_manip.ForwardModelLinear_swigregister(ForwardModelLinear)

class BackwardModelFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def create(self, type, filename):
        return _mag_manip.BackwardModelFactory_create(self, type, filename)

    def __init__(self):
        _mag_manip.BackwardModelFactory_swiginit(self, _mag_manip.new_BackwardModelFactory())
    __swig_destroy__ = _mag_manip.delete_BackwardModelFactory

# Register BackwardModelFactory in _mag_manip:
_mag_manip.BackwardModelFactory_swigregister(BackwardModelFactory)

class ForwardModelFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def create(self, type, filename):
        return _mag_manip.ForwardModelFactory_create(self, type, filename)

    def __init__(self):
        _mag_manip.ForwardModelFactory_swiginit(self, _mag_manip.new_ForwardModelFactory())
    __swig_destroy__ = _mag_manip.delete_ForwardModelFactory

# Register ForwardModelFactory in _mag_manip:
_mag_manip.ForwardModelFactory_swigregister(ForwardModelFactory)

class ForwardModelSaturation(ForwardModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _mag_manip.delete_ForwardModelSaturation

    def isValid(self):
        return _mag_manip.ForwardModelSaturation_isValid(self)

    def getNumCoils(self):
        return _mag_manip.ForwardModelSaturation_getNumCoils(self)

    def getName(self):
        return _mag_manip.ForwardModelSaturation_getName(self)

    def setName(self, name):
        return _mag_manip.ForwardModelSaturation_setName(self, name)

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModelSaturation_setCalibrationFile(self, filename)

    def setModelCalibrationFile(self, filename):
        return _mag_manip.ForwardModelSaturation_setModelCalibrationFile(self, filename)

    def getModel(self):
        return _mag_manip.ForwardModelSaturation_getModel(self)

    def setModel(self, p_lin_model):
        return _mag_manip.ForwardModelSaturation_setModel(self, p_lin_model)

    def getSaturationFunction(self, i):
        return _mag_manip.ForwardModelSaturation_getSaturationFunction(self, i)

    def getSaturationFunctions(self):
        return _mag_manip.ForwardModelSaturation_getSaturationFunctions(self)

    def setSaturationFunctionsFile(self, filename):
        return _mag_manip.ForwardModelSaturation_setSaturationFunctionsFile(self, filename)

    def setSaturationFunctions(self, sat_functions):
        return _mag_manip.ForwardModelSaturation_setSaturationFunctions(self, sat_functions)

    def computeFieldFromCurrents(self, position, currents):
        return _mag_manip.ForwardModelSaturation_computeFieldFromCurrents(self, position, currents)

    def computeGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelSaturation_computeGradient5FromCurrents(self, position, currents)

    def computeFieldGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelSaturation_computeFieldGradient5FromCurrents(self, position, currents)

    def setCachedPosition(self, position):
        return _mag_manip.ForwardModelSaturation_setCachedPosition(self, position)

    def getCachedPosition(self):
        return _mag_manip.ForwardModelSaturation_getCachedPosition(self)

    def computeFieldFromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelSaturation_computeFieldFromCurrentsCached(self, currents)

    def computeGradient5FromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelSaturation_computeGradient5FromCurrentsCached(self, currents)

    def computeFieldGradient5FromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelSaturation_computeFieldGradient5FromCurrentsCached(self, currents)

    def __init__(self):
        _mag_manip.ForwardModelSaturation_swiginit(self, _mag_manip.new_ForwardModelSaturation())

# Register ForwardModelSaturation in _mag_manip:
_mag_manip.ForwardModelSaturation_swigregister(ForwardModelSaturation)

class VFieldGridProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, min_x, max_x, min_y, max_y, min_z, max_z, dim_x, dim_y, dim_z):
        _mag_manip.VFieldGridProperties_swiginit(self, _mag_manip.new_VFieldGridProperties(min_x, max_x, min_y, max_y, min_z, max_z, dim_x, dim_y, dim_z))
    min_x = property(_mag_manip.VFieldGridProperties_min_x_get)
    min_y = property(_mag_manip.VFieldGridProperties_min_y_get)
    min_z = property(_mag_manip.VFieldGridProperties_min_z_get)
    max_x = property(_mag_manip.VFieldGridProperties_max_x_get)
    max_y = property(_mag_manip.VFieldGridProperties_max_y_get)
    max_z = property(_mag_manip.VFieldGridProperties_max_z_get)
    dim_x = property(_mag_manip.VFieldGridProperties_dim_x_get)
    dim_y = property(_mag_manip.VFieldGridProperties_dim_y_get)
    dim_z = property(_mag_manip.VFieldGridProperties_dim_z_get)
    step_x = property(_mag_manip.VFieldGridProperties_step_x_get)
    step_y = property(_mag_manip.VFieldGridProperties_step_y_get)
    step_z = property(_mag_manip.VFieldGridProperties_step_z_get)
    __swig_destroy__ = _mag_manip.delete_VFieldGridProperties

# Register VFieldGridProperties in _mag_manip:
_mag_manip.VFieldGridProperties_swigregister(VFieldGridProperties)

class InterpolateRegular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Type_TRILINEAR = _mag_manip.InterpolateRegular_Type_TRILINEAR
    Type_TRICUBIC = _mag_manip.InterpolateRegular_Type_TRICUBIC
    Type_TRICUBIC_SCALAR_FIELD = _mag_manip.InterpolateRegular_Type_TRICUBIC_SCALAR_FIELD
    __swig_destroy__ = _mag_manip.delete_InterpolateRegular

    def getVFieldGridProperties(self):
        return _mag_manip.InterpolateRegular_getVFieldGridProperties(self)

    def interpolate(self, p):
        return _mag_manip.InterpolateRegular_interpolate(self, p)

    def getGradient(self, p):
        return _mag_manip.InterpolateRegular_getGradient(self, p)

# Register InterpolateRegular in _mag_manip:
_mag_manip.InterpolateRegular_swigregister(InterpolateRegular)

class ForwardModelLinearSaturation(ForwardModelSaturation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModelLinearSaturation_setCalibrationFile(self, filename)

    def setLinearModel(self, p_lin_model):
        return _mag_manip.ForwardModelLinearSaturation_setLinearModel(self, p_lin_model)

    def getLinearModel(self):
        return _mag_manip.ForwardModelLinearSaturation_getLinearModel(self)

    def setModel(self, p_model):
        return _mag_manip.ForwardModelLinearSaturation_setModel(self, p_model)

    def setCachedPosition(self, position):
        return _mag_manip.ForwardModelLinearSaturation_setCachedPosition(self, position)

    def computeFieldFromCurrentsCached(self, currents):
        return _mag_manip.ForwardModelLinearSaturation_computeFieldFromCurrentsCached(self, currents)

    def __init__(self):
        _mag_manip.ForwardModelLinearSaturation_swiginit(self, _mag_manip.new_ForwardModelLinearSaturation())
    __swig_destroy__ = _mag_manip.delete_ForwardModelLinearSaturation

# Register ForwardModelLinearSaturation in _mag_manip:
_mag_manip.ForwardModelLinearSaturation_swigregister(ForwardModelLinearSaturation)

class ForwardModelLinearVField(ForwardModelLinear):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.ForwardModelLinearVField_swiginit(self, _mag_manip.new_ForwardModelLinearVField())

    def setInterpolationType(self, type):
        return _mag_manip.ForwardModelLinearVField_setInterpolationType(self, type)

    def getInterpolationType(self):
        return _mag_manip.ForwardModelLinearVField_getInterpolationType(self)

    def pointInWorkspace(self, position):
        return _mag_manip.ForwardModelLinearVField_pointInWorkspace(self, position)

    def setVFieldFiles(self, vfield_filenames):
        return _mag_manip.ForwardModelLinearVField_setVFieldFiles(self, vfield_filenames)

    def getVFieldGridProperties(self):
        return _mag_manip.ForwardModelLinearVField_getVFieldGridProperties(self)

    def computeGradientMatFromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinearVField_computeGradientMatFromCurrents(self, position, currents)

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModelLinearVField_setCalibrationFile(self, filename)

    def isValid(self):
        return _mag_manip.ForwardModelLinearVField_isValid(self)

    def getNumCoils(self):
        return _mag_manip.ForwardModelLinearVField_getNumCoils(self)

    def computeFieldFromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinearVField_computeFieldFromCurrents(self, position, currents)

    def computeGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinearVField_computeGradient5FromCurrents(self, position, currents)

    def computeFieldGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelLinearVField_computeFieldGradient5FromCurrents(self, position, currents)

    def getActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinearVField_getActuationMatrix(self, position)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinearVField_getFieldActuationMatrix(self, position)
    __swig_destroy__ = _mag_manip.delete_ForwardModelLinearVField

# Register ForwardModelLinearVField in _mag_manip:
_mag_manip.ForwardModelLinearVField_swigregister(ForwardModelLinearVField)

class ForwardModelMPEM(ForwardModelLinear):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.ForwardModelMPEM_swiginit(self, _mag_manip.new_ForwardModelMPEM())

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModelMPEM_setCalibrationFile(self, filename)

    def getName(self):
        return _mag_manip.ForwardModelMPEM_getName(self)

    def pointInWorkspace(self, position):
        return _mag_manip.ForwardModelMPEM_pointInWorkspace(self, position)

    def getActuationMatrix(self, position):
        return _mag_manip.ForwardModelMPEM_getActuationMatrix(self, position)

    def isValid(self):
        return _mag_manip.ForwardModelMPEM_isValid(self)

    def getNumCoils(self):
        return _mag_manip.ForwardModelMPEM_getNumCoils(self)

    def computeFieldFromCurrents(self, position, currents):
        return _mag_manip.ForwardModelMPEM_computeFieldFromCurrents(self, position, currents)

    def computeGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelMPEM_computeGradient5FromCurrents(self, position, currents)

    def computeFieldGradient5FromCurrents(self, position, currents):
        return _mag_manip.ForwardModelMPEM_computeFieldGradient5FromCurrents(self, position, currents)
    __swig_destroy__ = _mag_manip.delete_ForwardModelMPEM

# Register ForwardModelMPEM in _mag_manip:
_mag_manip.ForwardModelMPEM_swigregister(ForwardModelMPEM)

class BackwardModelMPEML2(BackwardModelLinearL2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.BackwardModelMPEML2_swiginit(self, _mag_manip.new_BackwardModelMPEML2())

    def setCalibrationFile(self, filename):
        return _mag_manip.BackwardModelMPEML2_setCalibrationFile(self, filename)

    def pointInWorkspace(self, position):
        return _mag_manip.BackwardModelMPEML2_pointInWorkspace(self, position)

    def getActuationMatrix(self, position):
        return _mag_manip.BackwardModelMPEML2_getActuationMatrix(self, position)

    def getName(self):
        return _mag_manip.BackwardModelMPEML2_getName(self)

    def isValid(self):
        return _mag_manip.BackwardModelMPEML2_isValid(self)

    def getNumCoils(self):
        return _mag_manip.BackwardModelMPEML2_getNumCoils(self)
    __swig_destroy__ = _mag_manip.delete_BackwardModelMPEML2

# Register BackwardModelMPEML2 in _mag_manip:
_mag_manip.BackwardModelMPEML2_swigregister(BackwardModelMPEML2)

class ForwardModelLinearRBF(ForwardModelLinear):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.ForwardModelLinearRBF_swiginit(self, _mag_manip.new_ForwardModelLinearRBF())

    def getName(self):
        return _mag_manip.ForwardModelLinearRBF_getName(self)

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModelLinearRBF_setCalibrationFile(self, filename)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinearRBF_getFieldActuationMatrix(self, position)

    def getActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinearRBF_getActuationMatrix(self, position)

    def isValid(self):
        return _mag_manip.ForwardModelLinearRBF_isValid(self)

    def getNumCoils(self):
        return _mag_manip.ForwardModelLinearRBF_getNumCoils(self)
    __swig_destroy__ = _mag_manip.delete_ForwardModelLinearRBF

# Register ForwardModelLinearRBF in _mag_manip:
_mag_manip.ForwardModelLinearRBF_swigregister(ForwardModelLinearRBF)

class ForwardModelLinearThinPlateSpline(ForwardModelLinear):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.ForwardModelLinearThinPlateSpline_swiginit(self, _mag_manip.new_ForwardModelLinearThinPlateSpline())

    def getName(self):
        return _mag_manip.ForwardModelLinearThinPlateSpline_getName(self)

    def setCalibrationFile(self, filename):
        return _mag_manip.ForwardModelLinearThinPlateSpline_setCalibrationFile(self, filename)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinearThinPlateSpline_getFieldActuationMatrix(self, position)

    def getActuationMatrix(self, position):
        return _mag_manip.ForwardModelLinearThinPlateSpline_getActuationMatrix(self, position)

    def isValid(self):
        return _mag_manip.ForwardModelLinearThinPlateSpline_isValid(self)

    def getNumCoils(self):
        return _mag_manip.ForwardModelLinearThinPlateSpline_getNumCoils(self)
    __swig_destroy__ = _mag_manip.delete_ForwardModelLinearThinPlateSpline

# Register ForwardModelLinearThinPlateSpline in _mag_manip:
_mag_manip.ForwardModelLinearThinPlateSpline_swigregister(ForwardModelLinearThinPlateSpline)

class ForwardModelLinearSaturationCurrentsJacobianFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, position, currents):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor___call__(self, position, currents)

    def getNumCoils(self):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_getNumCoils(self)

    def setForwardModelLinearSaturation(self, p_forward_model_sat):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_setForwardModelLinearSaturation(self, p_forward_model_sat)

    def getForwardModelLinearSaturation(self):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_getForwardModelLinearSaturation(self)

    def setCachedPosition(self, position):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_setCachedPosition(self, position)

    def getCachedPosition(self):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_getCachedPosition(self)

    def cached(self, currents):
        return _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_cached(self, currents)

    def __init__(self):
        _mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_swiginit(self, _mag_manip.new_ForwardModelLinearSaturationCurrentsJacobianFunctor())
    __swig_destroy__ = _mag_manip.delete_ForwardModelLinearSaturationCurrentsJacobianFunctor

# Register ForwardModelLinearSaturationCurrentsJacobianFunctor in _mag_manip:
_mag_manip.ForwardModelLinearSaturationCurrentsJacobianFunctor_swigregister(ForwardModelLinearSaturationCurrentsJacobianFunctor)

class BackwardModelLinearVFieldL2(BackwardModelLinearL2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.BackwardModelLinearVFieldL2_swiginit(self, _mag_manip.new_BackwardModelLinearVFieldL2())

    def setCalibrationFile(self, filename):
        return _mag_manip.BackwardModelLinearVFieldL2_setCalibrationFile(self, filename)

    def pointInWorkspace(self, position):
        return _mag_manip.BackwardModelLinearVFieldL2_pointInWorkspace(self, position)

    def setInterpolationType(self, type):
        return _mag_manip.BackwardModelLinearVFieldL2_setInterpolationType(self, type)

    def getInterpolationType(self):
        return _mag_manip.BackwardModelLinearVFieldL2_getInterpolationType(self)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearVFieldL2_getFieldActuationMatrix(self, position)

    def setVFieldFiles(self, vfield_filenames):
        return _mag_manip.BackwardModelLinearVFieldL2_setVFieldFiles(self, vfield_filenames)

    def getVFieldGridProperties(self):
        return _mag_manip.BackwardModelLinearVFieldL2_getVFieldGridProperties(self)

    def getActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearVFieldL2_getActuationMatrix(self, position)

    def getName(self):
        return _mag_manip.BackwardModelLinearVFieldL2_getName(self)

    def isValid(self):
        return _mag_manip.BackwardModelLinearVFieldL2_isValid(self)

    def getNumCoils(self):
        return _mag_manip.BackwardModelLinearVFieldL2_getNumCoils(self)
    __swig_destroy__ = _mag_manip.delete_BackwardModelLinearVFieldL2

# Register BackwardModelLinearVFieldL2 in _mag_manip:
_mag_manip.BackwardModelLinearVFieldL2_swigregister(BackwardModelLinearVFieldL2)

class BackwardModelSaturation(BackwardModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.BackwardModelSaturation_swiginit(self, _mag_manip.new_BackwardModelSaturation())
    __swig_destroy__ = _mag_manip.delete_BackwardModelSaturation

    def isValid(self):
        return _mag_manip.BackwardModelSaturation_isValid(self)

    def getNumCoils(self):
        return _mag_manip.BackwardModelSaturation_getNumCoils(self)

    def getName(self):
        return _mag_manip.BackwardModelSaturation_getName(self)

    def setName(self, name):
        return _mag_manip.BackwardModelSaturation_setName(self, name)

    def setDoCheckMax(self, enable):
        return _mag_manip.BackwardModelSaturation_setDoCheckMax(self, enable)

    def setCalibrationFile(self, filename):
        return _mag_manip.BackwardModelSaturation_setCalibrationFile(self, filename)

    def getModel(self):
        return _mag_manip.BackwardModelSaturation_getModel(self)

    def setModel(self, p_model):
        return _mag_manip.BackwardModelSaturation_setModel(self, p_model)

    def setModelCalibrationFile(self, filename):
        return _mag_manip.BackwardModelSaturation_setModelCalibrationFile(self, filename)

    def getSaturationFunction(self, i):
        return _mag_manip.BackwardModelSaturation_getSaturationFunction(self, i)

    def getSaturationFunctions(self):
        return _mag_manip.BackwardModelSaturation_getSaturationFunctions(self)

    def setSaturationFunctions(self, sat_functions):
        return _mag_manip.BackwardModelSaturation_setSaturationFunctions(self, sat_functions)

    def setSaturationFunctionsFile(self, filename):
        return _mag_manip.BackwardModelSaturation_setSaturationFunctionsFile(self, filename)

    def computeCurrentsFromField(self, position, field):
        return _mag_manip.BackwardModelSaturation_computeCurrentsFromField(self, position, field)

    def computeCurrentsFromFieldGradient5(self, position, field, gradient):
        return _mag_manip.BackwardModelSaturation_computeCurrentsFromFieldGradient5(self, position, field, gradient)

    def computeCurrentsFromFieldDipoleGradient3(self, position, field, dipole, gradient):
        return _mag_manip.BackwardModelSaturation_computeCurrentsFromFieldDipoleGradient3(self, position, field, dipole, gradient)

    def setCachedPosition(self, position):
        return _mag_manip.BackwardModelSaturation_setCachedPosition(self, position)

    def getCachedPosition(self):
        return _mag_manip.BackwardModelSaturation_getCachedPosition(self)

    def setCachedPositionDipole(self, position, dipole):
        return _mag_manip.BackwardModelSaturation_setCachedPositionDipole(self, position, dipole)

    def getCachedDipole(self):
        return _mag_manip.BackwardModelSaturation_getCachedDipole(self)

    def computeCurrentsFromFieldCached(self, field):
        return _mag_manip.BackwardModelSaturation_computeCurrentsFromFieldCached(self, field)

    def computeCurrentsFromFieldGradient5Cached(self, field, gradient):
        return _mag_manip.BackwardModelSaturation_computeCurrentsFromFieldGradient5Cached(self, field, gradient)

    def computeCurrentsFromFieldDipoleGradient3Cached(self, field, gradient):
        return _mag_manip.BackwardModelSaturation_computeCurrentsFromFieldDipoleGradient3Cached(self, field, gradient)

# Register BackwardModelSaturation in _mag_manip:
_mag_manip.BackwardModelSaturation_swigregister(BackwardModelSaturation)

class BackwardModelLinearRBFL2(BackwardModelLinearL2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.BackwardModelLinearRBFL2_swiginit(self, _mag_manip.new_BackwardModelLinearRBFL2())

    def getName(self):
        return _mag_manip.BackwardModelLinearRBFL2_getName(self)

    def setCalibrationFile(self, filename):
        return _mag_manip.BackwardModelLinearRBFL2_setCalibrationFile(self, filename)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearRBFL2_getFieldActuationMatrix(self, position)

    def getActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearRBFL2_getActuationMatrix(self, position)

    def isValid(self):
        return _mag_manip.BackwardModelLinearRBFL2_isValid(self)

    def getNumCoils(self):
        return _mag_manip.BackwardModelLinearRBFL2_getNumCoils(self)
    __swig_destroy__ = _mag_manip.delete_BackwardModelLinearRBFL2

# Register BackwardModelLinearRBFL2 in _mag_manip:
_mag_manip.BackwardModelLinearRBFL2_swigregister(BackwardModelLinearRBFL2)

class BackwardModelLinearThinPlateSplineL2(BackwardModelLinearL2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mag_manip.BackwardModelLinearThinPlateSplineL2_swiginit(self, _mag_manip.new_BackwardModelLinearThinPlateSplineL2())

    def getName(self):
        return _mag_manip.BackwardModelLinearThinPlateSplineL2_getName(self)

    def setCalibrationFile(self, filename):
        return _mag_manip.BackwardModelLinearThinPlateSplineL2_setCalibrationFile(self, filename)

    def getFieldActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearThinPlateSplineL2_getFieldActuationMatrix(self, position)

    def getActuationMatrix(self, position):
        return _mag_manip.BackwardModelLinearThinPlateSplineL2_getActuationMatrix(self, position)

    def isValid(self):
        return _mag_manip.BackwardModelLinearThinPlateSplineL2_isValid(self)

    def getNumCoils(self):
        return _mag_manip.BackwardModelLinearThinPlateSplineL2_getNumCoils(self)
    __swig_destroy__ = _mag_manip.delete_BackwardModelLinearThinPlateSplineL2

# Register BackwardModelLinearThinPlateSplineL2 in _mag_manip:
_mag_manip.BackwardModelLinearThinPlateSplineL2_swigregister(BackwardModelLinearThinPlateSplineL2)

class CurrentsJacobianFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __call__(self, position, currents):
        return _mag_manip.CurrentsJacobianFunctor___call__(self, position, currents)

    def getNumCoils(self):
        return _mag_manip.CurrentsJacobianFunctor_getNumCoils(self)

    def setCachedPosition(self, position):
        return _mag_manip.CurrentsJacobianFunctor_setCachedPosition(self, position)

    def getCachedPosition(self):
        return _mag_manip.CurrentsJacobianFunctor_getCachedPosition(self)

    def cached(self, currents):
        return _mag_manip.CurrentsJacobianFunctor_cached(self, currents)
    __swig_destroy__ = _mag_manip.delete_CurrentsJacobianFunctor

# Register CurrentsJacobianFunctor in _mag_manip:
_mag_manip.CurrentsJacobianFunctor_swigregister(CurrentsJacobianFunctor)


def torqueOnDipole(moment, field):
    return _mag_manip.torqueOnDipole(moment, field)

def forceOnDipole(moment, gradient5):
    return _mag_manip.forceOnDipole(moment, gradient5)

def gradientMatToGradient5Vec(grad_mat):
    return _mag_manip.gradientMatToGradient5Vec(grad_mat)

def gradient5VecToGradientMat(grad5_vec):
    return _mag_manip.gradient5VecToGradientMat(grad5_vec)

def directedGradient3Mat(v):
    return _mag_manip.directedGradient3Mat(v)

def skewSymmetric(v):
    return _mag_manip.skewSymmetric(v)

def isSkewSymmetric(m):
    return _mag_manip.isSkewSymmetric(m)

def fromSkewSymmetric(m):
    return _mag_manip.fromSkewSymmetric(m)

def alignedGradientFromMat(dipole, gradient):
    return _mag_manip.alignedGradientFromMat(dipole, gradient)

def alignedGradientFromGrad5(dipole, gradient):
    return _mag_manip.alignedGradientFromGrad5(dipole, gradient)

def alignedGradient(dipole, gradient):
    return _mag_manip.alignedGradient(dipole, gradient)

def getMaxFieldAlignedWithTargetField(*args):
    return _mag_manip.getMaxFieldAlignedWithTargetField(*args)

def getMaxFieldMagnitudeAlignedWithTargetField(*args):
    return _mag_manip.getMaxFieldMagnitudeAlignedWithTargetField(*args)


