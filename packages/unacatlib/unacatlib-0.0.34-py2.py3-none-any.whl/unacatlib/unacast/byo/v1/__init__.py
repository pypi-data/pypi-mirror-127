# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/byo/v1/byo_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class Region(betterproto.Enum):
    NOT_DEFINED = 0
    US = 1
    NON_US = 2


@dataclass(eq=False, repr=False)
class LatLonToPolygonRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    point_radii: List["PointRadius"] = betterproto.message_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LatLonToPolygonResponse(betterproto.Message):
    pois: List["PointOfInterest"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsRequest(betterproto.Message):
    regions: List["Region"] = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsResponse(betterproto.Message):
    metric_refs_regions: List["MetricReferenceForRegion"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionResponse(betterproto.Message):
    collection_reference: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportFromStoredCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    poi_collection_reference: str = betterproto.string_field(7)
    region: "Region" = betterproto.enum_field(9)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportFromPassedCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    pois: List["PointOfInterest"] = betterproto.message_field(6)
    region: "Region" = betterproto.enum_field(9)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReferenceForRegion(betterproto.Message):
    region: "Region" = betterproto.enum_field(1)
    metric_refs: List["MetricReference"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReference(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    metric_category: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Period(betterproto.Message):
    start: "__unatype__.Date" = betterproto.message_field(1)
    end: "__unatype__.Date" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointOfInterest(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "Polygon" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    coordinates: List["Coordinate"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lon: str = betterproto.string_field(1)
    lat: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportResponse(betterproto.Message):
    metrics_on_pois: List["MetricOnPois"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    csv_result: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointRadius(betterproto.Message):
    name: str = betterproto.string_field(1)
    coordinate: "Coordinate" = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


class ByoServiceStub(betterproto.ServiceStub):
    async def create_stored_collection(
        self,
        *,
        billing_context: str = "",
        pois: Optional[List["PointOfInterest"]] = None,
    ) -> "CreateStoredCollectionResponse":
        pois = pois or []

        request = CreateStoredCollectionRequest()
        request.billing_context = billing_context
        if pois is not None:
            request.pois = pois

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollection",
            request,
            CreateStoredCollectionResponse,
        )

    async def create_report_from_stored_collection(
        self,
        *,
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        poi_collection_reference: str = "",
        region: "Region" = None,
    ) -> "CreateReportResponse":
        metric_refs = metric_refs or []

        request = CreateReportFromStoredCollectionRequest()
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        request.poi_collection_reference = poi_collection_reference
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateReportFromStoredCollection",
            request,
            CreateReportResponse,
        )

    async def create_report_from_passed_collection(
        self,
        *,
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        pois: Optional[List["PointOfInterest"]] = None,
        region: "Region" = None,
    ) -> "CreateReportResponse":
        metric_refs = metric_refs or []
        pois = pois or []

        request = CreateReportFromPassedCollectionRequest()
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        if pois is not None:
            request.pois = pois
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateReportFromPassedCollection",
            request,
            CreateReportResponse,
        )

    async def list_metrics(
        self, *, regions: Optional[List["Region"]] = None
    ) -> "ListMetricsResponse":
        regions = regions or []

        request = ListMetricsRequest()
        request.regions = regions

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListMetrics", request, ListMetricsResponse
        )

    async def lat_lon_to_polygon(
        self,
        *,
        billing_context: str = "",
        point_radii: Optional[List["PointRadius"]] = None,
    ) -> "LatLonToPolygonResponse":
        point_radii = point_radii or []

        request = LatLonToPolygonRequest()
        request.billing_context = billing_context
        if point_radii is not None:
            request.point_radii = point_radii

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/LatLonToPolygon",
            request,
            LatLonToPolygonResponse,
        )


from ... import unatype as __unatype__
