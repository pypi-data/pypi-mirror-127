# AUTOGENERATED! DO NOT EDIT! File to edit: source_nbs/07_input_fn.ipynb (unless otherwise specified).

__all__ = ['element_length_func', 'train_eval_input_fn', 'predict_input_fn']

# Cell
from typing import List, Union, Dict
import json
from loguru import logger

import tensorflow as tf

from .params import Params
from .read_write_tfrecord import read_tfrecord, write_tfrecord
from .special_tokens import PREDICT, TRAIN
from .utils import infer_shape_and_type_from_dict, get_is_pyspark
from .preproc_decorator import preprocessing_fn


# Cell

def element_length_func(yield_dict: Dict[str, tf.Tensor]):  # pragma: no cover
    input_ids_keys = [k for k in yield_dict.keys() if 'input_ids' in k]
    max_length = tf.reduce_sum([tf.shape(yield_dict[k])[0]
                               for k in input_ids_keys])
    return max_length


def train_eval_input_fn(params: Params, mode=TRAIN) -> tf.data.Dataset:
    '''
    This function will write and read tf record for training
    and evaluation.

    Arguments:
        params {Params} -- Params objects

    Keyword Arguments:
        mode {str} -- ModeKeys (default: {TRAIN})

    Returns:
        tf Dataset -- Tensorflow dataset
    '''
    write_tfrecord(params=params)

    # reading with pyspark is not supported
    if get_is_pyspark():
        return

    dataset_dict = read_tfrecord(params=params, mode=mode)

    # make sure the order is correct
    dataset_dict_keys = list(dataset_dict.keys())
    dataset_list = [dataset_dict[key] for key in dataset_dict_keys]
    sample_prob_dict = params.calculate_data_sampling_prob()
    weight_list = [
        sample_prob_dict[key]
        for key in dataset_dict_keys
    ]

    logger.info('sampling weights: ')
    logger.info(json.dumps(params.problem_sampling_weight_dict, indent=4))
    # for problem_chunk_name, weight in params.problem_sampling_weight_dict.items():
    #     logger.info('{0}: {1}'.format(problem_chunk_name, weight))

    dataset = tf.data.experimental.sample_from_datasets(
        datasets=dataset_list, weights=weight_list)
    options = tf.data.Options()
    options.experimental_distribute.auto_shard_policy = tf.data.experimental.AutoShardPolicy.DATA
    dataset = dataset.with_options(options)

    if mode == TRAIN:
        dataset = dataset.shuffle(params.shuffle_buffer)

    dataset = dataset.prefetch(tf.data.experimental.AUTOTUNE)
    if params.dynamic_padding:
        dataset = dataset.apply(
            tf.data.experimental.bucket_by_sequence_length(
                element_length_func=element_length_func,
                bucket_batch_sizes=params.bucket_batch_sizes,
                bucket_boundaries=params.bucket_boundaries
            ))
    else:
        first_example = next(dataset.as_numpy_iterator())
        output_shapes, _ = infer_shape_and_type_from_dict(first_example)

        if mode == TRAIN:
            dataset = dataset.padded_batch(params.batch_size, output_shapes)
        else:
            dataset = dataset.padded_batch(params.batch_size*2, output_shapes)

    return dataset


# Cell
def predict_input_fn(input_file_or_list: Union[str, List[str]],
                     params: Params,
                     mode=PREDICT,
                     labels_in_input=False) -> tf.data.Dataset:
    '''Input function that takes a file path or list of string and
    convert it to tf.dataset

    Example:
        predict_fn = lambda: predict_input_fn('test.txt', params)
        pred = estimator.predict(predict_fn)

    Arguments:
        input_file_or_list {str or list} -- file path or list of string
        params {Params} -- Params object

    Keyword Arguments:
        mode {str} -- ModeKeys (default: {PREDICT})

    Returns:
        tf dataset -- tf dataset
    '''

    # if is string, treat it as path to file
    if isinstance(input_file_or_list, str):
        inputs = open(input_file_or_list, 'r', encoding='utf8')
    else:
        inputs = input_file_or_list

    # ugly wrapping
    def gen():
        @preprocessing_fn
        def gen_wrapper(params, mode):
            return inputs
        return gen_wrapper(params, mode)

    first_dict = next(gen())

    output_shapes, output_type = infer_shape_and_type_from_dict(first_dict)
    dataset = tf.data.Dataset.from_generator(
        gen, output_types=output_type, output_shapes=output_shapes)

    dataset = dataset.padded_batch(
        params.batch_size,
        output_shapes
    )
    # dataset = dataset.batch(config.batch_size*2)

    return dataset
