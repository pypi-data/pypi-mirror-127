# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import isula.isulad_grpc.container_pb2 as container__pb2


class ContainerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/containers.ContainerService/Create',
                request_serializer=container__pb2.CreateRequest.SerializeToString,
                response_deserializer=container__pb2.CreateResponse.FromString,
                )
        self.Start = channel.unary_unary(
                '/containers.ContainerService/Start',
                request_serializer=container__pb2.StartRequest.SerializeToString,
                response_deserializer=container__pb2.StartResponse.FromString,
                )
        self.RemoteStart = channel.stream_stream(
                '/containers.ContainerService/RemoteStart',
                request_serializer=container__pb2.RemoteStartRequest.SerializeToString,
                response_deserializer=container__pb2.RemoteStartResponse.FromString,
                )
        self.Top = channel.unary_unary(
                '/containers.ContainerService/Top',
                request_serializer=container__pb2.TopRequest.SerializeToString,
                response_deserializer=container__pb2.TopResponse.FromString,
                )
        self.Stop = channel.unary_unary(
                '/containers.ContainerService/Stop',
                request_serializer=container__pb2.StopRequest.SerializeToString,
                response_deserializer=container__pb2.StopResponse.FromString,
                )
        self.Kill = channel.unary_unary(
                '/containers.ContainerService/Kill',
                request_serializer=container__pb2.KillRequest.SerializeToString,
                response_deserializer=container__pb2.KillResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/containers.ContainerService/Delete',
                request_serializer=container__pb2.DeleteRequest.SerializeToString,
                response_deserializer=container__pb2.DeleteResponse.FromString,
                )
        self.Pause = channel.unary_unary(
                '/containers.ContainerService/Pause',
                request_serializer=container__pb2.PauseRequest.SerializeToString,
                response_deserializer=container__pb2.PauseResponse.FromString,
                )
        self.Resume = channel.unary_unary(
                '/containers.ContainerService/Resume',
                request_serializer=container__pb2.ResumeRequest.SerializeToString,
                response_deserializer=container__pb2.ResumeResponse.FromString,
                )
        self.Inspect = channel.unary_unary(
                '/containers.ContainerService/Inspect',
                request_serializer=container__pb2.InspectContainerRequest.SerializeToString,
                response_deserializer=container__pb2.InspectContainerResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/containers.ContainerService/List',
                request_serializer=container__pb2.ListRequest.SerializeToString,
                response_deserializer=container__pb2.ListResponse.FromString,
                )
        self.Stats = channel.unary_unary(
                '/containers.ContainerService/Stats',
                request_serializer=container__pb2.StatsRequest.SerializeToString,
                response_deserializer=container__pb2.StatsResponse.FromString,
                )
        self.Wait = channel.unary_unary(
                '/containers.ContainerService/Wait',
                request_serializer=container__pb2.WaitRequest.SerializeToString,
                response_deserializer=container__pb2.WaitResponse.FromString,
                )
        self.Events = channel.unary_stream(
                '/containers.ContainerService/Events',
                request_serializer=container__pb2.EventsRequest.SerializeToString,
                response_deserializer=container__pb2.Event.FromString,
                )
        self.Exec = channel.unary_unary(
                '/containers.ContainerService/Exec',
                request_serializer=container__pb2.ExecRequest.SerializeToString,
                response_deserializer=container__pb2.ExecResponse.FromString,
                )
        self.RemoteExec = channel.stream_stream(
                '/containers.ContainerService/RemoteExec',
                request_serializer=container__pb2.RemoteExecRequest.SerializeToString,
                response_deserializer=container__pb2.RemoteExecResponse.FromString,
                )
        self.Version = channel.unary_unary(
                '/containers.ContainerService/Version',
                request_serializer=container__pb2.VersionRequest.SerializeToString,
                response_deserializer=container__pb2.VersionResponse.FromString,
                )
        self.Info = channel.unary_unary(
                '/containers.ContainerService/Info',
                request_serializer=container__pb2.InfoRequest.SerializeToString,
                response_deserializer=container__pb2.InfoResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/containers.ContainerService/Update',
                request_serializer=container__pb2.UpdateRequest.SerializeToString,
                response_deserializer=container__pb2.UpdateResponse.FromString,
                )
        self.Attach = channel.stream_stream(
                '/containers.ContainerService/Attach',
                request_serializer=container__pb2.AttachRequest.SerializeToString,
                response_deserializer=container__pb2.AttachResponse.FromString,
                )
        self.Restart = channel.unary_unary(
                '/containers.ContainerService/Restart',
                request_serializer=container__pb2.RestartRequest.SerializeToString,
                response_deserializer=container__pb2.RestartResponse.FromString,
                )
        self.Export = channel.unary_unary(
                '/containers.ContainerService/Export',
                request_serializer=container__pb2.ExportRequest.SerializeToString,
                response_deserializer=container__pb2.ExportResponse.FromString,
                )
        self.CopyFromContainer = channel.unary_stream(
                '/containers.ContainerService/CopyFromContainer',
                request_serializer=container__pb2.CopyFromContainerRequest.SerializeToString,
                response_deserializer=container__pb2.CopyFromContainerResponse.FromString,
                )
        self.CopyToContainer = channel.stream_stream(
                '/containers.ContainerService/CopyToContainer',
                request_serializer=container__pb2.CopyToContainerRequest.SerializeToString,
                response_deserializer=container__pb2.CopyToContainerResponse.FromString,
                )
        self.Rename = channel.unary_unary(
                '/containers.ContainerService/Rename',
                request_serializer=container__pb2.RenameRequest.SerializeToString,
                response_deserializer=container__pb2.RenameResponse.FromString,
                )
        self.Logs = channel.unary_stream(
                '/containers.ContainerService/Logs',
                request_serializer=container__pb2.LogsRequest.SerializeToString,
                response_deserializer=container__pb2.LogsResponse.FromString,
                )
        self.Resize = channel.unary_unary(
                '/containers.ContainerService/Resize',
                request_serializer=container__pb2.ResizeRequest.SerializeToString,
                response_deserializer=container__pb2.ResizeResponse.FromString,
                )


class ContainerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteStart(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Top(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Kill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pause(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Resume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inspect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Wait(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Events(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteExec(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Attach(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Export(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyFromContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyToContainer(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rename(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Resize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContainerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=container__pb2.CreateRequest.FromString,
                    response_serializer=container__pb2.CreateResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=container__pb2.StartRequest.FromString,
                    response_serializer=container__pb2.StartResponse.SerializeToString,
            ),
            'RemoteStart': grpc.stream_stream_rpc_method_handler(
                    servicer.RemoteStart,
                    request_deserializer=container__pb2.RemoteStartRequest.FromString,
                    response_serializer=container__pb2.RemoteStartResponse.SerializeToString,
            ),
            'Top': grpc.unary_unary_rpc_method_handler(
                    servicer.Top,
                    request_deserializer=container__pb2.TopRequest.FromString,
                    response_serializer=container__pb2.TopResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=container__pb2.StopRequest.FromString,
                    response_serializer=container__pb2.StopResponse.SerializeToString,
            ),
            'Kill': grpc.unary_unary_rpc_method_handler(
                    servicer.Kill,
                    request_deserializer=container__pb2.KillRequest.FromString,
                    response_serializer=container__pb2.KillResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=container__pb2.DeleteRequest.FromString,
                    response_serializer=container__pb2.DeleteResponse.SerializeToString,
            ),
            'Pause': grpc.unary_unary_rpc_method_handler(
                    servicer.Pause,
                    request_deserializer=container__pb2.PauseRequest.FromString,
                    response_serializer=container__pb2.PauseResponse.SerializeToString,
            ),
            'Resume': grpc.unary_unary_rpc_method_handler(
                    servicer.Resume,
                    request_deserializer=container__pb2.ResumeRequest.FromString,
                    response_serializer=container__pb2.ResumeResponse.SerializeToString,
            ),
            'Inspect': grpc.unary_unary_rpc_method_handler(
                    servicer.Inspect,
                    request_deserializer=container__pb2.InspectContainerRequest.FromString,
                    response_serializer=container__pb2.InspectContainerResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=container__pb2.ListRequest.FromString,
                    response_serializer=container__pb2.ListResponse.SerializeToString,
            ),
            'Stats': grpc.unary_unary_rpc_method_handler(
                    servicer.Stats,
                    request_deserializer=container__pb2.StatsRequest.FromString,
                    response_serializer=container__pb2.StatsResponse.SerializeToString,
            ),
            'Wait': grpc.unary_unary_rpc_method_handler(
                    servicer.Wait,
                    request_deserializer=container__pb2.WaitRequest.FromString,
                    response_serializer=container__pb2.WaitResponse.SerializeToString,
            ),
            'Events': grpc.unary_stream_rpc_method_handler(
                    servicer.Events,
                    request_deserializer=container__pb2.EventsRequest.FromString,
                    response_serializer=container__pb2.Event.SerializeToString,
            ),
            'Exec': grpc.unary_unary_rpc_method_handler(
                    servicer.Exec,
                    request_deserializer=container__pb2.ExecRequest.FromString,
                    response_serializer=container__pb2.ExecResponse.SerializeToString,
            ),
            'RemoteExec': grpc.stream_stream_rpc_method_handler(
                    servicer.RemoteExec,
                    request_deserializer=container__pb2.RemoteExecRequest.FromString,
                    response_serializer=container__pb2.RemoteExecResponse.SerializeToString,
            ),
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=container__pb2.VersionRequest.FromString,
                    response_serializer=container__pb2.VersionResponse.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=container__pb2.InfoRequest.FromString,
                    response_serializer=container__pb2.InfoResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=container__pb2.UpdateRequest.FromString,
                    response_serializer=container__pb2.UpdateResponse.SerializeToString,
            ),
            'Attach': grpc.stream_stream_rpc_method_handler(
                    servicer.Attach,
                    request_deserializer=container__pb2.AttachRequest.FromString,
                    response_serializer=container__pb2.AttachResponse.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=container__pb2.RestartRequest.FromString,
                    response_serializer=container__pb2.RestartResponse.SerializeToString,
            ),
            'Export': grpc.unary_unary_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=container__pb2.ExportRequest.FromString,
                    response_serializer=container__pb2.ExportResponse.SerializeToString,
            ),
            'CopyFromContainer': grpc.unary_stream_rpc_method_handler(
                    servicer.CopyFromContainer,
                    request_deserializer=container__pb2.CopyFromContainerRequest.FromString,
                    response_serializer=container__pb2.CopyFromContainerResponse.SerializeToString,
            ),
            'CopyToContainer': grpc.stream_stream_rpc_method_handler(
                    servicer.CopyToContainer,
                    request_deserializer=container__pb2.CopyToContainerRequest.FromString,
                    response_serializer=container__pb2.CopyToContainerResponse.SerializeToString,
            ),
            'Rename': grpc.unary_unary_rpc_method_handler(
                    servicer.Rename,
                    request_deserializer=container__pb2.RenameRequest.FromString,
                    response_serializer=container__pb2.RenameResponse.SerializeToString,
            ),
            'Logs': grpc.unary_stream_rpc_method_handler(
                    servicer.Logs,
                    request_deserializer=container__pb2.LogsRequest.FromString,
                    response_serializer=container__pb2.LogsResponse.SerializeToString,
            ),
            'Resize': grpc.unary_unary_rpc_method_handler(
                    servicer.Resize,
                    request_deserializer=container__pb2.ResizeRequest.FromString,
                    response_serializer=container__pb2.ResizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'containers.ContainerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContainerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Create',
            container__pb2.CreateRequest.SerializeToString,
            container__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Start',
            container__pb2.StartRequest.SerializeToString,
            container__pb2.StartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoteStart(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/containers.ContainerService/RemoteStart',
            container__pb2.RemoteStartRequest.SerializeToString,
            container__pb2.RemoteStartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Top(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Top',
            container__pb2.TopRequest.SerializeToString,
            container__pb2.TopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Stop',
            container__pb2.StopRequest.SerializeToString,
            container__pb2.StopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Kill',
            container__pb2.KillRequest.SerializeToString,
            container__pb2.KillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Delete',
            container__pb2.DeleteRequest.SerializeToString,
            container__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Pause',
            container__pb2.PauseRequest.SerializeToString,
            container__pb2.PauseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Resume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Resume',
            container__pb2.ResumeRequest.SerializeToString,
            container__pb2.ResumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inspect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Inspect',
            container__pb2.InspectContainerRequest.SerializeToString,
            container__pb2.InspectContainerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/List',
            container__pb2.ListRequest.SerializeToString,
            container__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Stats',
            container__pb2.StatsRequest.SerializeToString,
            container__pb2.StatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Wait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Wait',
            container__pb2.WaitRequest.SerializeToString,
            container__pb2.WaitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Events(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/containers.ContainerService/Events',
            container__pb2.EventsRequest.SerializeToString,
            container__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Exec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Exec',
            container__pb2.ExecRequest.SerializeToString,
            container__pb2.ExecResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoteExec(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/containers.ContainerService/RemoteExec',
            container__pb2.RemoteExecRequest.SerializeToString,
            container__pb2.RemoteExecResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Version',
            container__pb2.VersionRequest.SerializeToString,
            container__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Info',
            container__pb2.InfoRequest.SerializeToString,
            container__pb2.InfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Update',
            container__pb2.UpdateRequest.SerializeToString,
            container__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Attach(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/containers.ContainerService/Attach',
            container__pb2.AttachRequest.SerializeToString,
            container__pb2.AttachResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Restart',
            container__pb2.RestartRequest.SerializeToString,
            container__pb2.RestartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Export',
            container__pb2.ExportRequest.SerializeToString,
            container__pb2.ExportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CopyFromContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/containers.ContainerService/CopyFromContainer',
            container__pb2.CopyFromContainerRequest.SerializeToString,
            container__pb2.CopyFromContainerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CopyToContainer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/containers.ContainerService/CopyToContainer',
            container__pb2.CopyToContainerRequest.SerializeToString,
            container__pb2.CopyToContainerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Rename',
            container__pb2.RenameRequest.SerializeToString,
            container__pb2.RenameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/containers.ContainerService/Logs',
            container__pb2.LogsRequest.SerializeToString,
            container__pb2.LogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Resize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/containers.ContainerService/Resize',
            container__pb2.ResizeRequest.SerializeToString,
            container__pb2.ResizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
