# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import isula.isulad_grpc.volumes_pb2 as volumes__pb2


class VolumeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/volume.VolumeService/List',
                request_serializer=volumes__pb2.ListVolumeRequest.SerializeToString,
                response_deserializer=volumes__pb2.ListVolumeResponse.FromString,
                )
        self.Remove = channel.unary_unary(
                '/volume.VolumeService/Remove',
                request_serializer=volumes__pb2.RemoveVolumeRequest.SerializeToString,
                response_deserializer=volumes__pb2.RemoveVolumeResponse.FromString,
                )
        self.Prune = channel.unary_unary(
                '/volume.VolumeService/Prune',
                request_serializer=volumes__pb2.PruneVolumeRequest.SerializeToString,
                response_deserializer=volumes__pb2.PruneVolumeResponse.FromString,
                )


class VolumeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VolumeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=volumes__pb2.ListVolumeRequest.FromString,
                    response_serializer=volumes__pb2.ListVolumeResponse.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=volumes__pb2.RemoveVolumeRequest.FromString,
                    response_serializer=volumes__pb2.RemoveVolumeResponse.SerializeToString,
            ),
            'Prune': grpc.unary_unary_rpc_method_handler(
                    servicer.Prune,
                    request_deserializer=volumes__pb2.PruneVolumeRequest.FromString,
                    response_serializer=volumes__pb2.PruneVolumeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'volume.VolumeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VolumeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/volume.VolumeService/List',
            volumes__pb2.ListVolumeRequest.SerializeToString,
            volumes__pb2.ListVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/volume.VolumeService/Remove',
            volumes__pb2.RemoveVolumeRequest.SerializeToString,
            volumes__pb2.RemoveVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/volume.VolumeService/Prune',
            volumes__pb2.PruneVolumeRequest.SerializeToString,
            volumes__pb2.PruneVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
