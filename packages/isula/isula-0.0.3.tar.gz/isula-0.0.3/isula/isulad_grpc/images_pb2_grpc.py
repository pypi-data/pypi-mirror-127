# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import isula.isulad_grpc.images_pb2 as images__pb2


class ImagesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/images.ImagesService/List',
                request_serializer=images__pb2.ListImagesRequest.SerializeToString,
                response_deserializer=images__pb2.ListImagesResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/images.ImagesService/Delete',
                request_serializer=images__pb2.DeleteImageRequest.SerializeToString,
                response_deserializer=images__pb2.DeleteImageResponse.FromString,
                )
        self.Load = channel.unary_unary(
                '/images.ImagesService/Load',
                request_serializer=images__pb2.LoadImageRequest.SerializeToString,
                response_deserializer=images__pb2.LoadImageResponse.FromString,
                )
        self.Inspect = channel.unary_unary(
                '/images.ImagesService/Inspect',
                request_serializer=images__pb2.InspectImageRequest.SerializeToString,
                response_deserializer=images__pb2.InspectImageResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/images.ImagesService/Login',
                request_serializer=images__pb2.LoginRequest.SerializeToString,
                response_deserializer=images__pb2.LoginResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/images.ImagesService/Logout',
                request_serializer=images__pb2.LogoutRequest.SerializeToString,
                response_deserializer=images__pb2.LogoutResponse.FromString,
                )
        self.Tag = channel.unary_unary(
                '/images.ImagesService/Tag',
                request_serializer=images__pb2.TagImageRequest.SerializeToString,
                response_deserializer=images__pb2.TagImageResponse.FromString,
                )
        self.Import = channel.unary_unary(
                '/images.ImagesService/Import',
                request_serializer=images__pb2.ImportRequest.SerializeToString,
                response_deserializer=images__pb2.ImportResponse.FromString,
                )


class ImagesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inspect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Import(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImagesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=images__pb2.ListImagesRequest.FromString,
                    response_serializer=images__pb2.ListImagesResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=images__pb2.DeleteImageRequest.FromString,
                    response_serializer=images__pb2.DeleteImageResponse.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=images__pb2.LoadImageRequest.FromString,
                    response_serializer=images__pb2.LoadImageResponse.SerializeToString,
            ),
            'Inspect': grpc.unary_unary_rpc_method_handler(
                    servicer.Inspect,
                    request_deserializer=images__pb2.InspectImageRequest.FromString,
                    response_serializer=images__pb2.InspectImageResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=images__pb2.LoginRequest.FromString,
                    response_serializer=images__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=images__pb2.LogoutRequest.FromString,
                    response_serializer=images__pb2.LogoutResponse.SerializeToString,
            ),
            'Tag': grpc.unary_unary_rpc_method_handler(
                    servicer.Tag,
                    request_deserializer=images__pb2.TagImageRequest.FromString,
                    response_serializer=images__pb2.TagImageResponse.SerializeToString,
            ),
            'Import': grpc.unary_unary_rpc_method_handler(
                    servicer.Import,
                    request_deserializer=images__pb2.ImportRequest.FromString,
                    response_serializer=images__pb2.ImportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'images.ImagesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImagesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/List',
            images__pb2.ListImagesRequest.SerializeToString,
            images__pb2.ListImagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Delete',
            images__pb2.DeleteImageRequest.SerializeToString,
            images__pb2.DeleteImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Load',
            images__pb2.LoadImageRequest.SerializeToString,
            images__pb2.LoadImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inspect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Inspect',
            images__pb2.InspectImageRequest.SerializeToString,
            images__pb2.InspectImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Login',
            images__pb2.LoginRequest.SerializeToString,
            images__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Logout',
            images__pb2.LogoutRequest.SerializeToString,
            images__pb2.LogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Tag',
            images__pb2.TagImageRequest.SerializeToString,
            images__pb2.TagImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Import(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/images.ImagesService/Import',
            images__pb2.ImportRequest.SerializeToString,
            images__pb2.ImportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
