{"version":3,"file":"df243fa6.js","mappings":";;AAsFA;;;AAGA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA","sources":["webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-icon-item.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n"],"names":[],"sourceRoot":""}