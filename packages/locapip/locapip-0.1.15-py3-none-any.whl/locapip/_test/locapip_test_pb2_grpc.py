# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import locapip_test_pb2 as locapip__test__pb2


class TestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.unary_unary = channel.unary_unary(
                '/locapip_test.Test/unary_unary',
                request_serializer=locapip__test__pb2.Text.SerializeToString,
                response_deserializer=locapip__test__pb2.Text.FromString,
                )
        self.unary_stream = channel.unary_stream(
                '/locapip_test.Test/unary_stream',
                request_serializer=locapip__test__pb2.Text.SerializeToString,
                response_deserializer=locapip__test__pb2.Text.FromString,
                )
        self.stream_unary = channel.stream_unary(
                '/locapip_test.Test/stream_unary',
                request_serializer=locapip__test__pb2.Text.SerializeToString,
                response_deserializer=locapip__test__pb2.Text.FromString,
                )
        self.stream_stream = channel.stream_stream(
                '/locapip_test.Test/stream_stream',
                request_serializer=locapip__test__pb2.Text.SerializeToString,
                response_deserializer=locapip__test__pb2.Text.FromString,
                )


class TestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def unary_unary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unary_stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream_unary(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'unary_unary': grpc.unary_unary_rpc_method_handler(
                    servicer.unary_unary,
                    request_deserializer=locapip__test__pb2.Text.FromString,
                    response_serializer=locapip__test__pb2.Text.SerializeToString,
            ),
            'unary_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.unary_stream,
                    request_deserializer=locapip__test__pb2.Text.FromString,
                    response_serializer=locapip__test__pb2.Text.SerializeToString,
            ),
            'stream_unary': grpc.stream_unary_rpc_method_handler(
                    servicer.stream_unary,
                    request_deserializer=locapip__test__pb2.Text.FromString,
                    response_serializer=locapip__test__pb2.Text.SerializeToString,
            ),
            'stream_stream': grpc.stream_stream_rpc_method_handler(
                    servicer.stream_stream,
                    request_deserializer=locapip__test__pb2.Text.FromString,
                    response_serializer=locapip__test__pb2.Text.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'locapip_test.Test', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Test(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def unary_unary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/locapip_test.Test/unary_unary',
            locapip__test__pb2.Text.SerializeToString,
            locapip__test__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unary_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/locapip_test.Test/unary_stream',
            locapip__test__pb2.Text.SerializeToString,
            locapip__test__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream_unary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/locapip_test.Test/stream_unary',
            locapip__test__pb2.Text.SerializeToString,
            locapip__test__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/locapip_test.Test/stream_stream',
            locapip__test__pb2.Text.SerializeToString,
            locapip__test__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
