# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fit_fill_pb2 as fit__fill__pb2


class FitFillStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.new_stage = channel.unary_unary(
                '/fit_fill.FitFill/new_stage',
                request_serializer=fit__fill__pb2.Setting.SerializeToString,
                response_deserializer=fit__fill__pb2.Setting.FromString,
                )
        self.upload_mesh = channel.stream_unary(
                '/fit_fill.FitFill/upload_mesh',
                request_serializer=fit__fill__pb2.Mesh.SerializeToString,
                response_deserializer=fit__fill__pb2.MeshInfo.FromString,
                )
        self.simulate = channel.unary_unary(
                '/fit_fill.FitFill/simulate',
                request_serializer=fit__fill__pb2.Simulate.SerializeToString,
                response_deserializer=fit__fill__pb2.SimulateResult.FromString,
                )


class FitFillServicer(object):
    """Missing associated documentation comment in .proto file."""

    def new_stage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_mesh(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def simulate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FitFillServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'new_stage': grpc.unary_unary_rpc_method_handler(
                    servicer.new_stage,
                    request_deserializer=fit__fill__pb2.Setting.FromString,
                    response_serializer=fit__fill__pb2.Setting.SerializeToString,
            ),
            'upload_mesh': grpc.stream_unary_rpc_method_handler(
                    servicer.upload_mesh,
                    request_deserializer=fit__fill__pb2.Mesh.FromString,
                    response_serializer=fit__fill__pb2.MeshInfo.SerializeToString,
            ),
            'simulate': grpc.unary_unary_rpc_method_handler(
                    servicer.simulate,
                    request_deserializer=fit__fill__pb2.Simulate.FromString,
                    response_serializer=fit__fill__pb2.SimulateResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fit_fill.FitFill', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FitFill(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def new_stage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fit_fill.FitFill/new_stage',
            fit__fill__pb2.Setting.SerializeToString,
            fit__fill__pb2.Setting.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_mesh(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/fit_fill.FitFill/upload_mesh',
            fit__fill__pb2.Mesh.SerializeToString,
            fit__fill__pb2.MeshInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def simulate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fit_fill.FitFill/simulate',
            fit__fill__pb2.Simulate.SerializeToString,
            fit__fill__pb2.SimulateResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
